{"ast":null,"code":"var _jsxFileName = \"/Users/driesrooryck/Desktop/s25/distributed-systems/tetris/client/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useCallback, useRef } from 'react';\nimport { io } from 'socket.io-client';\nimport GameBoard from './GameBoard';\nimport HomeScreen from './HomeScreen';\nimport GameOverScreen from './GameOverScreen';\nimport ScorePanel from './ScorePanel';\n\n// Background image configuration\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BACKGROUND_IMAGES = ['deep-tetris-color.jpg', 'tetris-1920-x-1080-background-hyihqau5t3lalo4e.png', 'tetris-2560-x-1600-background-3bjbi7nyulqbller.jpg'];\nconst BACKGROUND_CHANGE_INTERVAL = 30000; // 30 seconds\n\n// Load config file to get server address\nconst loadConfig = async () => {\n  try {\n    const response = await fetch('/config.json');\n    if (!response.ok) {\n      throw new Error(`Failed to load config: ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.warn('Error loading config, using default server address:', error);\n    return {\n      client: {\n        serverAddress: 'http://localhost:3001'\n      }\n    };\n  }\n};\nfunction App() {\n  _s();\n  var _gameState$players, _gameState$players$so;\n  const [socket, setSocket] = useState(null);\n  const [gameState, setGameState] = useState(null);\n  const [isGameOver, setIsGameOver] = useState(false);\n  const [gameOverData, setGameOverData] = useState(null);\n  const [isConnecting, setIsConnecting] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Add state for background rotation\n  const [currentBackgroundIndex, setCurrentBackgroundIndex] = useState(0);\n  const backgroundIntervalRef = useRef(null);\n\n  // Add state for timer and scoring\n  const [elapsedTime, setElapsedTime] = useState(0);\n  const [currentScore, setCurrentScore] = useState(0);\n  const [lastScoreChange, setLastScoreChange] = useState(0);\n  const [level, setLevel] = useState(1);\n  const timerIntervalRef = useRef(null);\n\n  // Connect to socket on component mount\n  useEffect(() => {\n    const connectToServer = async () => {\n      try {\n        var _config$client;\n        setIsConnecting(true);\n        const config = await loadConfig();\n        const serverAddress = ((_config$client = config.client) === null || _config$client === void 0 ? void 0 : _config$client.serverAddress) || 'http://localhost:3001';\n        console.log(`Connecting to server at: ${serverAddress}`);\n        const newSocket = io(serverAddress);\n        setSocket(newSocket);\n        newSocket.on('connect', () => {\n          console.log('Connected to server');\n          setIsConnecting(false);\n        });\n        newSocket.on('connect_error', err => {\n          console.error('Connection error:', err);\n          setError(`Connection error: ${err.message}`);\n          setIsConnecting(false);\n        });\n        newSocket.on('init', initialState => {\n          console.log('Received initial game state:', initialState);\n          setGameState(initialState);\n          updatePlayerList(initialState.players || {});\n        });\n        newSocket.on('gameState', newState => {\n          setGameState(prevState => {\n            if (prevState !== null && prevState !== void 0 && prevState.gameInProgress && !prevState.players[newSocket.id] && newState.appPhase === 'playing') {\n              return prevState;\n            }\n            if (newState) updatePlayerList(newState.players || {});\n            return newState;\n          });\n        });\n        newSocket.on('gameOver', data => {\n          console.log('Game over with data:', data);\n          setIsGameOver(true);\n          setGameOverData(data);\n        });\n      } catch (err) {\n        console.error('Error connecting to server:', err);\n        setError(`Error connecting to server: ${err.message}`);\n        setIsConnecting(false);\n      }\n    };\n    connectToServer();\n  }, []);\n\n  // Background rotation effect - only active during gameplay\n  useEffect(() => {\n    // Clear any existing background rotation interval\n    if (backgroundIntervalRef.current) {\n      clearInterval(backgroundIntervalRef.current);\n      backgroundIntervalRef.current = null;\n    }\n\n    // Start background rotation when game is playing\n    if (gameState && gameState.appPhase === 'playing') {\n      // Randomize starting background\n      setCurrentBackgroundIndex(Math.floor(Math.random() * BACKGROUND_IMAGES.length));\n\n      // Set interval to rotate backgrounds\n      backgroundIntervalRef.current = setInterval(() => {\n        setCurrentBackgroundIndex(prevIndex => (prevIndex + 1) % BACKGROUND_IMAGES.length);\n      }, BACKGROUND_CHANGE_INTERVAL);\n    }\n\n    // Cleanup on unmount or phase change\n    return () => {\n      if (backgroundIntervalRef.current) {\n        clearInterval(backgroundIntervalRef.current);\n        backgroundIntervalRef.current = null;\n      }\n    };\n  }, [gameState === null || gameState === void 0 ? void 0 : gameState.appPhase]);\n\n  // Timer management based on game phase\n  useEffect(() => {\n    // Clean up the previous interval if it exists\n    if (timerIntervalRef.current) {\n      clearInterval(timerIntervalRef.current);\n      timerIntervalRef.current = null;\n    }\n    if (gameState && gameState.appPhase === 'playing') {\n      // Reset the timer when game starts\n      setElapsedTime(0);\n      setCurrentScore(0);\n      setLastScoreChange(0);\n      setLevel(1);\n\n      // Start a new timer that updates every 10ms for centisecond precision\n      timerIntervalRef.current = setInterval(() => {\n        setElapsedTime(prevTime => prevTime + 10);\n      }, 10);\n      console.log('Timer started');\n    }\n\n    // Cleanup on unmount or phase change\n    return () => {\n      if (timerIntervalRef.current) {\n        clearInterval(timerIntervalRef.current);\n        timerIntervalRef.current = null;\n      }\n    };\n  }, [gameState === null || gameState === void 0 ? void 0 : gameState.appPhase]);\n\n  // Update the player list for display and track current player's score\n  const updatePlayerList = useCallback(players => {\n    if (!players || typeof players !== 'object') return;\n\n    // Map player data to what we need\n    const playerEntries = Object.entries(players);\n\n    // Update current player score state for the score panel\n    if (socket) {\n      const currentPlayerEntry = playerEntries.find(([id]) => id === socket.id);\n      if (currentPlayerEntry) {\n        const [, currentPlayer] = currentPlayerEntry;\n\n        // Update score if changed\n        if (currentPlayer.score !== currentScore) {\n          const scoreChange = Math.max(0, currentPlayer.score - currentScore);\n          if (scoreChange > 0) {\n            setLastScoreChange(scoreChange);\n            // Reset the score change highlight after 1 second\n            setTimeout(() => setLastScoreChange(0), 1000);\n          }\n          setCurrentScore(currentPlayer.score);\n        }\n\n        // Update level if changed\n        if (currentPlayer.level && currentPlayer.level !== level) {\n          setLevel(currentPlayer.level);\n        }\n      }\n    }\n  }, [currentScore, level, socket]);\n\n  // Keyboard control handlers\n  useEffect(() => {\n    if (!socket || !gameState) return;\n    const handleKeyDown = e => {\n      // Only process key events if game is in progress\n      if (gameState.appPhase === 'playing') {\n        switch (e.code) {\n          case 'ArrowLeft':\n            // First send immediate move, then start DAS\n            socket.emit('playerAction', {\n              type: 'moveLeft'\n            });\n            socket.emit('playerAction', {\n              type: 'startDAS',\n              direction: 'left'\n            });\n            break;\n          case 'ArrowRight':\n            // First send immediate move, then start DAS\n            socket.emit('playerAction', {\n              type: 'moveRight'\n            });\n            socket.emit('playerAction', {\n              type: 'startDAS',\n              direction: 'right'\n            });\n            break;\n          case 'ArrowUp':\n          case 'KeyZ':\n            socket.emit('playerAction', {\n              type: 'rotate'\n            });\n            break;\n          case 'ArrowDown':\n            socket.emit('playerAction', {\n              type: 'softDrop'\n            });\n            break;\n          case 'Space':\n            socket.emit('playerAction', {\n              type: 'hardDrop'\n            });\n            break;\n          default:\n            break;\n        }\n      } else if (gameState.appPhase === 'homescreen') {\n        // Handle ready toggle on X key press\n        if (e.code === 'KeyX') {\n          const isCurrentlyReady = gameState.readyPlayers.includes(socket.id);\n          console.log('X key pressed, toggling ready state:', !isCurrentlyReady);\n          socket.emit('playerReady', !isCurrentlyReady);\n        }\n      }\n    };\n    const handleKeyUp = e => {\n      // Only process key events if game is in progress\n      if (gameState.appPhase === 'playing') {\n        switch (e.code) {\n          case 'ArrowLeft':\n          case 'ArrowRight':\n            socket.emit('playerAction', {\n              type: 'endDAS'\n            });\n            break;\n          case 'ArrowDown':\n            socket.emit('playerAction', {\n              type: 'endSoftDrop'\n            });\n            break;\n          default:\n            break;\n        }\n      }\n    };\n    window.addEventListener('keydown', handleKeyDown);\n    window.addEventListener('keyup', handleKeyUp);\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n      window.removeEventListener('keyup', handleKeyUp);\n    };\n  }, [socket, gameState]);\n\n  // Handle player ready state\n  const handlePlayerReady = useCallback(isReady => {\n    if (socket) {\n      socket.emit('playerReady', isReady);\n    }\n  }, [socket]);\n\n  // Handle game start\n  const handleStartGame = useCallback(() => {\n    if (socket) {\n      socket.emit('startGame');\n    }\n  }, [socket]);\n\n  // Handle game mode change\n  const handleSetGameMode = useCallback(mode => {\n    if (socket) {\n      socket.emit('setGameMode', mode);\n    }\n  }, [socket]);\n\n  // Handle game over timeout\n  const handleGameOverTimeout = useCallback(() => {\n    setIsGameOver(false);\n    setGameOverData(null);\n  }, []);\n\n  // Get the current background image URL\n  const getCurrentBackgroundUrl = () => {\n    if (!BACKGROUND_IMAGES.length) return null;\n    return `${process.env.PUBLIC_URL}/backgrounds/${BACKGROUND_IMAGES[currentBackgroundIndex]}`;\n  };\n\n  // Show loading or error screen\n  if (isConnecting) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Connecting to server...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 33\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 12\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Connection Error\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Please check that the server is running and the configuration is correct.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => window.location.reload(),\n        style: {\n          padding: '10px 20px',\n          backgroundColor: '#FF5733',\n          border: 'none',\n          borderRadius: '4px',\n          color: 'white',\n          cursor: 'pointer',\n          marginTop: '20px'\n        },\n        children: \"Retry Connection\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Show loading screen if no game state\n  if (!gameState) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Waiting for game state...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 33\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Home screen or game screen based on app phase\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    style: {\n      // Apply background image only during gameplay\n      ...(gameState.appPhase === 'playing' && {\n        backgroundImage: `url(${getCurrentBackgroundUrl()})`,\n        backgroundSize: 'cover',\n        backgroundPosition: 'center',\n        transition: 'background-image 1s ease-in-out',\n        minHeight: '100vh'\n      })\n    },\n    tabIndex: \"0\",\n    children: [gameState.appPhase === 'homescreen' && /*#__PURE__*/_jsxDEV(HomeScreen, {\n      players: gameState.players || {},\n      currentPlayerId: socket === null || socket === void 0 ? void 0 : socket.id,\n      readyPlayers: gameState.readyPlayers || [],\n      onReady: handlePlayerReady,\n      onStartGame: handleStartGame,\n      onSetGameMode: handleSetGameMode,\n      gameMode: gameState.gameMode,\n      gameInProgress: gameState.gameInProgress,\n      isRejoining: (_gameState$players = gameState.players) === null || _gameState$players === void 0 ? void 0 : (_gameState$players$so = _gameState$players[socket === null || socket === void 0 ? void 0 : socket.id]) === null || _gameState$players$so === void 0 ? void 0 : _gameState$players$so.isRejoining\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 352,\n      columnNumber: 9\n    }, this), gameState.appPhase === 'playing' && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        backgroundColor: 'rgba(0, 0, 0, 0.8)',\n        backdropFilter: 'blur(5px)',\n        padding: '20px',\n        borderRadius: '10px',\n        margin: '10px auto',\n        maxWidth: '900px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          justifyContent: 'space-between',\n          alignItems: 'center',\n          marginBottom: '15px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          style: {\n            margin: 0,\n            fontSize: '28px',\n            color: '#fff'\n          },\n          children: \"Tetristributed\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 380,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            fontSize: '14px',\n            backgroundColor: '#333',\n            padding: '5px 10px',\n            borderRadius: '4px'\n          },\n          children: [\"Player: \", (socket === null || socket === void 0 ? void 0 : socket.id) && socket.id.substring(0, 4)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 381,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 374,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          gap: '20px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center'\n          },\n          children: /*#__PURE__*/_jsxDEV(GameBoard, {\n            board: gameState.board || [],\n            players: gameState.players || {},\n            currentPlayerId: socket === null || socket === void 0 ? void 0 : socket.id\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 393,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 392,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            flexDirection: 'column',\n            minWidth: '220px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(ScorePanel, {\n            score: currentScore,\n            level: level,\n            lastScoreChange: lastScoreChange,\n            elapsedTime: elapsedTime\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 406,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              backgroundColor: 'rgba(40, 40, 40, 0.9)',\n              padding: '12px',\n              borderRadius: '8px',\n              marginTop: '15px'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              style: {\n                margin: '0 0 10px 0',\n                fontSize: '18px',\n                color: '#ccc'\n              },\n              children: \"Players\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 420,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n              style: {\n                listStyle: 'none',\n                padding: 0,\n                margin: 0\n              },\n              children: Object.entries(gameState.players || {}).map(([id, player]) => {\n                const isCurrentPlayer = id === (socket === null || socket === void 0 ? void 0 : socket.id);\n                const shortId = id.substring(0, 4);\n                return /*#__PURE__*/_jsxDEV(\"li\", {\n                  style: {\n                    margin: '6px 0',\n                    padding: '8px',\n                    backgroundColor: isCurrentPlayer ? '#444' : '#333',\n                    borderLeft: `4px solid ${player.color || '#ccc'}`,\n                    borderRadius: '4px',\n                    transition: 'background-color 0.3s'\n                  },\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    style: {\n                      display: 'flex',\n                      alignItems: 'center',\n                      justifyContent: 'space-between'\n                    },\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                        style: {\n                          fontWeight: isCurrentPlayer ? 'bold' : 'normal',\n                          color: isCurrentPlayer ? '#fff' : '#ccc'\n                        },\n                        children: [\"Player \", player.playerNumber || shortId]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 444,\n                        columnNumber: 29\n                      }, this), isCurrentPlayer && /*#__PURE__*/_jsxDEV(\"span\", {\n                        style: {\n                          fontSize: '12px',\n                          marginLeft: '5px',\n                          color: '#ffcc00'\n                        },\n                        children: \"(You)\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 450,\n                        columnNumber: 49\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 443,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      style: {\n                        backgroundColor: '#222',\n                        padding: '2px 6px',\n                        borderRadius: '3px',\n                        fontSize: '14px',\n                        fontWeight: 'bold'\n                      },\n                      children: player.score || 0\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 458,\n                      columnNumber: 27\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 438,\n                    columnNumber: 25\n                  }, this)\n                }, id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 427,\n                  columnNumber: 23\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 421,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                marginTop: '15px',\n                padding: '8px',\n                backgroundColor: '#222',\n                borderRadius: '4px',\n                textAlign: 'center'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  fontSize: '12px',\n                  color: '#aaa'\n                },\n                children: \"GAME MODE\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 480,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  fontSize: '16px',\n                  fontWeight: 'bold',\n                  marginTop: '4px'\n                },\n                children: gameState.gameMode || 'Classic'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 481,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 473,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 414,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              backgroundColor: 'rgba(40, 40, 40, 0.7)',\n              padding: '12px',\n              borderRadius: '8px',\n              marginTop: '15px',\n              fontSize: '12px',\n              color: '#aaa'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                marginBottom: '5px',\n                fontWeight: 'bold',\n                color: '#ccc'\n              },\n              children: \"Controls:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 496,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: \"\\u2190 \\u2192 : Move\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 497,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: \"\\u2193 : Soft Drop\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 498,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: \"\\u2191 / Z : Rotate\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 499,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: \"Space : Hard Drop\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 500,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 488,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 400,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 391,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 366,\n      columnNumber: 9\n    }, this), isGameOver && gameOverData && /*#__PURE__*/_jsxDEV(GameOverScreen, {\n      gameOverData: gameOverData,\n      onTimeout: handleGameOverTimeout\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 508,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 337,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"XTz2u92NAf5B0kD88NN/nwfnsp8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","useCallback","useRef","io","GameBoard","HomeScreen","GameOverScreen","ScorePanel","jsxDEV","_jsxDEV","BACKGROUND_IMAGES","BACKGROUND_CHANGE_INTERVAL","loadConfig","response","fetch","ok","Error","status","json","error","console","warn","client","serverAddress","App","_s","_gameState$players","_gameState$players$so","socket","setSocket","gameState","setGameState","isGameOver","setIsGameOver","gameOverData","setGameOverData","isConnecting","setIsConnecting","setError","currentBackgroundIndex","setCurrentBackgroundIndex","backgroundIntervalRef","elapsedTime","setElapsedTime","currentScore","setCurrentScore","lastScoreChange","setLastScoreChange","level","setLevel","timerIntervalRef","connectToServer","_config$client","config","log","newSocket","on","err","message","initialState","updatePlayerList","players","newState","prevState","gameInProgress","id","appPhase","data","current","clearInterval","Math","floor","random","length","setInterval","prevIndex","prevTime","playerEntries","Object","entries","currentPlayerEntry","find","currentPlayer","score","scoreChange","max","setTimeout","handleKeyDown","e","code","emit","type","direction","isCurrentlyReady","readyPlayers","includes","handleKeyUp","window","addEventListener","removeEventListener","handlePlayerReady","isReady","handleStartGame","handleSetGameMode","mode","handleGameOverTimeout","getCurrentBackgroundUrl","process","env","PUBLIC_URL","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","location","reload","style","padding","backgroundColor","border","borderRadius","color","cursor","marginTop","backgroundImage","backgroundSize","backgroundPosition","transition","minHeight","tabIndex","currentPlayerId","onReady","onStartGame","onSetGameMode","gameMode","isRejoining","backdropFilter","margin","maxWidth","display","justifyContent","alignItems","marginBottom","fontSize","substring","gap","flexDirection","board","minWidth","listStyle","map","player","isCurrentPlayer","shortId","borderLeft","fontWeight","playerNumber","marginLeft","textAlign","onTimeout","_c","$RefreshReg$"],"sources":["/Users/driesrooryck/Desktop/s25/distributed-systems/tetris/client/src/App.js"],"sourcesContent":["import React, { useEffect, useState, useCallback, useRef } from 'react';\nimport { io } from 'socket.io-client';\nimport GameBoard from './GameBoard';\nimport HomeScreen from './HomeScreen';\nimport GameOverScreen from './GameOverScreen';\nimport ScorePanel from './ScorePanel';\n\n// Background image configuration\nconst BACKGROUND_IMAGES = [\n  'deep-tetris-color.jpg',\n  'tetris-1920-x-1080-background-hyihqau5t3lalo4e.png',\n  'tetris-2560-x-1600-background-3bjbi7nyulqbller.jpg',\n];\nconst BACKGROUND_CHANGE_INTERVAL = 30000; // 30 seconds\n\n// Load config file to get server address\nconst loadConfig = async () => {\n  try {\n    const response = await fetch('/config.json');\n    if (!response.ok) {\n      throw new Error(`Failed to load config: ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.warn('Error loading config, using default server address:', error);\n    return { client: { serverAddress: 'http://localhost:3001' } };\n  }\n};\n\nfunction App() {\n  const [socket, setSocket] = useState(null);\n  const [gameState, setGameState] = useState(null);\n  const [isGameOver, setIsGameOver] = useState(false);\n  const [gameOverData, setGameOverData] = useState(null);\n  const [isConnecting, setIsConnecting] = useState(true);\n  const [error, setError] = useState(null);\n  \n  // Add state for background rotation\n  const [currentBackgroundIndex, setCurrentBackgroundIndex] = useState(0);\n  const backgroundIntervalRef = useRef(null);\n  \n  // Add state for timer and scoring\n  const [elapsedTime, setElapsedTime] = useState(0);\n  const [currentScore, setCurrentScore] = useState(0);\n  const [lastScoreChange, setLastScoreChange] = useState(0);\n  const [level, setLevel] = useState(1);\n  const timerIntervalRef = useRef(null);\n  \n  // Connect to socket on component mount\n  useEffect(() => {\n    const connectToServer = async () => {\n      try {\n        setIsConnecting(true);\n        \n        const config = await loadConfig();\n        const serverAddress = config.client?.serverAddress || 'http://localhost:3001';\n        \n        console.log(`Connecting to server at: ${serverAddress}`);\n        \n        const newSocket = io(serverAddress);\n        setSocket(newSocket);\n    \n        newSocket.on('connect', () => {\n          console.log('Connected to server');\n          setIsConnecting(false);\n        });\n    \n        newSocket.on('connect_error', (err) => {\n          console.error('Connection error:', err);\n          setError(`Connection error: ${err.message}`);\n          setIsConnecting(false);\n        });\n    \n        newSocket.on('init', (initialState) => {\n          console.log('Received initial game state:', initialState);\n          setGameState(initialState);\n          updatePlayerList(initialState.players || {});\n        });\n    \n        newSocket.on('gameState', (newState) => {\n          setGameState(prevState => {\n            if (prevState?.gameInProgress && !prevState.players[newSocket.id] &&\n                newState.appPhase === 'playing') {\n              return prevState;\n            }\n            if (newState) updatePlayerList(newState.players || {});\n            return newState;\n          });\n        });\n    \n        newSocket.on('gameOver', (data) => {\n          console.log('Game over with data:', data);\n          setIsGameOver(true);\n          setGameOverData(data);\n        });\n    \n      } catch (err) {\n        console.error('Error connecting to server:', err);\n        setError(`Error connecting to server: ${err.message}`);\n        setIsConnecting(false);\n      }\n    };\n    \n    connectToServer();    \n  }, []);\n  \n  // Background rotation effect - only active during gameplay\n  useEffect(() => {\n    // Clear any existing background rotation interval\n    if (backgroundIntervalRef.current) {\n      clearInterval(backgroundIntervalRef.current);\n      backgroundIntervalRef.current = null;\n    }\n    \n    // Start background rotation when game is playing\n    if (gameState && gameState.appPhase === 'playing') {\n      // Randomize starting background\n      setCurrentBackgroundIndex(Math.floor(Math.random() * BACKGROUND_IMAGES.length));\n      \n      // Set interval to rotate backgrounds\n      backgroundIntervalRef.current = setInterval(() => {\n        setCurrentBackgroundIndex(prevIndex => \n          (prevIndex + 1) % BACKGROUND_IMAGES.length\n        );\n      }, BACKGROUND_CHANGE_INTERVAL);\n    }\n    \n    // Cleanup on unmount or phase change\n    return () => {\n      if (backgroundIntervalRef.current) {\n        clearInterval(backgroundIntervalRef.current);\n        backgroundIntervalRef.current = null;\n      }\n    };\n  }, [gameState?.appPhase]);\n  \n  // Timer management based on game phase\n  useEffect(() => {\n    // Clean up the previous interval if it exists\n    if (timerIntervalRef.current) {\n      clearInterval(timerIntervalRef.current);\n      timerIntervalRef.current = null;\n    }\n    \n    if (gameState && gameState.appPhase === 'playing') {\n      // Reset the timer when game starts\n      setElapsedTime(0);\n      setCurrentScore(0);\n      setLastScoreChange(0);\n      setLevel(1);\n      \n      // Start a new timer that updates every 10ms for centisecond precision\n      timerIntervalRef.current = setInterval(() => {\n        setElapsedTime(prevTime => prevTime + 10);\n      }, 10);\n      \n      console.log('Timer started');\n    }\n    \n    // Cleanup on unmount or phase change\n    return () => {\n      if (timerIntervalRef.current) {\n        clearInterval(timerIntervalRef.current);\n        timerIntervalRef.current = null;\n      }\n    };\n  }, [gameState?.appPhase]); \n  \n  // Update the player list for display and track current player's score\n  const updatePlayerList = useCallback((players) => {\n    if (!players || typeof players !== 'object') return;\n    \n    // Map player data to what we need\n    const playerEntries = Object.entries(players);\n    \n    // Update current player score state for the score panel\n    if (socket) {\n      const currentPlayerEntry = playerEntries.find(([id]) => id === socket.id);\n      if (currentPlayerEntry) {\n        const [, currentPlayer] = currentPlayerEntry;\n        \n        // Update score if changed\n        if (currentPlayer.score !== currentScore) {\n          const scoreChange = Math.max(0, currentPlayer.score - currentScore);\n          if (scoreChange > 0) {\n            setLastScoreChange(scoreChange);\n            // Reset the score change highlight after 1 second\n            setTimeout(() => setLastScoreChange(0), 1000);\n          }\n          setCurrentScore(currentPlayer.score);\n        }\n        \n        // Update level if changed\n        if (currentPlayer.level && currentPlayer.level !== level) {\n          setLevel(currentPlayer.level);\n        }\n      }\n    }\n  }, [currentScore, level, socket]);\n  \n  // Keyboard control handlers\n  useEffect(() => {\n    if (!socket || !gameState) return;\n    \n    const handleKeyDown = (e) => {\n      // Only process key events if game is in progress\n      if (gameState.appPhase === 'playing') {\n        switch (e.code) {\n          case 'ArrowLeft':\n            // First send immediate move, then start DAS\n            socket.emit('playerAction', { type: 'moveLeft' });\n            socket.emit('playerAction', { type: 'startDAS', direction: 'left' });\n            break;\n          case 'ArrowRight':\n            // First send immediate move, then start DAS\n            socket.emit('playerAction', { type: 'moveRight' });\n            socket.emit('playerAction', { type: 'startDAS', direction: 'right' });\n            break;\n          case 'ArrowUp':\n          case 'KeyZ':\n            socket.emit('playerAction', { type: 'rotate' });\n            break;\n          case 'ArrowDown':\n            socket.emit('playerAction', { type: 'softDrop' });\n            break;\n          case 'Space':\n            socket.emit('playerAction', { type: 'hardDrop' });\n            break;\n          default:\n            break;\n        }\n      } else if (gameState.appPhase === 'homescreen') {\n        // Handle ready toggle on X key press\n        if (e.code === 'KeyX') {\n          const isCurrentlyReady = gameState.readyPlayers.includes(socket.id);\n          console.log('X key pressed, toggling ready state:', !isCurrentlyReady);\n          socket.emit('playerReady', !isCurrentlyReady);\n        }\n      }\n    };\n\n    const handleKeyUp = (e) => {\n      // Only process key events if game is in progress\n      if (gameState.appPhase === 'playing') {\n        switch (e.code) {\n          case 'ArrowLeft':\n          case 'ArrowRight':\n            socket.emit('playerAction', { type: 'endDAS' });\n            break;\n          case 'ArrowDown':\n            socket.emit('playerAction', { type: 'endSoftDrop' });\n            break;\n          default:\n            break;\n        }\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyDown);\n    window.addEventListener('keyup', handleKeyUp);\n\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n      window.removeEventListener('keyup', handleKeyUp);\n    };\n  }, [socket, gameState]);\n\n  // Handle player ready state\n  const handlePlayerReady = useCallback((isReady) => {\n    if (socket) {\n      socket.emit('playerReady', isReady);\n    }\n  }, [socket]);\n\n  // Handle game start\n  const handleStartGame = useCallback(() => {\n    if (socket) {\n      socket.emit('startGame');\n    }\n  }, [socket]);\n\n  // Handle game mode change\n  const handleSetGameMode = useCallback((mode) => {\n    if (socket) {\n      socket.emit('setGameMode', mode);\n    }\n  }, [socket]);\n\n  // Handle game over timeout\n  const handleGameOverTimeout = useCallback(() => {\n    setIsGameOver(false);\n    setGameOverData(null);\n  }, []);\n\n  // Get the current background image URL\n  const getCurrentBackgroundUrl = () => {\n    if (!BACKGROUND_IMAGES.length) return null;\n    return `${process.env.PUBLIC_URL}/backgrounds/${BACKGROUND_IMAGES[currentBackgroundIndex]}`;\n  };\n\n  // Show loading or error screen\n  if (isConnecting) {\n    return <div className=\"App\"><h1>Connecting to server...</h1></div>;\n  }\n  \n  if (error) {\n    return (\n      <div className=\"App\">\n        <h1>Connection Error</h1>\n        <p>{error}</p>\n        <p>Please check that the server is running and the configuration is correct.</p>\n        <button \n          onClick={() => window.location.reload()}\n          style={{\n            padding: '10px 20px',\n            backgroundColor: '#FF5733',\n            border: 'none',\n            borderRadius: '4px',\n            color: 'white',\n            cursor: 'pointer',\n            marginTop: '20px'\n          }}\n        >\n          Retry Connection\n        </button>\n      </div>\n    );\n  }\n\n  // Show loading screen if no game state\n  if (!gameState) {\n    return <div className=\"App\"><h1>Waiting for game state...</h1></div>;\n  }\n\n  // Home screen or game screen based on app phase\n  return (\n    <div \n      className=\"App\"\n      style={{ \n        // Apply background image only during gameplay\n        ...(gameState.appPhase === 'playing' && {\n          backgroundImage: `url(${getCurrentBackgroundUrl()})`,\n          backgroundSize: 'cover',\n          backgroundPosition: 'center',\n          transition: 'background-image 1s ease-in-out',\n          minHeight: '100vh'\n        })\n      }}\n      tabIndex=\"0\"\n    >\n      {gameState.appPhase === 'homescreen' && (\n        <HomeScreen\n          players={gameState.players || {}}\n          currentPlayerId={socket?.id}\n          readyPlayers={gameState.readyPlayers || []}\n          onReady={handlePlayerReady}\n          onStartGame={handleStartGame}\n          onSetGameMode={handleSetGameMode}\n          gameMode={gameState.gameMode}\n          gameInProgress={gameState.gameInProgress}\n          isRejoining={gameState.players?.[socket?.id]?.isRejoining}\n        />\n      )}\n      \n      {gameState.appPhase === 'playing' && (\n        <div style={{\n          backgroundColor: 'rgba(0, 0, 0, 0.8)',\n          backdropFilter: 'blur(5px)',\n          padding: '20px',\n          borderRadius: '10px',\n          margin: '10px auto',\n          maxWidth: '900px'\n        }}>\n          <div style={{ \n            display: 'flex', \n            justifyContent: 'space-between', \n            alignItems: 'center',\n            marginBottom: '15px' \n          }}>\n            <h1 style={{ margin: 0, fontSize: '28px', color: '#fff' }}>Tetristributed</h1>\n            <div style={{ \n              fontSize: '14px', \n              backgroundColor: '#333', \n              padding: '5px 10px', \n              borderRadius: '4px' \n            }}>\n              Player: {socket?.id && socket.id.substring(0, 4)}\n            </div>\n          </div>\n          \n          <div style={{ display: 'flex', gap: '20px' }}>\n            <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n              <GameBoard \n                board={gameState.board || []} \n                players={gameState.players || {}}\n                currentPlayerId={socket?.id}\n              />\n            </div>\n            \n            <div style={{ \n              display: 'flex',\n              flexDirection: 'column',\n              minWidth: '220px'\n            }}>\n              {/* Integrated Score Panel with Timer */}\n              <ScorePanel \n                score={currentScore}\n                level={level}\n                lastScoreChange={lastScoreChange}\n                elapsedTime={elapsedTime}\n              />\n              \n              {/* Players List */}\n              <div style={{ \n                backgroundColor: 'rgba(40, 40, 40, 0.9)',\n                padding: '12px',\n                borderRadius: '8px',\n                marginTop: '15px'\n              }}>\n                <h2 style={{ margin: '0 0 10px 0', fontSize: '18px', color: '#ccc' }}>Players</h2>\n                <ul style={{ listStyle: 'none', padding: 0, margin: 0 }}>\n                  {Object.entries(gameState.players || {}).map(([id, player]) => {\n                    const isCurrentPlayer = id === socket?.id;\n                    const shortId = id.substring(0, 4);\n                    \n                    return (\n                      <li \n                        key={id} \n                        style={{ \n                          margin: '6px 0',\n                          padding: '8px',\n                          backgroundColor: isCurrentPlayer ? '#444' : '#333',\n                          borderLeft: `4px solid ${player.color || '#ccc'}`,\n                          borderRadius: '4px',\n                          transition: 'background-color 0.3s'\n                        }}\n                      >\n                        <div style={{ \n                          display: 'flex', \n                          alignItems: 'center', \n                          justifyContent: 'space-between' \n                        }}>\n                          <div>\n                            <span style={{ \n                              fontWeight: isCurrentPlayer ? 'bold' : 'normal',\n                              color: isCurrentPlayer ? '#fff' : '#ccc'\n                            }}>\n                              Player {player.playerNumber || shortId}\n                            </span>\n                            {isCurrentPlayer && <span style={{ \n                              fontSize: '12px', \n                              marginLeft: '5px', \n                              color: '#ffcc00'\n                            }}>\n                              (You)\n                            </span>}\n                          </div>\n                          <div style={{ \n                            backgroundColor: '#222', \n                            padding: '2px 6px', \n                            borderRadius: '3px',\n                            fontSize: '14px',\n                            fontWeight: 'bold'\n                          }}>\n                            {player.score || 0}\n                          </div>\n                        </div>\n                      </li>\n                    );\n                  })}\n                </ul>\n                \n                <div style={{ \n                  marginTop: '15px', \n                  padding: '8px', \n                  backgroundColor: '#222', \n                  borderRadius: '4px',\n                  textAlign: 'center'\n                }}>\n                  <div style={{ fontSize: '12px', color: '#aaa' }}>GAME MODE</div>\n                  <div style={{ fontSize: '16px', fontWeight: 'bold', marginTop: '4px' }}>\n                    {gameState.gameMode || 'Classic'}\n                  </div>\n                </div>\n              </div>\n              \n              {/* Controls Help */}\n              <div style={{ \n                backgroundColor: 'rgba(40, 40, 40, 0.7)',\n                padding: '12px',\n                borderRadius: '8px',\n                marginTop: '15px',\n                fontSize: '12px',\n                color: '#aaa'\n              }}>\n                <div style={{ marginBottom: '5px', fontWeight: 'bold', color: '#ccc' }}>Controls:</div>\n                <div>← → : Move</div>\n                <div>↓ : Soft Drop</div>\n                <div>↑ / Z : Rotate</div>\n                <div>Space : Hard Drop</div>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n      \n      {isGameOver && gameOverData && (\n        <GameOverScreen \n          gameOverData={gameOverData} \n          onTimeout={handleGameOverTimeout} \n        />\n      )}\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}