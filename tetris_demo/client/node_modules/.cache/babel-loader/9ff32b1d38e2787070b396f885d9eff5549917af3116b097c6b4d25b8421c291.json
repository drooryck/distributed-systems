{"ast":null,"code":"// Session storage utilities for game persistence across server failovers\nconst GAME_SESSION_KEY='tetris_game_session';/**\n * Save the current game session data to localStorage\n * This allows clients to rejoin their game after server failover\n */export const saveGameSession=data=>{try{localStorage.setItem(GAME_SESSION_KEY,JSON.stringify(data));console.log('Game session saved:',data);}catch(error){console.error('Failed to save game session:',error);}};/**\n * Retrieve saved game session data from localStorage\n */export const getGameSession=()=>{try{const data=localStorage.getItem(GAME_SESSION_KEY);return data?JSON.parse(data):null;}catch(error){console.error('Failed to retrieve game session:',error);return null;}};/**\n * Clear the saved game session data\n */export const clearGameSession=()=>{try{localStorage.removeItem(GAME_SESSION_KEY);console.log('Game session cleared');}catch(error){console.error('Failed to clear game session:',error);}};","map":{"version":3,"names":["GAME_SESSION_KEY","saveGameSession","data","localStorage","setItem","JSON","stringify","console","log","error","getGameSession","getItem","parse","clearGameSession","removeItem"],"sources":["/Users/driesrooryck/Desktop/s25/new_try/distributed-systems/tetris/client/src/utils/sessionStorage.js"],"sourcesContent":["// Session storage utilities for game persistence across server failovers\n\nconst GAME_SESSION_KEY = 'tetris_game_session';\n\n/**\n * Save the current game session data to localStorage\n * This allows clients to rejoin their game after server failover\n */\nexport const saveGameSession = (data) => {\n  try {\n    localStorage.setItem(GAME_SESSION_KEY, JSON.stringify(data));\n    console.log('Game session saved:', data);\n  } catch (error) {\n    console.error('Failed to save game session:', error);\n  }\n};\n\n/**\n * Retrieve saved game session data from localStorage\n */\nexport const getGameSession = () => {\n  try {\n    const data = localStorage.getItem(GAME_SESSION_KEY);\n    return data ? JSON.parse(data) : null;\n  } catch (error) {\n    console.error('Failed to retrieve game session:', error);\n    return null;\n  }\n};\n\n/**\n * Clear the saved game session data\n */\nexport const clearGameSession = () => {\n  try {\n    localStorage.removeItem(GAME_SESSION_KEY);\n    console.log('Game session cleared');\n  } catch (error) {\n    console.error('Failed to clear game session:', error);\n  }\n};"],"mappings":"AAAA;AAEA,KAAM,CAAAA,gBAAgB,CAAG,qBAAqB,CAE9C;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAC,eAAe,CAAIC,IAAI,EAAK,CACvC,GAAI,CACFC,YAAY,CAACC,OAAO,CAACJ,gBAAgB,CAAEK,IAAI,CAACC,SAAS,CAACJ,IAAI,CAAC,CAAC,CAC5DK,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAEN,IAAI,CAAC,CAC1C,CAAE,MAAOO,KAAK,CAAE,CACdF,OAAO,CAACE,KAAK,CAAC,8BAA8B,CAAEA,KAAK,CAAC,CACtD,CACF,CAAC,CAED;AACA;AACA,GACA,MAAO,MAAM,CAAAC,cAAc,CAAGA,CAAA,GAAM,CAClC,GAAI,CACF,KAAM,CAAAR,IAAI,CAAGC,YAAY,CAACQ,OAAO,CAACX,gBAAgB,CAAC,CACnD,MAAO,CAAAE,IAAI,CAAGG,IAAI,CAACO,KAAK,CAACV,IAAI,CAAC,CAAG,IAAI,CACvC,CAAE,MAAOO,KAAK,CAAE,CACdF,OAAO,CAACE,KAAK,CAAC,kCAAkC,CAAEA,KAAK,CAAC,CACxD,MAAO,KAAI,CACb,CACF,CAAC,CAED;AACA;AACA,GACA,MAAO,MAAM,CAAAI,gBAAgB,CAAGA,CAAA,GAAM,CACpC,GAAI,CACFV,YAAY,CAACW,UAAU,CAACd,gBAAgB,CAAC,CACzCO,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC,CACrC,CAAE,MAAOC,KAAK,CAAE,CACdF,OAAO,CAACE,KAAK,CAAC,+BAA+B,CAAEA,KAAK,CAAC,CACvD,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}