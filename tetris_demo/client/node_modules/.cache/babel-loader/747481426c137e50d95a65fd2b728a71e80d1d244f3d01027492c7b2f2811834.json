{"ast":null,"code":"var _jsxFileName = \"/Users/driesrooryck/Desktop/s25/distributed-systems/tetris/client/src/App.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport io from 'socket.io-client';\nimport HomeScreen from './HomeScreen';\nimport GameOverScreen from './GameOverScreen';\n\n// Load config file to get server address\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst loadConfig = async () => {\n  try {\n    const response = await fetch('/config.json');\n    if (!response.ok) {\n      throw new Error(`Failed to load config: ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.warn('Error loading config, using default server address:', error);\n    return {\n      client: {\n        serverAddress: 'http://localhost:3001'\n      }\n    };\n  }\n};\n\n// Map of tetromino values to colors\nconst COLORS = {\n  1: 'cyan',\n  // I\n  2: 'blue',\n  // J\n  3: 'orange',\n  // L\n  4: 'yellow',\n  // O\n  5: 'green',\n  // S\n  6: 'purple',\n  // T\n  7: 'red' // Z\n};\n\n// ----- GAME BOARD COMPONENT -----\nconst GameBoard = ({\n  board,\n  players,\n  currentPlayerId\n}) => {\n  _s();\n  var _board$;\n  const canvasRef = useRef(null);\n  const cellSize = 30; // each cell is 30px\n\n  // Calculate canvas dimensions based on board size\n  const canvasWidth = board !== null && board !== void 0 && (_board$ = board[0]) !== null && _board$ !== void 0 && _board$.length ? board[0].length * cellSize : 300;\n  const canvasHeight = board !== null && board !== void 0 && board.length ? board.length * cellSize : 600;\n  useEffect(() => {\n    if (!board || !Array.isArray(board) || board.length === 0 || !Array.isArray(board[0])) {\n      console.warn(\"Invalid board structure:\", board);\n      return;\n    }\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext('2d');\n\n    // Clear the canvas\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    // Draw a dark background\n    ctx.fillStyle = '#111';\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n    // Draw the grid\n    ctx.strokeStyle = '#333';\n    ctx.lineWidth = 0.5;\n\n    // Draw grid lines\n    for (let r = 0; r <= board.length; r++) {\n      ctx.beginPath();\n      ctx.moveTo(0, r * cellSize);\n      ctx.lineTo(canvas.width, r * cellSize);\n      ctx.stroke();\n    }\n    for (let c = 0; c <= board[0].length; c++) {\n      ctx.beginPath();\n      ctx.moveTo(c * cellSize, 0);\n      ctx.lineTo(c * cellSize, canvas.height);\n      ctx.stroke();\n    }\n\n    // Draw placed pieces on the board\n    for (let r = 0; r < board.length; r++) {\n      if (!Array.isArray(board[r])) {\n        console.warn(`Invalid board row at index ${r}:`, board[r]);\n        continue;\n      }\n      for (let c = 0; c < board[r].length; c++) {\n        const cell = board[r][c];\n        if (cell !== 0) {\n          // If the cell has a complex structure (from server)\n          if (typeof cell === 'object' && cell !== null) {\n            const playerId = cell.playerId;\n            if (!playerId) {\n              ctx.fillStyle = 'gray';\n            } else {\n              const player = Object.values(players || {}).find(p => p && p.id === playerId.substring(0, 4));\n              ctx.fillStyle = player ? player.color : 'gray';\n            }\n          } else {\n            // If it's just a number (simple case)\n            ctx.fillStyle = COLORS[cell] || 'gray';\n          }\n          ctx.fillRect(c * cellSize, r * cellSize, cellSize, cellSize);\n          ctx.strokeStyle = '#FFF';\n          ctx.lineWidth = 1;\n          ctx.strokeRect(c * cellSize, r * cellSize, cellSize, cellSize);\n        }\n      }\n    }\n\n    // Draw line clear animation if active\n    if (Array.isArray(board.linesToClear) && board.linesToClear.length > 0) {\n      board.linesToClear.forEach(rowIndex => {\n        // Flash or highlight the rows being cleared\n        const flash = Math.floor(Date.now() / 100) % 2 === 0;\n        ctx.fillStyle = flash ? '#FFFFFF' : '#888888';\n        ctx.fillRect(0, rowIndex * cellSize, canvas.width, cellSize);\n      });\n    }\n\n    // Draw active tetromino for each player\n    if (players && typeof players === 'object') {\n      Object.values(players).forEach(player => {\n        if (!player || !player.currentPiece || !player.currentPiece.shape) return;\n        const {\n          x,\n          y,\n          currentPiece,\n          color\n        } = player;\n        const shape = currentPiece.shape;\n        if (!Array.isArray(shape)) {\n          console.warn(\"Invalid shape:\", shape);\n          return;\n        }\n        for (let r = 0; r < shape.length; r++) {\n          if (!Array.isArray(shape[r])) {\n            console.warn(`Invalid shape row at index ${r}:`, shape[r]);\n            continue;\n          }\n          for (let c = 0; c < shape[r].length; c++) {\n            if (shape[r][c] !== 0) {\n              const boardX = x + c;\n              const boardY = y + r;\n\n              // Skip if out of bounds or above the board\n              if (boardX < 0 || boardX >= board[0].length || boardY < 0 || boardY >= board.length) {\n                continue;\n              }\n              ctx.fillStyle = color || currentPiece.color || 'gray';\n              ctx.fillRect(boardX * cellSize, boardY * cellSize, cellSize, cellSize);\n              ctx.strokeStyle = '#FFF';\n              ctx.lineWidth = 1;\n              ctx.strokeRect(boardX * cellSize, boardY * cellSize, cellSize, cellSize);\n            }\n          }\n        }\n      });\n    }\n  }, [board, players, currentPlayerId]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      width: canvasWidth,\n      height: canvasHeight,\n      style: {\n        border: '2px solid #555'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 163,\n    columnNumber: 5\n  }, this);\n};\n\n// ----- PLAYER LIST COMPONENT -----\n_s(GameBoard, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n_c = GameBoard;\nconst PlayerList = ({\n  players,\n  currentPlayerId\n}) => {\n  const currentPlayerShortId = currentPlayerId === null || currentPlayerId === void 0 ? void 0 : currentPlayerId.substring(0, 4);\n  if (!players || typeof players !== 'object') {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"No players connected\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      marginBottom: '20px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      style: {\n        marginBottom: '10px'\n      },\n      children: \"Players\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        flexDirection: 'column',\n        gap: '10px',\n        maxWidth: '250px'\n      },\n      children: Object.values(players).map(player => {\n        if (!player) return null;\n        const isCurrentPlayer = player.id === currentPlayerShortId;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            alignItems: 'center',\n            padding: '8px',\n            backgroundColor: '#333',\n            borderRadius: '4px',\n            borderLeft: `4px solid ${player.color}`\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              width: '15px',\n              height: '15px',\n              backgroundColor: player.color,\n              marginRight: '10px',\n              borderRadius: '3px'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              flex: 1\n            },\n            children: [\"Player \", player.playerNumber, isCurrentPlayer && ' (You)']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              marginLeft: 'auto',\n              fontWeight: 'bold',\n              fontSize: '14px',\n              color: '#AAA'\n            },\n            children: player.score\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 15\n          }, this)]\n        }, player.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 183,\n    columnNumber: 5\n  }, this);\n};\n\n// ----- SCOREBOARD COMPONENT -----\n_c2 = PlayerList;\nconst ScoreBoard = ({\n  players\n}) => {\n  if (!players || typeof players !== 'object') {\n    return null;\n  }\n\n  // Sort players by score in descending order\n  const sortedPlayers = [...Object.values(players)].sort((a, b) => b.score - a.score);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      style: {\n        marginBottom: '10px'\n      },\n      children: \"Scores\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        backgroundColor: '#222',\n        padding: '10px',\n        borderRadius: '4px',\n        maxWidth: '250px'\n      },\n      children: sortedPlayers.map(player => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          justifyContent: 'space-between',\n          padding: '5px 0',\n          borderBottom: '1px solid #444'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            alignItems: 'center'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              width: '10px',\n              height: '10px',\n              backgroundColor: player.color,\n              marginRight: '8px',\n              borderRadius: '2px'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 269,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"Player \", player.playerNumber]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 278,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            fontWeight: 'bold'\n          },\n          children: player.score\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 13\n        }, this)]\n      }, player.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 249,\n    columnNumber: 5\n  }, this);\n};\n\n// ----- MAIN APP COMPONENT -----\n_c3 = ScoreBoard;\nfunction App() {\n  _s2();\n  var _gameState$players, _gameState$players$so;\n  const [socket, setSocket] = useState(null);\n  const [gameState, setGameState] = useState(null);\n  const [isGameOver, setIsGameOver] = useState(false);\n  const [gameOverData, setGameOverData] = useState(null);\n  const [isConnecting, setIsConnecting] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Connect to socket on component mount\n  useEffect(() => {\n    const connectToServer = async () => {\n      try {\n        var _config$client;\n        setIsConnecting(true);\n\n        // Load configuration\n        const config = await loadConfig();\n        const serverAddress = ((_config$client = config.client) === null || _config$client === void 0 ? void 0 : _config$client.serverAddress) || 'http://localhost:3001';\n        console.log(`Connecting to server at: ${serverAddress}`);\n\n        // Create new socket connection\n        const newSocket = io(serverAddress);\n        setSocket(newSocket);\n\n        // Socket event handlers\n        newSocket.on('connect', () => {\n          console.log('Connected to server');\n          setIsConnecting(false);\n        });\n        newSocket.on('connect_error', err => {\n          console.error('Connection error:', err);\n          setError(`Connection error: ${err.message}`);\n          setIsConnecting(false);\n        });\n        newSocket.on('init', initialState => {\n          console.log('Received initial game state:', initialState);\n          setGameState(initialState);\n        });\n        newSocket.on('gameState', newState => {\n          setGameState(prevState => {\n            // If we're showing gameInProgress screen, only update if returning to lobby\n            if (prevState !== null && prevState !== void 0 && prevState.gameInProgress && !prevState.players[newSocket.id] && newState.appPhase === 'playing') {\n              // Don't update state - keep showing \"Game in Progress\" screen\n              return prevState;\n            }\n\n            // Otherwise update normally\n            return newState;\n          });\n        });\n        newSocket.on('gameOver', data => {\n          console.log('Game over with data:', data);\n          setIsGameOver(true);\n          setGameOverData(data);\n        });\n\n        // Return cleanup function\n        return () => {\n          console.log('Disconnecting socket');\n          newSocket.disconnect();\n        };\n      } catch (err) {\n        console.error('Error connecting to server:', err);\n        setError(`Error connecting to server: ${err.message}`);\n        setIsConnecting(false);\n      }\n    };\n    connectToServer();\n  }, []);\n\n  // Keyboard control handlers\n  useEffect(() => {\n    if (!socket || !gameState) return;\n    const handleKeyDown = e => {\n      // Only process key events if game is in progress\n      if (gameState.appPhase === 'playing') {\n        switch (e.code) {\n          case 'ArrowLeft':\n            // First send immediate move, then start DAS\n            socket.emit('playerAction', {\n              type: 'moveLeft'\n            });\n            socket.emit('playerAction', {\n              type: 'startDAS',\n              direction: 'left'\n            });\n            break;\n          case 'ArrowRight':\n            // First send immediate move, then start DAS\n            socket.emit('playerAction', {\n              type: 'moveRight'\n            });\n            socket.emit('playerAction', {\n              type: 'startDAS',\n              direction: 'right'\n            });\n            break;\n          case 'ArrowUp':\n          case 'KeyZ':\n            socket.emit('playerAction', {\n              type: 'rotate'\n            });\n            break;\n          case 'ArrowDown':\n            socket.emit('playerAction', {\n              type: 'softDrop'\n            });\n            break;\n          case 'Space':\n            socket.emit('playerAction', {\n              type: 'hardDrop'\n            });\n            break;\n          default:\n            break;\n        }\n      }\n    };\n    const handleKeyUp = e => {\n      // Only process key events if game is in progress\n      if (gameState.appPhase === 'playing') {\n        switch (e.code) {\n          case 'ArrowLeft':\n          case 'ArrowRight':\n            socket.emit('playerAction', {\n              type: 'endDAS'\n            });\n            break;\n          case 'ArrowDown':\n            socket.emit('playerAction', {\n              type: 'endSoftDrop'\n            });\n            break;\n          default:\n            break;\n        }\n      }\n    };\n    window.addEventListener('keydown', handleKeyDown);\n    window.addEventListener('keyup', handleKeyUp);\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n      window.removeEventListener('keyup', handleKeyUp);\n    };\n  }, [socket, gameState]);\n\n  // Handle player ready state\n  const handlePlayerReady = useCallback(isReady => {\n    if (socket) {\n      socket.emit('playerReady', isReady);\n    }\n  }, [socket]);\n\n  // Handle game start\n  const handleStartGame = useCallback(() => {\n    if (socket) {\n      socket.emit('startGame');\n    }\n  }, [socket]);\n\n  // Handle game mode change\n  const handleSetGameMode = useCallback(mode => {\n    if (socket) {\n      socket.emit('setGameMode', mode);\n    }\n  }, [socket]);\n\n  // Handle game over timeout\n  const handleGameOverTimeout = useCallback(() => {\n    setIsGameOver(false);\n    setGameOverData(null);\n  }, []);\n\n  // Show loading or error screen\n  if (isConnecting) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Connecting to server...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 454,\n        columnNumber: 33\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 454,\n      columnNumber: 12\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Connection Error\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 460,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 461,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Please check that the server is running and the configuration is correct.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 462,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => window.location.reload(),\n        style: {\n          padding: '10px 20px',\n          backgroundColor: '#FF5733',\n          border: 'none',\n          borderRadius: '4px',\n          color: 'white',\n          cursor: 'pointer',\n          marginTop: '20px'\n        },\n        children: \"Retry Connection\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 463,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 459,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Show loading screen if no game state\n  if (!gameState) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Waiting for game state...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 483,\n        columnNumber: 33\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 483,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Home screen or game screen based on app phase\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [gameState.appPhase === 'homescreen' && /*#__PURE__*/_jsxDEV(HomeScreen, {\n      players: gameState.players || {},\n      currentPlayerId: socket === null || socket === void 0 ? void 0 : socket.id,\n      readyPlayers: gameState.readyPlayers || [],\n      onReady: handlePlayerReady,\n      onStartGame: handleStartGame,\n      onSetGameMode: handleSetGameMode,\n      gameMode: gameState.gameMode,\n      gameInProgress: gameState.gameInProgress,\n      isRejoining: (_gameState$players = gameState.players) === null || _gameState$players === void 0 ? void 0 : (_gameState$players$so = _gameState$players[socket === null || socket === void 0 ? void 0 : socket.id]) === null || _gameState$players$so === void 0 ? void 0 : _gameState$players$so.isRejoining\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 490,\n      columnNumber: 9\n    }, this), gameState.appPhase === 'playing' && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Tetristributed\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 505,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Connected as player: \", (socket === null || socket === void 0 ? void 0 : socket.id) && socket.id.substring(0, 4)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 506,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          gap: '20px',\n          marginBottom: '20px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(GameBoard, {\n          board: gameState.board || [],\n          players: gameState.players || {},\n          currentPlayerId: socket === null || socket === void 0 ? void 0 : socket.id\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 508,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(PlayerList, {\n            players: gameState.players || {},\n            currentPlayerId: socket === null || socket === void 0 ? void 0 : socket.id\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 514,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(ScoreBoard, {\n            players: gameState.players || {}\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 515,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 513,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 507,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), isGameOver && gameOverData && /*#__PURE__*/_jsxDEV(GameOverScreen, {\n      gameOverData: gameOverData,\n      onTimeout: handleGameOverTimeout\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 522,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 488,\n    columnNumber: 5\n  }, this);\n}\n_s2(App, \"VAdhjzfBCZdiEAt7J2ZjOB0kq2o=\");\n_c4 = App;\nexport default App;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"GameBoard\");\n$RefreshReg$(_c2, \"PlayerList\");\n$RefreshReg$(_c3, \"ScoreBoard\");\n$RefreshReg$(_c4, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","io","HomeScreen","GameOverScreen","jsxDEV","_jsxDEV","Fragment","_Fragment","loadConfig","response","fetch","ok","Error","status","json","error","console","warn","client","serverAddress","COLORS","GameBoard","board","players","currentPlayerId","_s","_board$","canvasRef","cellSize","canvasWidth","length","canvasHeight","Array","isArray","canvas","current","ctx","getContext","clearRect","width","height","fillStyle","fillRect","strokeStyle","lineWidth","r","beginPath","moveTo","lineTo","stroke","c","cell","playerId","player","Object","values","find","p","id","substring","color","strokeRect","linesToClear","forEach","rowIndex","flash","Math","floor","Date","now","currentPiece","shape","x","y","boardX","boardY","children","ref","style","border","fileName","_jsxFileName","lineNumber","columnNumber","_c","PlayerList","currentPlayerShortId","marginBottom","display","flexDirection","gap","maxWidth","map","isCurrentPlayer","alignItems","padding","backgroundColor","borderRadius","borderLeft","marginRight","flex","playerNumber","marginLeft","fontWeight","fontSize","score","_c2","ScoreBoard","sortedPlayers","sort","a","b","justifyContent","borderBottom","_c3","App","_s2","_gameState$players","_gameState$players$so","socket","setSocket","gameState","setGameState","isGameOver","setIsGameOver","gameOverData","setGameOverData","isConnecting","setIsConnecting","setError","connectToServer","_config$client","config","log","newSocket","on","err","message","initialState","newState","prevState","gameInProgress","appPhase","data","disconnect","handleKeyDown","e","code","emit","type","direction","handleKeyUp","window","addEventListener","removeEventListener","handlePlayerReady","isReady","handleStartGame","handleSetGameMode","mode","handleGameOverTimeout","className","onClick","location","reload","cursor","marginTop","readyPlayers","onReady","onStartGame","onSetGameMode","gameMode","isRejoining","onTimeout","_c4","$RefreshReg$"],"sources":["/Users/driesrooryck/Desktop/s25/distributed-systems/tetris/client/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport io from 'socket.io-client';\nimport HomeScreen from './HomeScreen';\nimport GameOverScreen from './GameOverScreen';\n\n// Load config file to get server address\nconst loadConfig = async () => {\n  try {\n    const response = await fetch('/config.json');\n    if (!response.ok) {\n      throw new Error(`Failed to load config: ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.warn('Error loading config, using default server address:', error);\n    return { client: { serverAddress: 'http://localhost:3001' } };\n  }\n};\n\n// Map of tetromino values to colors\nconst COLORS = {\n  1: 'cyan',    // I\n  2: 'blue',    // J\n  3: 'orange',  // L\n  4: 'yellow',  // O\n  5: 'green',   // S\n  6: 'purple',  // T\n  7: 'red'      // Z\n};\n\n// ----- GAME BOARD COMPONENT -----\nconst GameBoard = ({ board, players, currentPlayerId }) => {\n  const canvasRef = useRef(null);\n  const cellSize = 30; // each cell is 30px\n  \n  // Calculate canvas dimensions based on board size\n  const canvasWidth = board?.[0]?.length ? board[0].length * cellSize : 300;\n  const canvasHeight = board?.length ? board.length * cellSize : 600;\n\n  useEffect(() => {\n    if (!board || !Array.isArray(board) || board.length === 0 || !Array.isArray(board[0])) {\n      console.warn(\"Invalid board structure:\", board);\n      return;\n    }\n\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    \n    const ctx = canvas.getContext('2d');\n    \n    // Clear the canvas\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    \n    // Draw a dark background\n    ctx.fillStyle = '#111';\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n    \n    // Draw the grid\n    ctx.strokeStyle = '#333';\n    ctx.lineWidth = 0.5;\n    \n    // Draw grid lines\n    for (let r = 0; r <= board.length; r++) {\n      ctx.beginPath();\n      ctx.moveTo(0, r * cellSize);\n      ctx.lineTo(canvas.width, r * cellSize);\n      ctx.stroke();\n    }\n    \n    for (let c = 0; c <= board[0].length; c++) {\n      ctx.beginPath();\n      ctx.moveTo(c * cellSize, 0);\n      ctx.lineTo(c * cellSize, canvas.height);\n      ctx.stroke();\n    }\n    \n    // Draw placed pieces on the board\n    for (let r = 0; r < board.length; r++) {\n      if (!Array.isArray(board[r])) {\n        console.warn(`Invalid board row at index ${r}:`, board[r]);\n        continue;\n      }\n      \n      for (let c = 0; c < board[r].length; c++) {\n        const cell = board[r][c];\n        if (cell !== 0) {\n          // If the cell has a complex structure (from server)\n          if (typeof cell === 'object' && cell !== null) {\n            const playerId = cell.playerId;\n            if (!playerId) {\n              ctx.fillStyle = 'gray';\n            } else {\n              const player = Object.values(players || {}).find(p => p && p.id === playerId.substring(0, 4));\n              ctx.fillStyle = player ? player.color : 'gray';\n            }\n          } else {\n            // If it's just a number (simple case)\n            ctx.fillStyle = COLORS[cell] || 'gray';\n          }\n          \n          ctx.fillRect(c * cellSize, r * cellSize, cellSize, cellSize);\n          ctx.strokeStyle = '#FFF';\n          ctx.lineWidth = 1;\n          ctx.strokeRect(c * cellSize, r * cellSize, cellSize, cellSize);\n        }\n      }\n    }\n\n    // Draw line clear animation if active\n    if (Array.isArray(board.linesToClear) && board.linesToClear.length > 0) {\n      board.linesToClear.forEach(rowIndex => {\n        // Flash or highlight the rows being cleared\n        const flash = Math.floor(Date.now() / 100) % 2 === 0;\n        ctx.fillStyle = flash ? '#FFFFFF' : '#888888';\n        ctx.fillRect(0, rowIndex * cellSize, canvas.width, cellSize);\n      });\n    }\n      \n    // Draw active tetromino for each player\n    if (players && typeof players === 'object') {\n      Object.values(players).forEach(player => {\n        if (!player || !player.currentPiece || !player.currentPiece.shape) return;\n        \n        const { x, y, currentPiece, color } = player;\n        const shape = currentPiece.shape;\n        \n        if (!Array.isArray(shape)) {\n          console.warn(\"Invalid shape:\", shape);\n          return;\n        }\n        \n        for (let r = 0; r < shape.length; r++) {\n          if (!Array.isArray(shape[r])) {\n            console.warn(`Invalid shape row at index ${r}:`, shape[r]);\n            continue;\n          }\n          \n          for (let c = 0; c < shape[r].length; c++) {\n            if (shape[r][c] !== 0) {\n              const boardX = x + c;\n              const boardY = y + r;\n              \n              // Skip if out of bounds or above the board\n              if (boardX < 0 || boardX >= board[0].length || \n                  boardY < 0 || boardY >= board.length) {\n                continue;\n              }\n              \n              ctx.fillStyle = color || currentPiece.color || 'gray';\n              ctx.fillRect(boardX * cellSize, boardY * cellSize, cellSize, cellSize);\n              ctx.strokeStyle = '#FFF';\n              ctx.lineWidth = 1;\n              ctx.strokeRect(boardX * cellSize, boardY * cellSize, cellSize, cellSize);\n            }\n          }\n        }\n      });\n    }\n    \n  }, [board, players, currentPlayerId]);\n\n  return (\n    <div>\n      <canvas\n        ref={canvasRef}\n        width={canvasWidth}\n        height={canvasHeight}\n        style={{ border: '2px solid #555' }}\n      />\n    </div>\n  );\n};\n\n// ----- PLAYER LIST COMPONENT -----\nconst PlayerList = ({ players, currentPlayerId }) => {\n  const currentPlayerShortId = currentPlayerId?.substring(0, 4);\n  \n  if (!players || typeof players !== 'object') {\n    return <div>No players connected</div>;\n  }\n  \n  return (\n    <div style={{ marginBottom: '20px' }}>\n      <h3 style={{ marginBottom: '10px' }}>Players</h3>\n      \n      <div style={{ \n        display: 'flex', \n        flexDirection: 'column',\n        gap: '10px',\n        maxWidth: '250px'\n      }}>\n        {Object.values(players).map(player => {\n          if (!player) return null;\n          const isCurrentPlayer = player.id === currentPlayerShortId;\n          \n          return (\n            <div \n              key={player.id}\n              style={{ \n                display: 'flex',\n                alignItems: 'center',\n                padding: '8px',\n                backgroundColor: '#333',\n                borderRadius: '4px',\n                borderLeft: `4px solid ${player.color}`,\n              }}\n            >\n              <div \n                style={{ \n                  width: '15px', \n                  height: '15px', \n                  backgroundColor: player.color,\n                  marginRight: '10px',\n                  borderRadius: '3px'\n                }}\n              />\n              \n              <div style={{ flex: 1 }}>\n                Player {player.playerNumber}\n                {isCurrentPlayer && ' (You)'}\n              </div>\n              \n              <div style={{ \n                marginLeft: 'auto', \n                fontWeight: 'bold', \n                fontSize: '14px',\n                color: '#AAA'\n              }}>\n                {player.score}\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\n// ----- SCOREBOARD COMPONENT -----\nconst ScoreBoard = ({ players }) => {\n  if (!players || typeof players !== 'object') {\n    return null;\n  }\n  \n  // Sort players by score in descending order\n  const sortedPlayers = [...Object.values(players)].sort((a, b) => b.score - a.score);\n  \n  return (\n    <div>\n      <h3 style={{ marginBottom: '10px' }}>Scores</h3>\n      \n      <div style={{\n        backgroundColor: '#222',\n        padding: '10px',\n        borderRadius: '4px',\n        maxWidth: '250px'\n      }}>\n        {sortedPlayers.map(player => (\n          <div \n            key={player.id}\n            style={{\n              display: 'flex',\n              justifyContent: 'space-between',\n              padding: '5px 0',\n              borderBottom: '1px solid #444'\n            }}\n          >\n            <div style={{ display: 'flex', alignItems: 'center' }}>\n              <div \n                style={{ \n                  width: '10px', \n                  height: '10px', \n                  backgroundColor: player.color,\n                  marginRight: '8px',\n                  borderRadius: '2px'\n                }}\n              />\n              <span>Player {player.playerNumber}</span>\n            </div>\n            <div style={{ fontWeight: 'bold' }}>{player.score}</div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\n// ----- MAIN APP COMPONENT -----\nfunction App() {\n  const [socket, setSocket] = useState(null);\n  const [gameState, setGameState] = useState(null);\n  const [isGameOver, setIsGameOver] = useState(false);\n  const [gameOverData, setGameOverData] = useState(null);\n  const [isConnecting, setIsConnecting] = useState(true);\n  const [error, setError] = useState(null);\n  \n  // Connect to socket on component mount\n  useEffect(() => {\n    const connectToServer = async () => {\n      try {\n        setIsConnecting(true);\n        \n        // Load configuration\n        const config = await loadConfig();\n        const serverAddress = config.client?.serverAddress || 'http://localhost:3001';\n        \n        console.log(`Connecting to server at: ${serverAddress}`);\n        \n        // Create new socket connection\n        const newSocket = io(serverAddress);\n        setSocket(newSocket);\n        \n        // Socket event handlers\n        newSocket.on('connect', () => {\n          console.log('Connected to server');\n          setIsConnecting(false);\n        });\n        \n        newSocket.on('connect_error', (err) => {\n          console.error('Connection error:', err);\n          setError(`Connection error: ${err.message}`);\n          setIsConnecting(false);\n        });\n        \n        newSocket.on('init', (initialState) => {\n          console.log('Received initial game state:', initialState);\n          setGameState(initialState);\n        });\n        \n        newSocket.on('gameState', (newState) => {\n          setGameState(prevState => {\n            // If we're showing gameInProgress screen, only update if returning to lobby\n            if (prevState?.gameInProgress && !prevState.players[newSocket.id] && \n                newState.appPhase === 'playing') {\n              // Don't update state - keep showing \"Game in Progress\" screen\n              return prevState;\n            }\n            \n            // Otherwise update normally\n            return newState;\n          });\n        });\n        \n        newSocket.on('gameOver', (data) => {\n          console.log('Game over with data:', data);\n          setIsGameOver(true);\n          setGameOverData(data);\n        });\n        \n        // Return cleanup function\n        return () => {\n          console.log('Disconnecting socket');\n          newSocket.disconnect();\n        };\n      } catch (err) {\n        console.error('Error connecting to server:', err);\n        setError(`Error connecting to server: ${err.message}`);\n        setIsConnecting(false);\n      }\n    };\n    \n    connectToServer();\n  }, []);\n  \n  // Keyboard control handlers\n  useEffect(() => {\n    if (!socket || !gameState) return;\n    \n    const handleKeyDown = (e) => {\n      // Only process key events if game is in progress\n      if (gameState.appPhase === 'playing') {\n        switch (e.code) {\n          case 'ArrowLeft':\n            // First send immediate move, then start DAS\n            socket.emit('playerAction', { type: 'moveLeft' });\n            socket.emit('playerAction', { type: 'startDAS', direction: 'left' });\n            break;\n          case 'ArrowRight':\n            // First send immediate move, then start DAS\n            socket.emit('playerAction', { type: 'moveRight' });\n            socket.emit('playerAction', { type: 'startDAS', direction: 'right' });\n            break;\n          case 'ArrowUp':\n          case 'KeyZ':\n            socket.emit('playerAction', { type: 'rotate' });\n            break;\n          case 'ArrowDown':\n            socket.emit('playerAction', { type: 'softDrop' });\n            break;\n          case 'Space':\n            socket.emit('playerAction', { type: 'hardDrop' });\n            break;\n          default:\n            break;\n        }\n      }\n    };\n\n    const handleKeyUp = (e) => {\n      // Only process key events if game is in progress\n      if (gameState.appPhase === 'playing') {\n        switch (e.code) {\n          case 'ArrowLeft':\n          case 'ArrowRight':\n            socket.emit('playerAction', { type: 'endDAS' });\n            break;\n          case 'ArrowDown':\n            socket.emit('playerAction', { type: 'endSoftDrop' });\n            break;\n          default:\n            break;\n        }\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyDown);\n    window.addEventListener('keyup', handleKeyUp);\n\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n      window.removeEventListener('keyup', handleKeyUp);\n    };\n  }, [socket, gameState]);\n\n  // Handle player ready state\n  const handlePlayerReady = useCallback((isReady) => {\n    if (socket) {\n      socket.emit('playerReady', isReady);\n    }\n  }, [socket]);\n\n  // Handle game start\n  const handleStartGame = useCallback(() => {\n    if (socket) {\n      socket.emit('startGame');\n    }\n  }, [socket]);\n\n  // Handle game mode change\n  const handleSetGameMode = useCallback((mode) => {\n    if (socket) {\n      socket.emit('setGameMode', mode);\n    }\n  }, [socket]);\n\n  // Handle game over timeout\n  const handleGameOverTimeout = useCallback(() => {\n    setIsGameOver(false);\n    setGameOverData(null);\n  }, []);\n\n  // Show loading or error screen\n  if (isConnecting) {\n    return <div className=\"App\"><h1>Connecting to server...</h1></div>;\n  }\n  \n  if (error) {\n    return (\n      <div className=\"App\">\n        <h1>Connection Error</h1>\n        <p>{error}</p>\n        <p>Please check that the server is running and the configuration is correct.</p>\n        <button \n          onClick={() => window.location.reload()}\n          style={{\n            padding: '10px 20px',\n            backgroundColor: '#FF5733',\n            border: 'none',\n            borderRadius: '4px',\n            color: 'white',\n            cursor: 'pointer',\n            marginTop: '20px'\n          }}\n        >\n          Retry Connection\n        </button>\n      </div>\n    );\n  }\n\n  // Show loading screen if no game state\n  if (!gameState) {\n    return <div className=\"App\"><h1>Waiting for game state...</h1></div>;\n  }\n\n  // Home screen or game screen based on app phase\n  return (\n    <div className=\"App\">\n      {gameState.appPhase === 'homescreen' && (\n        <HomeScreen\n          players={gameState.players || {}}\n          currentPlayerId={socket?.id}\n          readyPlayers={gameState.readyPlayers || []}\n          onReady={handlePlayerReady}\n          onStartGame={handleStartGame}\n          onSetGameMode={handleSetGameMode}\n          gameMode={gameState.gameMode}\n          gameInProgress={gameState.gameInProgress}\n          isRejoining={gameState.players?.[socket?.id]?.isRejoining}\n        />\n      )}\n      \n      {gameState.appPhase === 'playing' && (\n        <>\n          <h1>Tetristributed</h1>\n          <p>Connected as player: {socket?.id && socket.id.substring(0, 4)}</p>\n          <div style={{ display: 'flex', gap: '20px', marginBottom: '20px' }}>\n            <GameBoard \n              board={gameState.board || []} \n              players={gameState.players || {}}\n              currentPlayerId={socket?.id}\n            />\n            <div>\n              <PlayerList players={gameState.players || {}} currentPlayerId={socket?.id} />\n              <ScoreBoard players={gameState.players || {}} />\n            </div>\n          </div>\n        </>\n      )}\n      \n      {isGameOver && gameOverData && (\n        <GameOverScreen \n          gameOverData={gameOverData} \n          onTimeout={handleGameOverTimeout} \n        />\n      )}\n    </div>\n  );\n}\n\nexport default App;"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,EAAEC,WAAW,QAAQ,OAAO;AACvE,OAAOC,EAAE,MAAM,kBAAkB;AACjC,OAAOC,UAAU,MAAM,cAAc;AACrC,OAAOC,cAAc,MAAM,kBAAkB;;AAE7C;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AACA,MAAMC,UAAU,GAAG,MAAAA,CAAA,KAAY;EAC7B,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,cAAc,CAAC;IAC5C,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,0BAA0BH,QAAQ,CAACI,MAAM,EAAE,CAAC;IAC9D;IACA,OAAO,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACC,IAAI,CAAC,qDAAqD,EAAEF,KAAK,CAAC;IAC1E,OAAO;MAAEG,MAAM,EAAE;QAAEC,aAAa,EAAE;MAAwB;IAAE,CAAC;EAC/D;AACF,CAAC;;AAED;AACA,MAAMC,MAAM,GAAG;EACb,CAAC,EAAE,MAAM;EAAK;EACd,CAAC,EAAE,MAAM;EAAK;EACd,CAAC,EAAE,QAAQ;EAAG;EACd,CAAC,EAAE,QAAQ;EAAG;EACd,CAAC,EAAE,OAAO;EAAI;EACd,CAAC,EAAE,QAAQ;EAAG;EACd,CAAC,EAAE,KAAK,CAAM;AAChB,CAAC;;AAED;AACA,MAAMC,SAAS,GAAGA,CAAC;EAAEC,KAAK;EAAEC,OAAO;EAAEC;AAAgB,CAAC,KAAK;EAAAC,EAAA;EAAA,IAAAC,OAAA;EACzD,MAAMC,SAAS,GAAG5B,MAAM,CAAC,IAAI,CAAC;EAC9B,MAAM6B,QAAQ,GAAG,EAAE,CAAC,CAAC;;EAErB;EACA,MAAMC,WAAW,GAAGP,KAAK,aAALA,KAAK,gBAAAI,OAAA,GAALJ,KAAK,CAAG,CAAC,CAAC,cAAAI,OAAA,eAAVA,OAAA,CAAYI,MAAM,GAAGR,KAAK,CAAC,CAAC,CAAC,CAACQ,MAAM,GAAGF,QAAQ,GAAG,GAAG;EACzE,MAAMG,YAAY,GAAGT,KAAK,aAALA,KAAK,eAALA,KAAK,CAAEQ,MAAM,GAAGR,KAAK,CAACQ,MAAM,GAAGF,QAAQ,GAAG,GAAG;EAElE9B,SAAS,CAAC,MAAM;IACd,IAAI,CAACwB,KAAK,IAAI,CAACU,KAAK,CAACC,OAAO,CAACX,KAAK,CAAC,IAAIA,KAAK,CAACQ,MAAM,KAAK,CAAC,IAAI,CAACE,KAAK,CAACC,OAAO,CAACX,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE;MACrFN,OAAO,CAACC,IAAI,CAAC,0BAA0B,EAAEK,KAAK,CAAC;MAC/C;IACF;IAEA,MAAMY,MAAM,GAAGP,SAAS,CAACQ,OAAO;IAChC,IAAI,CAACD,MAAM,EAAE;IAEb,MAAME,GAAG,GAAGF,MAAM,CAACG,UAAU,CAAC,IAAI,CAAC;;IAEnC;IACAD,GAAG,CAACE,SAAS,CAAC,CAAC,EAAE,CAAC,EAAEJ,MAAM,CAACK,KAAK,EAAEL,MAAM,CAACM,MAAM,CAAC;;IAEhD;IACAJ,GAAG,CAACK,SAAS,GAAG,MAAM;IACtBL,GAAG,CAACM,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAER,MAAM,CAACK,KAAK,EAAEL,MAAM,CAACM,MAAM,CAAC;;IAE/C;IACAJ,GAAG,CAACO,WAAW,GAAG,MAAM;IACxBP,GAAG,CAACQ,SAAS,GAAG,GAAG;;IAEnB;IACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIvB,KAAK,CAACQ,MAAM,EAAEe,CAAC,EAAE,EAAE;MACtCT,GAAG,CAACU,SAAS,CAAC,CAAC;MACfV,GAAG,CAACW,MAAM,CAAC,CAAC,EAAEF,CAAC,GAAGjB,QAAQ,CAAC;MAC3BQ,GAAG,CAACY,MAAM,CAACd,MAAM,CAACK,KAAK,EAAEM,CAAC,GAAGjB,QAAQ,CAAC;MACtCQ,GAAG,CAACa,MAAM,CAAC,CAAC;IACd;IAEA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAI5B,KAAK,CAAC,CAAC,CAAC,CAACQ,MAAM,EAAEoB,CAAC,EAAE,EAAE;MACzCd,GAAG,CAACU,SAAS,CAAC,CAAC;MACfV,GAAG,CAACW,MAAM,CAACG,CAAC,GAAGtB,QAAQ,EAAE,CAAC,CAAC;MAC3BQ,GAAG,CAACY,MAAM,CAACE,CAAC,GAAGtB,QAAQ,EAAEM,MAAM,CAACM,MAAM,CAAC;MACvCJ,GAAG,CAACa,MAAM,CAAC,CAAC;IACd;;IAEA;IACA,KAAK,IAAIJ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGvB,KAAK,CAACQ,MAAM,EAAEe,CAAC,EAAE,EAAE;MACrC,IAAI,CAACb,KAAK,CAACC,OAAO,CAACX,KAAK,CAACuB,CAAC,CAAC,CAAC,EAAE;QAC5B7B,OAAO,CAACC,IAAI,CAAC,8BAA8B4B,CAAC,GAAG,EAAEvB,KAAK,CAACuB,CAAC,CAAC,CAAC;QAC1D;MACF;MAEA,KAAK,IAAIK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG5B,KAAK,CAACuB,CAAC,CAAC,CAACf,MAAM,EAAEoB,CAAC,EAAE,EAAE;QACxC,MAAMC,IAAI,GAAG7B,KAAK,CAACuB,CAAC,CAAC,CAACK,CAAC,CAAC;QACxB,IAAIC,IAAI,KAAK,CAAC,EAAE;UACd;UACA,IAAI,OAAOA,IAAI,KAAK,QAAQ,IAAIA,IAAI,KAAK,IAAI,EAAE;YAC7C,MAAMC,QAAQ,GAAGD,IAAI,CAACC,QAAQ;YAC9B,IAAI,CAACA,QAAQ,EAAE;cACbhB,GAAG,CAACK,SAAS,GAAG,MAAM;YACxB,CAAC,MAAM;cACL,MAAMY,MAAM,GAAGC,MAAM,CAACC,MAAM,CAAChC,OAAO,IAAI,CAAC,CAAC,CAAC,CAACiC,IAAI,CAACC,CAAC,IAAIA,CAAC,IAAIA,CAAC,CAACC,EAAE,KAAKN,QAAQ,CAACO,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;cAC7FvB,GAAG,CAACK,SAAS,GAAGY,MAAM,GAAGA,MAAM,CAACO,KAAK,GAAG,MAAM;YAChD;UACF,CAAC,MAAM;YACL;YACAxB,GAAG,CAACK,SAAS,GAAGrB,MAAM,CAAC+B,IAAI,CAAC,IAAI,MAAM;UACxC;UAEAf,GAAG,CAACM,QAAQ,CAACQ,CAAC,GAAGtB,QAAQ,EAAEiB,CAAC,GAAGjB,QAAQ,EAAEA,QAAQ,EAAEA,QAAQ,CAAC;UAC5DQ,GAAG,CAACO,WAAW,GAAG,MAAM;UACxBP,GAAG,CAACQ,SAAS,GAAG,CAAC;UACjBR,GAAG,CAACyB,UAAU,CAACX,CAAC,GAAGtB,QAAQ,EAAEiB,CAAC,GAAGjB,QAAQ,EAAEA,QAAQ,EAAEA,QAAQ,CAAC;QAChE;MACF;IACF;;IAEA;IACA,IAAII,KAAK,CAACC,OAAO,CAACX,KAAK,CAACwC,YAAY,CAAC,IAAIxC,KAAK,CAACwC,YAAY,CAAChC,MAAM,GAAG,CAAC,EAAE;MACtER,KAAK,CAACwC,YAAY,CAACC,OAAO,CAACC,QAAQ,IAAI;QACrC;QACA,MAAMC,KAAK,GAAGC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC;QACpDjC,GAAG,CAACK,SAAS,GAAGwB,KAAK,GAAG,SAAS,GAAG,SAAS;QAC7C7B,GAAG,CAACM,QAAQ,CAAC,CAAC,EAAEsB,QAAQ,GAAGpC,QAAQ,EAAEM,MAAM,CAACK,KAAK,EAAEX,QAAQ,CAAC;MAC9D,CAAC,CAAC;IACJ;;IAEA;IACA,IAAIL,OAAO,IAAI,OAAOA,OAAO,KAAK,QAAQ,EAAE;MAC1C+B,MAAM,CAACC,MAAM,CAAChC,OAAO,CAAC,CAACwC,OAAO,CAACV,MAAM,IAAI;QACvC,IAAI,CAACA,MAAM,IAAI,CAACA,MAAM,CAACiB,YAAY,IAAI,CAACjB,MAAM,CAACiB,YAAY,CAACC,KAAK,EAAE;QAEnE,MAAM;UAAEC,CAAC;UAAEC,CAAC;UAAEH,YAAY;UAAEV;QAAM,CAAC,GAAGP,MAAM;QAC5C,MAAMkB,KAAK,GAAGD,YAAY,CAACC,KAAK;QAEhC,IAAI,CAACvC,KAAK,CAACC,OAAO,CAACsC,KAAK,CAAC,EAAE;UACzBvD,OAAO,CAACC,IAAI,CAAC,gBAAgB,EAAEsD,KAAK,CAAC;UACrC;QACF;QAEA,KAAK,IAAI1B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG0B,KAAK,CAACzC,MAAM,EAAEe,CAAC,EAAE,EAAE;UACrC,IAAI,CAACb,KAAK,CAACC,OAAO,CAACsC,KAAK,CAAC1B,CAAC,CAAC,CAAC,EAAE;YAC5B7B,OAAO,CAACC,IAAI,CAAC,8BAA8B4B,CAAC,GAAG,EAAE0B,KAAK,CAAC1B,CAAC,CAAC,CAAC;YAC1D;UACF;UAEA,KAAK,IAAIK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGqB,KAAK,CAAC1B,CAAC,CAAC,CAACf,MAAM,EAAEoB,CAAC,EAAE,EAAE;YACxC,IAAIqB,KAAK,CAAC1B,CAAC,CAAC,CAACK,CAAC,CAAC,KAAK,CAAC,EAAE;cACrB,MAAMwB,MAAM,GAAGF,CAAC,GAAGtB,CAAC;cACpB,MAAMyB,MAAM,GAAGF,CAAC,GAAG5B,CAAC;;cAEpB;cACA,IAAI6B,MAAM,GAAG,CAAC,IAAIA,MAAM,IAAIpD,KAAK,CAAC,CAAC,CAAC,CAACQ,MAAM,IACvC6C,MAAM,GAAG,CAAC,IAAIA,MAAM,IAAIrD,KAAK,CAACQ,MAAM,EAAE;gBACxC;cACF;cAEAM,GAAG,CAACK,SAAS,GAAGmB,KAAK,IAAIU,YAAY,CAACV,KAAK,IAAI,MAAM;cACrDxB,GAAG,CAACM,QAAQ,CAACgC,MAAM,GAAG9C,QAAQ,EAAE+C,MAAM,GAAG/C,QAAQ,EAAEA,QAAQ,EAAEA,QAAQ,CAAC;cACtEQ,GAAG,CAACO,WAAW,GAAG,MAAM;cACxBP,GAAG,CAACQ,SAAS,GAAG,CAAC;cACjBR,GAAG,CAACyB,UAAU,CAACa,MAAM,GAAG9C,QAAQ,EAAE+C,MAAM,GAAG/C,QAAQ,EAAEA,QAAQ,EAAEA,QAAQ,CAAC;YAC1E;UACF;QACF;MACF,CAAC,CAAC;IACJ;EAEF,CAAC,EAAE,CAACN,KAAK,EAAEC,OAAO,EAAEC,eAAe,CAAC,CAAC;EAErC,oBACEnB,OAAA;IAAAuE,QAAA,eACEvE,OAAA;MACEwE,GAAG,EAAElD,SAAU;MACfY,KAAK,EAAEV,WAAY;MACnBW,MAAM,EAAET,YAAa;MACrB+C,KAAK,EAAE;QAAEC,MAAM,EAAE;MAAiB;IAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACrC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;;AAED;AAAA1D,EAAA,CA9IMJ,SAAS;AAAA+D,EAAA,GAAT/D,SAAS;AA+If,MAAMgE,UAAU,GAAGA,CAAC;EAAE9D,OAAO;EAAEC;AAAgB,CAAC,KAAK;EACnD,MAAM8D,oBAAoB,GAAG9D,eAAe,aAAfA,eAAe,uBAAfA,eAAe,CAAEmC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC;EAE7D,IAAI,CAACpC,OAAO,IAAI,OAAOA,OAAO,KAAK,QAAQ,EAAE;IAC3C,oBAAOlB,OAAA;MAAAuE,QAAA,EAAK;IAAoB;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EACxC;EAEA,oBACE9E,OAAA;IAAKyE,KAAK,EAAE;MAAES,YAAY,EAAE;IAAO,CAAE;IAAAX,QAAA,gBACnCvE,OAAA;MAAIyE,KAAK,EAAE;QAAES,YAAY,EAAE;MAAO,CAAE;MAAAX,QAAA,EAAC;IAAO;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAEjD9E,OAAA;MAAKyE,KAAK,EAAE;QACVU,OAAO,EAAE,MAAM;QACfC,aAAa,EAAE,QAAQ;QACvBC,GAAG,EAAE,MAAM;QACXC,QAAQ,EAAE;MACZ,CAAE;MAAAf,QAAA,EACCtB,MAAM,CAACC,MAAM,CAAChC,OAAO,CAAC,CAACqE,GAAG,CAACvC,MAAM,IAAI;QACpC,IAAI,CAACA,MAAM,EAAE,OAAO,IAAI;QACxB,MAAMwC,eAAe,GAAGxC,MAAM,CAACK,EAAE,KAAK4B,oBAAoB;QAE1D,oBACEjF,OAAA;UAEEyE,KAAK,EAAE;YACLU,OAAO,EAAE,MAAM;YACfM,UAAU,EAAE,QAAQ;YACpBC,OAAO,EAAE,KAAK;YACdC,eAAe,EAAE,MAAM;YACvBC,YAAY,EAAE,KAAK;YACnBC,UAAU,EAAE,aAAa7C,MAAM,CAACO,KAAK;UACvC,CAAE;UAAAgB,QAAA,gBAEFvE,OAAA;YACEyE,KAAK,EAAE;cACLvC,KAAK,EAAE,MAAM;cACbC,MAAM,EAAE,MAAM;cACdwD,eAAe,EAAE3C,MAAM,CAACO,KAAK;cAC7BuC,WAAW,EAAE,MAAM;cACnBF,YAAY,EAAE;YAChB;UAAE;YAAAjB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACH,CAAC,eAEF9E,OAAA;YAAKyE,KAAK,EAAE;cAAEsB,IAAI,EAAE;YAAE,CAAE;YAAAxB,QAAA,GAAC,SAChB,EAACvB,MAAM,CAACgD,YAAY,EAC1BR,eAAe,IAAI,QAAQ;UAAA;YAAAb,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACzB,CAAC,eAEN9E,OAAA;YAAKyE,KAAK,EAAE;cACVwB,UAAU,EAAE,MAAM;cAClBC,UAAU,EAAE,MAAM;cAClBC,QAAQ,EAAE,MAAM;cAChB5C,KAAK,EAAE;YACT,CAAE;YAAAgB,QAAA,EACCvB,MAAM,CAACoD;UAAK;YAAAzB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACV,CAAC;QAAA,GAhCD9B,MAAM,CAACK,EAAE;UAAAsB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAiCX,CAAC;MAEV,CAAC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;;AAED;AAAAuB,GAAA,GAhEMrB,UAAU;AAiEhB,MAAMsB,UAAU,GAAGA,CAAC;EAAEpF;AAAQ,CAAC,KAAK;EAClC,IAAI,CAACA,OAAO,IAAI,OAAOA,OAAO,KAAK,QAAQ,EAAE;IAC3C,OAAO,IAAI;EACb;;EAEA;EACA,MAAMqF,aAAa,GAAG,CAAC,GAAGtD,MAAM,CAACC,MAAM,CAAChC,OAAO,CAAC,CAAC,CAACsF,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAACN,KAAK,GAAGK,CAAC,CAACL,KAAK,CAAC;EAEnF,oBACEpG,OAAA;IAAAuE,QAAA,gBACEvE,OAAA;MAAIyE,KAAK,EAAE;QAAES,YAAY,EAAE;MAAO,CAAE;MAAAX,QAAA,EAAC;IAAM;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAEhD9E,OAAA;MAAKyE,KAAK,EAAE;QACVkB,eAAe,EAAE,MAAM;QACvBD,OAAO,EAAE,MAAM;QACfE,YAAY,EAAE,KAAK;QACnBN,QAAQ,EAAE;MACZ,CAAE;MAAAf,QAAA,EACCgC,aAAa,CAAChB,GAAG,CAACvC,MAAM,iBACvBhD,OAAA;QAEEyE,KAAK,EAAE;UACLU,OAAO,EAAE,MAAM;UACfwB,cAAc,EAAE,eAAe;UAC/BjB,OAAO,EAAE,OAAO;UAChBkB,YAAY,EAAE;QAChB,CAAE;QAAArC,QAAA,gBAEFvE,OAAA;UAAKyE,KAAK,EAAE;YAAEU,OAAO,EAAE,MAAM;YAAEM,UAAU,EAAE;UAAS,CAAE;UAAAlB,QAAA,gBACpDvE,OAAA;YACEyE,KAAK,EAAE;cACLvC,KAAK,EAAE,MAAM;cACbC,MAAM,EAAE,MAAM;cACdwD,eAAe,EAAE3C,MAAM,CAACO,KAAK;cAC7BuC,WAAW,EAAE,KAAK;cAClBF,YAAY,EAAE;YAChB;UAAE;YAAAjB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACH,CAAC,eACF9E,OAAA;YAAAuE,QAAA,GAAM,SAAO,EAACvB,MAAM,CAACgD,YAAY;UAAA;YAAArB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACtC,CAAC,eACN9E,OAAA;UAAKyE,KAAK,EAAE;YAAEyB,UAAU,EAAE;UAAO,CAAE;UAAA3B,QAAA,EAAEvB,MAAM,CAACoD;QAAK;UAAAzB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC;MAAA,GApBnD9B,MAAM,CAACK,EAAE;QAAAsB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAqBX,CACN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;;AAED;AAAA+B,GAAA,GAhDMP,UAAU;AAiDhB,SAASQ,GAAGA,CAAA,EAAG;EAAAC,GAAA;EAAA,IAAAC,kBAAA,EAAAC,qBAAA;EACb,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAG3H,QAAQ,CAAC,IAAI,CAAC;EAC1C,MAAM,CAAC4H,SAAS,EAAEC,YAAY,CAAC,GAAG7H,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAAC8H,UAAU,EAAEC,aAAa,CAAC,GAAG/H,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAACgI,YAAY,EAAEC,eAAe,CAAC,GAAGjI,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAACkI,YAAY,EAAEC,eAAe,CAAC,GAAGnI,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAACkB,KAAK,EAAEkH,QAAQ,CAAC,GAAGpI,QAAQ,CAAC,IAAI,CAAC;;EAExC;EACAC,SAAS,CAAC,MAAM;IACd,MAAMoI,eAAe,GAAG,MAAAA,CAAA,KAAY;MAClC,IAAI;QAAA,IAAAC,cAAA;QACFH,eAAe,CAAC,IAAI,CAAC;;QAErB;QACA,MAAMI,MAAM,GAAG,MAAM5H,UAAU,CAAC,CAAC;QACjC,MAAMW,aAAa,GAAG,EAAAgH,cAAA,GAAAC,MAAM,CAAClH,MAAM,cAAAiH,cAAA,uBAAbA,cAAA,CAAehH,aAAa,KAAI,uBAAuB;QAE7EH,OAAO,CAACqH,GAAG,CAAC,4BAA4BlH,aAAa,EAAE,CAAC;;QAExD;QACA,MAAMmH,SAAS,GAAGrI,EAAE,CAACkB,aAAa,CAAC;QACnCqG,SAAS,CAACc,SAAS,CAAC;;QAEpB;QACAA,SAAS,CAACC,EAAE,CAAC,SAAS,EAAE,MAAM;UAC5BvH,OAAO,CAACqH,GAAG,CAAC,qBAAqB,CAAC;UAClCL,eAAe,CAAC,KAAK,CAAC;QACxB,CAAC,CAAC;QAEFM,SAAS,CAACC,EAAE,CAAC,eAAe,EAAGC,GAAG,IAAK;UACrCxH,OAAO,CAACD,KAAK,CAAC,mBAAmB,EAAEyH,GAAG,CAAC;UACvCP,QAAQ,CAAC,qBAAqBO,GAAG,CAACC,OAAO,EAAE,CAAC;UAC5CT,eAAe,CAAC,KAAK,CAAC;QACxB,CAAC,CAAC;QAEFM,SAAS,CAACC,EAAE,CAAC,MAAM,EAAGG,YAAY,IAAK;UACrC1H,OAAO,CAACqH,GAAG,CAAC,8BAA8B,EAAEK,YAAY,CAAC;UACzDhB,YAAY,CAACgB,YAAY,CAAC;QAC5B,CAAC,CAAC;QAEFJ,SAAS,CAACC,EAAE,CAAC,WAAW,EAAGI,QAAQ,IAAK;UACtCjB,YAAY,CAACkB,SAAS,IAAI;YACxB;YACA,IAAIA,SAAS,aAATA,SAAS,eAATA,SAAS,CAAEC,cAAc,IAAI,CAACD,SAAS,CAACrH,OAAO,CAAC+G,SAAS,CAAC5E,EAAE,CAAC,IAC7DiF,QAAQ,CAACG,QAAQ,KAAK,SAAS,EAAE;cACnC;cACA,OAAOF,SAAS;YAClB;;YAEA;YACA,OAAOD,QAAQ;UACjB,CAAC,CAAC;QACJ,CAAC,CAAC;QAEFL,SAAS,CAACC,EAAE,CAAC,UAAU,EAAGQ,IAAI,IAAK;UACjC/H,OAAO,CAACqH,GAAG,CAAC,sBAAsB,EAAEU,IAAI,CAAC;UACzCnB,aAAa,CAAC,IAAI,CAAC;UACnBE,eAAe,CAACiB,IAAI,CAAC;QACvB,CAAC,CAAC;;QAEF;QACA,OAAO,MAAM;UACX/H,OAAO,CAACqH,GAAG,CAAC,sBAAsB,CAAC;UACnCC,SAAS,CAACU,UAAU,CAAC,CAAC;QACxB,CAAC;MACH,CAAC,CAAC,OAAOR,GAAG,EAAE;QACZxH,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEyH,GAAG,CAAC;QACjDP,QAAQ,CAAC,+BAA+BO,GAAG,CAACC,OAAO,EAAE,CAAC;QACtDT,eAAe,CAAC,KAAK,CAAC;MACxB;IACF,CAAC;IAEDE,eAAe,CAAC,CAAC;EACnB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACApI,SAAS,CAAC,MAAM;IACd,IAAI,CAACyH,MAAM,IAAI,CAACE,SAAS,EAAE;IAE3B,MAAMwB,aAAa,GAAIC,CAAC,IAAK;MAC3B;MACA,IAAIzB,SAAS,CAACqB,QAAQ,KAAK,SAAS,EAAE;QACpC,QAAQI,CAAC,CAACC,IAAI;UACZ,KAAK,WAAW;YACd;YACA5B,MAAM,CAAC6B,IAAI,CAAC,cAAc,EAAE;cAAEC,IAAI,EAAE;YAAW,CAAC,CAAC;YACjD9B,MAAM,CAAC6B,IAAI,CAAC,cAAc,EAAE;cAAEC,IAAI,EAAE,UAAU;cAAEC,SAAS,EAAE;YAAO,CAAC,CAAC;YACpE;UACF,KAAK,YAAY;YACf;YACA/B,MAAM,CAAC6B,IAAI,CAAC,cAAc,EAAE;cAAEC,IAAI,EAAE;YAAY,CAAC,CAAC;YAClD9B,MAAM,CAAC6B,IAAI,CAAC,cAAc,EAAE;cAAEC,IAAI,EAAE,UAAU;cAAEC,SAAS,EAAE;YAAQ,CAAC,CAAC;YACrE;UACF,KAAK,SAAS;UACd,KAAK,MAAM;YACT/B,MAAM,CAAC6B,IAAI,CAAC,cAAc,EAAE;cAAEC,IAAI,EAAE;YAAS,CAAC,CAAC;YAC/C;UACF,KAAK,WAAW;YACd9B,MAAM,CAAC6B,IAAI,CAAC,cAAc,EAAE;cAAEC,IAAI,EAAE;YAAW,CAAC,CAAC;YACjD;UACF,KAAK,OAAO;YACV9B,MAAM,CAAC6B,IAAI,CAAC,cAAc,EAAE;cAAEC,IAAI,EAAE;YAAW,CAAC,CAAC;YACjD;UACF;YACE;QACJ;MACF;IACF,CAAC;IAED,MAAME,WAAW,GAAIL,CAAC,IAAK;MACzB;MACA,IAAIzB,SAAS,CAACqB,QAAQ,KAAK,SAAS,EAAE;QACpC,QAAQI,CAAC,CAACC,IAAI;UACZ,KAAK,WAAW;UAChB,KAAK,YAAY;YACf5B,MAAM,CAAC6B,IAAI,CAAC,cAAc,EAAE;cAAEC,IAAI,EAAE;YAAS,CAAC,CAAC;YAC/C;UACF,KAAK,WAAW;YACd9B,MAAM,CAAC6B,IAAI,CAAC,cAAc,EAAE;cAAEC,IAAI,EAAE;YAAc,CAAC,CAAC;YACpD;UACF;YACE;QACJ;MACF;IACF,CAAC;IAEDG,MAAM,CAACC,gBAAgB,CAAC,SAAS,EAAER,aAAa,CAAC;IACjDO,MAAM,CAACC,gBAAgB,CAAC,OAAO,EAAEF,WAAW,CAAC;IAE7C,OAAO,MAAM;MACXC,MAAM,CAACE,mBAAmB,CAAC,SAAS,EAAET,aAAa,CAAC;MACpDO,MAAM,CAACE,mBAAmB,CAAC,OAAO,EAAEH,WAAW,CAAC;IAClD,CAAC;EACH,CAAC,EAAE,CAAChC,MAAM,EAAEE,SAAS,CAAC,CAAC;;EAEvB;EACA,MAAMkC,iBAAiB,GAAG3J,WAAW,CAAE4J,OAAO,IAAK;IACjD,IAAIrC,MAAM,EAAE;MACVA,MAAM,CAAC6B,IAAI,CAAC,aAAa,EAAEQ,OAAO,CAAC;IACrC;EACF,CAAC,EAAE,CAACrC,MAAM,CAAC,CAAC;;EAEZ;EACA,MAAMsC,eAAe,GAAG7J,WAAW,CAAC,MAAM;IACxC,IAAIuH,MAAM,EAAE;MACVA,MAAM,CAAC6B,IAAI,CAAC,WAAW,CAAC;IAC1B;EACF,CAAC,EAAE,CAAC7B,MAAM,CAAC,CAAC;;EAEZ;EACA,MAAMuC,iBAAiB,GAAG9J,WAAW,CAAE+J,IAAI,IAAK;IAC9C,IAAIxC,MAAM,EAAE;MACVA,MAAM,CAAC6B,IAAI,CAAC,aAAa,EAAEW,IAAI,CAAC;IAClC;EACF,CAAC,EAAE,CAACxC,MAAM,CAAC,CAAC;;EAEZ;EACA,MAAMyC,qBAAqB,GAAGhK,WAAW,CAAC,MAAM;IAC9C4H,aAAa,CAAC,KAAK,CAAC;IACpBE,eAAe,CAAC,IAAI,CAAC;EACvB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,IAAIC,YAAY,EAAE;IAChB,oBAAO1H,OAAA;MAAK4J,SAAS,EAAC,KAAK;MAAArF,QAAA,eAACvE,OAAA;QAAAuE,QAAA,EAAI;MAAuB;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EACpE;EAEA,IAAIpE,KAAK,EAAE;IACT,oBACEV,OAAA;MAAK4J,SAAS,EAAC,KAAK;MAAArF,QAAA,gBAClBvE,OAAA;QAAAuE,QAAA,EAAI;MAAgB;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACzB9E,OAAA;QAAAuE,QAAA,EAAI7D;MAAK;QAAAiE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACd9E,OAAA;QAAAuE,QAAA,EAAG;MAAyE;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eAChF9E,OAAA;QACE6J,OAAO,EAAEA,CAAA,KAAMV,MAAM,CAACW,QAAQ,CAACC,MAAM,CAAC,CAAE;QACxCtF,KAAK,EAAE;UACLiB,OAAO,EAAE,WAAW;UACpBC,eAAe,EAAE,SAAS;UAC1BjB,MAAM,EAAE,MAAM;UACdkB,YAAY,EAAE,KAAK;UACnBrC,KAAK,EAAE,OAAO;UACdyG,MAAM,EAAE,SAAS;UACjBC,SAAS,EAAE;QACb,CAAE;QAAA1F,QAAA,EACH;MAED;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC;EAEV;;EAEA;EACA,IAAI,CAACsC,SAAS,EAAE;IACd,oBAAOpH,OAAA;MAAK4J,SAAS,EAAC,KAAK;MAAArF,QAAA,eAACvE,OAAA;QAAAuE,QAAA,EAAI;MAAyB;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EACtE;;EAEA;EACA,oBACE9E,OAAA;IAAK4J,SAAS,EAAC,KAAK;IAAArF,QAAA,GACjB6C,SAAS,CAACqB,QAAQ,KAAK,YAAY,iBAClCzI,OAAA,CAACH,UAAU;MACTqB,OAAO,EAAEkG,SAAS,CAAClG,OAAO,IAAI,CAAC,CAAE;MACjCC,eAAe,EAAE+F,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAE7D,EAAG;MAC5B6G,YAAY,EAAE9C,SAAS,CAAC8C,YAAY,IAAI,EAAG;MAC3CC,OAAO,EAAEb,iBAAkB;MAC3Bc,WAAW,EAAEZ,eAAgB;MAC7Ba,aAAa,EAAEZ,iBAAkB;MACjCa,QAAQ,EAAElD,SAAS,CAACkD,QAAS;MAC7B9B,cAAc,EAAEpB,SAAS,CAACoB,cAAe;MACzC+B,WAAW,GAAAvD,kBAAA,GAAEI,SAAS,CAAClG,OAAO,cAAA8F,kBAAA,wBAAAC,qBAAA,GAAjBD,kBAAA,CAAoBE,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAE7D,EAAE,CAAC,cAAA4D,qBAAA,uBAA/BA,qBAAA,CAAiCsD;IAAY;MAAA5F,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC3D,CACF,EAEAsC,SAAS,CAACqB,QAAQ,KAAK,SAAS,iBAC/BzI,OAAA,CAAAE,SAAA;MAAAqE,QAAA,gBACEvE,OAAA;QAAAuE,QAAA,EAAI;MAAc;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACvB9E,OAAA;QAAAuE,QAAA,GAAG,uBAAqB,EAAC,CAAA2C,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAE7D,EAAE,KAAI6D,MAAM,CAAC7D,EAAE,CAACC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC;MAAA;QAAAqB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACrE9E,OAAA;QAAKyE,KAAK,EAAE;UAAEU,OAAO,EAAE,MAAM;UAAEE,GAAG,EAAE,MAAM;UAAEH,YAAY,EAAE;QAAO,CAAE;QAAAX,QAAA,gBACjEvE,OAAA,CAACgB,SAAS;UACRC,KAAK,EAAEmG,SAAS,CAACnG,KAAK,IAAI,EAAG;UAC7BC,OAAO,EAAEkG,SAAS,CAAClG,OAAO,IAAI,CAAC,CAAE;UACjCC,eAAe,EAAE+F,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAE7D;QAAG;UAAAsB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC7B,CAAC,eACF9E,OAAA;UAAAuE,QAAA,gBACEvE,OAAA,CAACgF,UAAU;YAAC9D,OAAO,EAAEkG,SAAS,CAAClG,OAAO,IAAI,CAAC,CAAE;YAACC,eAAe,EAAE+F,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAE7D;UAAG;YAAAsB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eAC7E9E,OAAA,CAACsG,UAAU;YAACpF,OAAO,EAAEkG,SAAS,CAAClG,OAAO,IAAI,CAAC;UAAE;YAAAyD,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC7C,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC;IAAA,eACN,CACH,EAEAwC,UAAU,IAAIE,YAAY,iBACzBxH,OAAA,CAACF,cAAc;MACb0H,YAAY,EAAEA,YAAa;MAC3BgD,SAAS,EAAEb;IAAsB;MAAAhF,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClC,CACF;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAACiC,GAAA,CAhPQD,GAAG;AAAA2D,GAAA,GAAH3D,GAAG;AAkPZ,eAAeA,GAAG;AAAC,IAAA/B,EAAA,EAAAsB,GAAA,EAAAQ,GAAA,EAAA4D,GAAA;AAAAC,YAAA,CAAA3F,EAAA;AAAA2F,YAAA,CAAArE,GAAA;AAAAqE,YAAA,CAAA7D,GAAA;AAAA6D,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}