{"ast":null,"code":"var _jsxFileName = \"/Users/driesrooryck/Desktop/s25/distributed-systems/tetris/client/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useCallback, useRef } from 'react';\nimport { io } from 'socket.io-client';\nimport BoardStage from './BoardStage';\nimport NewHomeScreen from './NewHomeScreen';\nimport ReadyScreen from './ReadyScreen';\nimport GameOverScreen from './GameOverScreen';\nimport ScorePanel from './ScorePanel';\nimport './App.css';\n\n// Background image configuration\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BACKGROUND_IMAGES = ['deep-tetris-color.jpg', 'tetris-1920-x-1080-background-hyihqau5t3lalo4e.png', 'tetris-2560-x-1600-background-3bjbi7nyulqbller.jpg'];\nconst BACKGROUND_CHANGE_INTERVAL = 30000; // 30 seconds\n\n// Load config file to get server address\nconst loadConfig = async () => {\n  try {\n    const response = await fetch('/config.json');\n    if (!response.ok) {\n      throw new Error(`Failed to load config: ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.warn('Error loading config, using default server address:', error);\n    return {\n      client: {\n        serverAddress: 'http://localhost:3001'\n      }\n    };\n  }\n};\n\n// Add debug logger at the top of the file\nconst DEBUG = {\n  events: true,\n  state: true,\n  render: true\n};\nfunction debugLog(type, message, data) {\n  if (DEBUG[type]) {\n    console.log(`[DEBUG:${type}] ${message}`, data !== undefined ? data : '');\n  }\n}\nfunction App() {\n  _s();\n  var _gameState$players, _gameState$players$so;\n  const [socket, setSocket] = useState(null);\n  const [gameState, setGameState] = useState(null);\n  const [isGameOver, setIsGameOver] = useState(false);\n  const [gameOverData, setGameOverData] = useState(null);\n  const [isConnecting, setIsConnecting] = useState(true);\n  const [error, setError] = useState(null);\n  const [socketError, setSocketError] = useState(null);\n\n  // Hard‐drop guard so holding space won't repeat\n  const hardDropActiveRef = useRef(false);\n\n  // Add state for background rotation\n  const [currentBackgroundIndex, setCurrentBackgroundIndex] = useState(0);\n  const backgroundIntervalRef = useRef(null);\n\n  // Add state for timer and scoring\n  const [elapsedTime, setElapsedTime] = useState(0);\n  const [currentScore, setCurrentScore] = useState(0);\n  const [lastScoreChange, setLastScoreChange] = useState(0);\n  const [level, setLevel] = useState(1);\n  const timerIntervalRef = useRef(null);\n\n  // Connect to socket on component mount\n  useEffect(() => {\n    const connectToServer = async () => {\n      try {\n        var _config$client;\n        setIsConnecting(true);\n\n        // Load configuration\n        const config = await loadConfig();\n        const serverAddress = ((_config$client = config.client) === null || _config$client === void 0 ? void 0 : _config$client.serverAddress) || 'http://localhost:3001';\n        debugLog('events', 'Connecting to server:', serverAddress);\n\n        // Create new socket connection\n        const newSocket = io(serverAddress);\n        setSocket(newSocket);\n\n        // Socket event handlers\n        newSocket.on('connect', () => {\n          debugLog('events', 'Socket connected with ID:', newSocket.id);\n          setIsConnecting(false);\n          setSocketError(null);\n        });\n        newSocket.on('connect_error', err => {\n          debugLog('events', 'Connection error:', err.message);\n          setSocketError(`Connection error: ${err.message}`);\n          setIsConnecting(false);\n        });\n\n        // Handle initial state\n        newSocket.on('init', initialState => {\n          debugLog('events', 'Received init event with state:', initialState);\n          setGameState(initialState);\n        });\n\n        // Handle room creation\n        newSocket.on('roomCreated', data => {\n          debugLog('events', 'Received roomCreated event with data:', data);\n          debugLog('state', 'Setting appPhase to readyscreen from:', gameState === null || gameState === void 0 ? void 0 : gameState.appPhase);\n          setGameState(prevState => {\n            const newState = {\n              ...data.gameState,\n              appPhase: 'readyscreen'\n            };\n            debugLog('state', 'New gameState after roomCreated:', newState);\n            return newState;\n          });\n          setError(null);\n        });\n\n        // Handle room join\n        newSocket.on('roomJoined', data => {\n          debugLog('events', 'Received roomJoined event with data:', data);\n          debugLog('state', 'Setting appPhase to readyscreen from:', gameState === null || gameState === void 0 ? void 0 : gameState.appPhase);\n          setGameState(prevState => {\n            const newState = {\n              ...data.gameState,\n              appPhase: 'readyscreen'\n            };\n            debugLog('state', 'New gameState after roomJoined:', newState);\n            return newState;\n          });\n          setError(null);\n        });\n\n        // Handle leaving room\n        newSocket.on('roomLeft', data => {\n          debugLog('events', 'Received roomLeft event with data:', data);\n          debugLog('state', 'Setting appPhase to homescreen from:', gameState === null || gameState === void 0 ? void 0 : gameState.appPhase);\n          setGameState(prevState => {\n            const newState = {\n              appPhase: 'homescreen',\n              socketId: newSocket.id\n            };\n            debugLog('state', 'New gameState after roomLeft:', newState);\n            return newState;\n          });\n        });\n\n        // Handle errors\n        newSocket.on('error', ({\n          message\n        }) => {\n          debugLog('events', 'Received server error:', message);\n          setError(message);\n        });\n\n        // Handle game state updates\n        newSocket.on('gameState', newState => {\n          debugLog('events', 'Received gameState update with appPhase:', newState === null || newState === void 0 ? void 0 : newState.appPhase);\n          setGameState(prevState => {\n            // If we're showing a readyscreen from a room we just created or joined,\n            // don't let a gameState event with homescreen override it\n            if ((prevState === null || prevState === void 0 ? void 0 : prevState.appPhase) === 'readyscreen' && (newState === null || newState === void 0 ? void 0 : newState.appPhase) === 'homescreen') {\n              debugLog('state', 'Ignoring homescreen gameState while in readyscreen');\n              return prevState;\n            }\n            debugLog('state', 'Updating gameState from:', prevState === null || prevState === void 0 ? void 0 : prevState.appPhase, 'to:', newState === null || newState === void 0 ? void 0 : newState.appPhase);\n            return newState;\n          });\n        });\n\n        // Handle game over\n        newSocket.on('gameOver', data => {\n          console.log('Game over with data:', data);\n          setIsGameOver(true);\n          setGameOverData(data);\n        });\n\n        // Handle player joined notification\n        newSocket.on('playerJoined', ({\n          playerId,\n          player,\n          gameState\n        }) => {\n          console.log(`Player joined: ${playerId}`);\n          setGameState(gameState);\n        });\n\n        // Handle player left notification\n        newSocket.on('playerLeft', ({\n          playerId,\n          gameState\n        }) => {\n          console.log(`Player left: ${playerId}`);\n          setGameState(gameState);\n        });\n\n        // Handle host assignment (when previous host leaves)\n        newSocket.on('hostAssigned', ({\n          gameState\n        }) => {\n          console.log('You are now the host');\n          setGameState(gameState);\n        });\n\n        // Return cleanup function\n        return () => {\n          console.log('Disconnecting socket');\n          newSocket.disconnect();\n        };\n      } catch (err) {\n        console.error('Error connecting to server:', err);\n        setSocketError(`Error connecting to server: ${err.message}`);\n        setIsConnecting(false);\n      }\n    };\n    connectToServer();\n  }, []);\n\n  // Background rotation effect - only active during gameplay\n  useEffect(() => {\n    // Clear any existing background rotation interval\n    if (backgroundIntervalRef.current) {\n      clearInterval(backgroundIntervalRef.current);\n      backgroundIntervalRef.current = null;\n    }\n\n    // Start background rotation when game is playing\n    if (gameState && gameState.appPhase === 'playing') {\n      // Randomize starting background\n      setCurrentBackgroundIndex(Math.floor(Math.random() * BACKGROUND_IMAGES.length));\n\n      // Set interval to rotate backgrounds\n      backgroundIntervalRef.current = setInterval(() => {\n        setCurrentBackgroundIndex(prevIndex => (prevIndex + 1) % BACKGROUND_IMAGES.length);\n      }, BACKGROUND_CHANGE_INTERVAL);\n    }\n\n    // Cleanup on unmount or phase change\n    return () => {\n      if (backgroundIntervalRef.current) {\n        clearInterval(backgroundIntervalRef.current);\n        backgroundIntervalRef.current = null;\n      }\n    };\n  }, [gameState === null || gameState === void 0 ? void 0 : gameState.appPhase]);\n\n  // Timer management based on game phase\n  useEffect(() => {\n    // Clean up the previous interval if it exists\n    if (timerIntervalRef.current) {\n      clearInterval(timerIntervalRef.current);\n      timerIntervalRef.current = null;\n    }\n    if (gameState && gameState.appPhase === 'playing') {\n      // Reset the timer when game starts\n      setElapsedTime(0);\n      setCurrentScore(0);\n      setLastScoreChange(0);\n      setLevel(1);\n\n      // Start a new timer that updates every 10ms for centisecond precision\n      timerIntervalRef.current = setInterval(() => {\n        setElapsedTime(prevTime => prevTime + 10);\n      }, 10);\n      console.log('Timer started');\n    }\n\n    // Cleanup on unmount or phase change\n    return () => {\n      if (timerIntervalRef.current) {\n        clearInterval(timerIntervalRef.current);\n        timerIntervalRef.current = null;\n      }\n    };\n  }, [gameState === null || gameState === void 0 ? void 0 : gameState.appPhase]);\n\n  // Update the player list for display and track current player's score\n  const updatePlayerList = useCallback(players => {\n    if (!players || typeof players !== 'object') return;\n\n    // Map player data to what we need\n    const playerEntries = Object.entries(players);\n\n    // Update current player score state for the score panel\n    if (socket) {\n      const currentPlayerEntry = playerEntries.find(([id]) => id === socket.id);\n      if (currentPlayerEntry) {\n        const [, currentPlayer] = currentPlayerEntry;\n\n        // Update score if changed\n        if (currentPlayer.score !== currentScore) {\n          const scoreChange = Math.max(0, currentPlayer.score - currentScore);\n          if (scoreChange > 0) {\n            setLastScoreChange(scoreChange);\n            // Reset the score change highlight after 1 second\n            setTimeout(() => setLastScoreChange(0), 1000);\n          }\n          setCurrentScore(currentPlayer.score);\n        }\n\n        // Update level if changed\n        if (currentPlayer.level && currentPlayer.level !== level) {\n          setLevel(currentPlayer.level);\n        }\n      }\n    }\n  }, [currentScore, level, socket]);\n\n  // Keyboard control handlers\n  useEffect(() => {\n    if (!socket || !gameState) return;\n    const handleKeyDown = e => {\n      // Only process key events if game is in progress\n      if (gameState.appPhase === 'playing') {\n        switch (e.code) {\n          case 'ArrowLeft':\n            // First send immediate move, then start DAS\n            socket.emit('playerAction', {\n              type: 'moveLeft'\n            });\n            socket.emit('playerAction', {\n              type: 'startDAS',\n              direction: 'left'\n            });\n            break;\n          case 'ArrowRight':\n            // First send immediate move, then start DAS\n            socket.emit('playerAction', {\n              type: 'moveRight'\n            });\n            socket.emit('playerAction', {\n              type: 'startDAS',\n              direction: 'right'\n            });\n            break;\n          case 'ArrowUp':\n          case 'KeyZ':\n            socket.emit('playerAction', {\n              type: 'rotate'\n            });\n            break;\n          case 'ArrowDown':\n            socket.emit('playerAction', {\n              type: 'softDrop'\n            });\n            break;\n          case 'Space':\n            // guard against auto‑repeat when holding space\n            if (!hardDropActiveRef.current) {\n              socket.emit('playerAction', {\n                type: 'hardDrop'\n              });\n              hardDropActiveRef.current = true;\n            }\n            break;\n          default:\n            break;\n        }\n      } else if (gameState.appPhase === 'readyscreen') {\n        // Handle ready toggle on X key press\n        if (e.code === 'KeyX') {\n          const isCurrentlyReady = gameState.readyPlayers && gameState.readyPlayers.includes(socket.id);\n          console.log('X key pressed, toggling ready state:', !isCurrentlyReady);\n          socket.emit('playerReady', !isCurrentlyReady);\n        }\n      }\n    };\n    const handleKeyUp = e => {\n      // Only process key events if game is in progress\n      if (gameState.appPhase === 'playing') {\n        switch (e.code) {\n          case 'ArrowLeft':\n          case 'ArrowRight':\n            socket.emit('playerAction', {\n              type: 'endDAS'\n            });\n            break;\n          case 'ArrowDown':\n            socket.emit('playerAction', {\n              type: 'endSoftDrop'\n            });\n            break;\n          case 'Space':\n            // re‑enable hardDrop once key is released\n            hardDropActiveRef.current = false;\n            break;\n          default:\n            break;\n        }\n      }\n    };\n    window.addEventListener('keydown', handleKeyDown);\n    window.addEventListener('keyup', handleKeyUp);\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n      window.removeEventListener('keyup', handleKeyUp);\n    };\n  }, [socket, gameState]);\n\n  // Room management handlers\n  const handleCreateRoom = useCallback(playerName => {\n    if (socket) {\n      socket.emit('createRoom', playerName);\n    }\n  }, [socket]);\n  const handleJoinRoom = useCallback((roomCode, playerName) => {\n    if (socket) {\n      socket.emit('joinRoom', {\n        roomCode,\n        playerName\n      });\n    }\n  }, [socket]);\n  const handleLeaveRoom = useCallback(() => {\n    if (socket) {\n      socket.emit('leaveRoom');\n    }\n  }, [socket]);\n\n  // Handle player ready state\n  const handlePlayerReady = useCallback(isReady => {\n    if (socket) {\n      socket.emit('playerReady', isReady);\n    }\n  }, [socket]);\n\n  // Handle game start\n  const handleStartGame = useCallback(() => {\n    if (socket) {\n      socket.emit('startGame');\n    }\n  }, [socket]);\n\n  // Handle game mode change\n  const handleSetGameMode = useCallback(mode => {\n    if (socket) {\n      socket.emit('setGameMode', mode);\n    }\n  }, [socket]);\n\n  // Handle game over timeout\n  const handleGameOverTimeout = useCallback(() => {\n    setIsGameOver(false);\n    setGameOverData(null);\n  }, []);\n\n  // Get the current background image URL\n  const getCurrentBackgroundUrl = () => {\n    if (!BACKGROUND_IMAGES.length) return null;\n    return `${process.env.PUBLIC_URL}/backgrounds/${BACKGROUND_IMAGES[currentBackgroundIndex]}`;\n  };\n\n  // Show loading or error screen\n  if (isConnecting) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Connecting to server...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 432,\n        columnNumber: 33\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 432,\n      columnNumber: 12\n    }, this);\n  }\n  if (socketError) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Connection Error\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 438,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: socketError\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 439,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Please check that the server is running and the configuration is correct.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 440,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => window.location.reload(),\n        style: {\n          padding: '10px 20px',\n          backgroundColor: '#FF5733',\n          border: 'none',\n          borderRadius: '4px',\n          color: 'white',\n          cursor: 'pointer',\n          marginTop: '20px'\n        },\n        children: \"Retry Connection\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 441,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 437,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Show loading screen if no game state\n  if (!gameState) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Waiting for game state...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 461,\n        columnNumber: 33\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 461,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Render appropriate screen based on app phase\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    style: {\n      ...(gameState.appPhase === 'playing' && {\n        backgroundImage: `url(${getCurrentBackgroundUrl()})`,\n        backgroundSize: 'cover',\n        backgroundPosition: 'center',\n        transition: 'background-image 1s ease-in-out',\n        minHeight: '100vh'\n      })\n    },\n    tabIndex: \"0\",\n    children: [gameState.appPhase === 'homescreen' && /*#__PURE__*/_jsxDEV(NewHomeScreen, {\n      onCreateRoom: handleCreateRoom,\n      onJoinRoom: handleJoinRoom,\n      error: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 480,\n      columnNumber: 9\n    }, this), gameState.appPhase === 'readyscreen' && /*#__PURE__*/_jsxDEV(ReadyScreen, {\n      roomCode: gameState.roomCode,\n      players: gameState.players || {},\n      currentPlayerId: socket === null || socket === void 0 ? void 0 : socket.id,\n      readyPlayers: gameState.readyPlayers || [],\n      onReady: handlePlayerReady,\n      onStartGame: handleStartGame,\n      onLeaveRoom: handleLeaveRoom,\n      onSetGameMode: handleSetGameMode,\n      gameMode: gameState.gameMode,\n      gameInProgress: gameState.gameInProgress,\n      isHost: (_gameState$players = gameState.players) === null || _gameState$players === void 0 ? void 0 : (_gameState$players$so = _gameState$players[socket === null || socket === void 0 ? void 0 : socket.id]) === null || _gameState$players$so === void 0 ? void 0 : _gameState$players$so.isHost\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 488,\n      columnNumber: 9\n    }, this), gameState.appPhase === 'playing' && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        backgroundColor: 'rgba(0, 0, 0, 0.8)',\n        backdropFilter: 'blur(5px)',\n        padding: '20px',\n        borderRadius: '10px',\n        margin: '10px auto',\n        maxWidth: '900px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          justifyContent: 'space-between',\n          alignItems: 'center',\n          marginBottom: '15px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          style: {\n            margin: 0,\n            fontSize: '28px',\n            color: '#fff'\n          },\n          children: \"Tetristributed\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 518,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            alignItems: 'center',\n            gap: '15px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              fontSize: '14px',\n              backgroundColor: '#444',\n              padding: '5px 10px',\n              borderRadius: '4px',\n              display: 'flex',\n              flexDirection: 'column',\n              alignItems: 'center'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                fontSize: '10px',\n                color: '#aaa'\n              },\n              children: \"ROOM\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 533,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                fontWeight: 'bold'\n              },\n              children: gameState.roomCode\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 534,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 524,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              fontSize: '14px',\n              backgroundColor: '#333',\n              padding: '5px 10px',\n              borderRadius: '4px'\n            },\n            children: [\"Player: \", (socket === null || socket === void 0 ? void 0 : socket.id) && socket.id.substring(0, 4)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 536,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 519,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 512,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          gap: '20px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center'\n          },\n          children: /*#__PURE__*/_jsxDEV(BoardStage, {\n            board: gameState.board || [],\n            players: gameState.players || {},\n            linesToClear: gameState.linesToClear || []\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 549,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 548,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            flexDirection: 'column',\n            minWidth: '220px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(ScorePanel, {\n            score: currentScore,\n            level: level,\n            lastScoreChange: lastScoreChange,\n            elapsedTime: elapsedTime\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 562,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              backgroundColor: 'rgba(40, 40, 40, 0.9)',\n              padding: '12px',\n              borderRadius: '8px',\n              marginTop: '15px'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              style: {\n                margin: '0 0 10px 0',\n                fontSize: '18px',\n                color: '#ccc'\n              },\n              children: \"Players\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 576,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n              style: {\n                listStyle: 'none',\n                padding: 0,\n                margin: 0\n              },\n              children: Object.entries(gameState.players || {}).map(([id, player]) => {\n                const isCurrentPlayer = id === (socket === null || socket === void 0 ? void 0 : socket.id);\n                const shortId = id.substring(0, 4);\n                return /*#__PURE__*/_jsxDEV(\"li\", {\n                  style: {\n                    margin: '6px 0',\n                    padding: '8px',\n                    backgroundColor: isCurrentPlayer ? '#444' : '#333',\n                    borderLeft: `4px solid ${player.color || '#ccc'}`,\n                    borderRadius: '4px',\n                    transition: 'background-color 0.3s'\n                  },\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    style: {\n                      display: 'flex',\n                      alignItems: 'center',\n                      justifyContent: 'space-between'\n                    },\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                        style: {\n                          fontWeight: isCurrentPlayer ? 'bold' : 'normal',\n                          color: isCurrentPlayer ? '#fff' : '#ccc'\n                        },\n                        children: player.name || `Player ${player.playerNumber || shortId}`\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 600,\n                        columnNumber: 29\n                      }, this), isCurrentPlayer && /*#__PURE__*/_jsxDEV(\"span\", {\n                        style: {\n                          fontSize: '12px',\n                          marginLeft: '5px',\n                          color: '#ffcc00'\n                        },\n                        children: \"(You)\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 606,\n                        columnNumber: 49\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 599,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      style: {\n                        backgroundColor: '#222',\n                        padding: '2px 6px',\n                        borderRadius: '3px',\n                        fontSize: '14px',\n                        fontWeight: 'bold'\n                      },\n                      children: player.score || 0\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 614,\n                      columnNumber: 27\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 594,\n                    columnNumber: 25\n                  }, this)\n                }, id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 583,\n                  columnNumber: 23\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 577,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                marginTop: '15px',\n                padding: '8px',\n                backgroundColor: '#222',\n                borderRadius: '4px',\n                textAlign: 'center'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  fontSize: '12px',\n                  color: '#aaa'\n                },\n                children: \"GAME MODE\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 636,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  fontSize: '16px',\n                  fontWeight: 'bold',\n                  marginTop: '4px'\n                },\n                children: gameState.gameMode || 'Classic'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 637,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 629,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 570,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              backgroundColor: 'rgba(40, 40, 40, 0.7)',\n              padding: '12px',\n              borderRadius: '8px',\n              marginTop: '15px',\n              fontSize: '12px',\n              color: '#aaa'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                marginBottom: '5px',\n                fontWeight: 'bold',\n                color: '#ccc'\n              },\n              children: \"Controls:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 652,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: \"\\u2190 \\u2192 : Move\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 653,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: \"\\u2193 : Soft Drop\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 654,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: \"\\u2191 / Z : Rotate\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 655,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: \"Space : Hard Drop\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 656,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 644,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 556,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 547,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 504,\n      columnNumber: 9\n    }, this), isGameOver && gameOverData && /*#__PURE__*/_jsxDEV(GameOverScreen, {\n      gameOverData: gameOverData,\n      currentPlayerId: socket === null || socket === void 0 ? void 0 : socket.id,\n      onTimeout: handleGameOverTimeout\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 664,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 466,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"kfdKZoKGcBqFXAJzBbhhpZdEbXE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","useCallback","useRef","io","BoardStage","NewHomeScreen","ReadyScreen","GameOverScreen","ScorePanel","jsxDEV","_jsxDEV","BACKGROUND_IMAGES","BACKGROUND_CHANGE_INTERVAL","loadConfig","response","fetch","ok","Error","status","json","error","console","warn","client","serverAddress","DEBUG","events","state","render","debugLog","type","message","data","log","undefined","App","_s","_gameState$players","_gameState$players$so","socket","setSocket","gameState","setGameState","isGameOver","setIsGameOver","gameOverData","setGameOverData","isConnecting","setIsConnecting","setError","socketError","setSocketError","hardDropActiveRef","currentBackgroundIndex","setCurrentBackgroundIndex","backgroundIntervalRef","elapsedTime","setElapsedTime","currentScore","setCurrentScore","lastScoreChange","setLastScoreChange","level","setLevel","timerIntervalRef","connectToServer","_config$client","config","newSocket","on","id","err","initialState","appPhase","prevState","newState","socketId","playerId","player","disconnect","current","clearInterval","Math","floor","random","length","setInterval","prevIndex","prevTime","updatePlayerList","players","playerEntries","Object","entries","currentPlayerEntry","find","currentPlayer","score","scoreChange","max","setTimeout","handleKeyDown","e","code","emit","direction","isCurrentlyReady","readyPlayers","includes","handleKeyUp","window","addEventListener","removeEventListener","handleCreateRoom","playerName","handleJoinRoom","roomCode","handleLeaveRoom","handlePlayerReady","isReady","handleStartGame","handleSetGameMode","mode","handleGameOverTimeout","getCurrentBackgroundUrl","process","env","PUBLIC_URL","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","location","reload","style","padding","backgroundColor","border","borderRadius","color","cursor","marginTop","backgroundImage","backgroundSize","backgroundPosition","transition","minHeight","tabIndex","onCreateRoom","onJoinRoom","currentPlayerId","onReady","onStartGame","onLeaveRoom","onSetGameMode","gameMode","gameInProgress","isHost","backdropFilter","margin","maxWidth","display","justifyContent","alignItems","marginBottom","fontSize","gap","flexDirection","fontWeight","substring","board","linesToClear","minWidth","listStyle","map","isCurrentPlayer","shortId","borderLeft","name","playerNumber","marginLeft","textAlign","onTimeout","_c","$RefreshReg$"],"sources":["/Users/driesrooryck/Desktop/s25/distributed-systems/tetris/client/src/App.js"],"sourcesContent":["import React, { useEffect, useState, useCallback, useRef } from 'react';\nimport { io } from 'socket.io-client';\nimport BoardStage from './BoardStage';\nimport NewHomeScreen from './NewHomeScreen';\nimport ReadyScreen from './ReadyScreen';\nimport GameOverScreen from './GameOverScreen';\nimport ScorePanel from './ScorePanel';\nimport './App.css';\n\n// Background image configuration\nconst BACKGROUND_IMAGES = [\n  'deep-tetris-color.jpg',\n  'tetris-1920-x-1080-background-hyihqau5t3lalo4e.png',\n  'tetris-2560-x-1600-background-3bjbi7nyulqbller.jpg',\n];\nconst BACKGROUND_CHANGE_INTERVAL = 30000; // 30 seconds\n\n// Load config file to get server address\nconst loadConfig = async () => {\n  try {\n    const response = await fetch('/config.json');\n    if (!response.ok) {\n      throw new Error(`Failed to load config: ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.warn('Error loading config, using default server address:', error);\n    return { client: { serverAddress: 'http://localhost:3001' } };\n  }\n};\n\n// Add debug logger at the top of the file\nconst DEBUG = {\n  events: true,\n  state: true,\n  render: true\n};\n\nfunction debugLog(type, message, data) {\n  if (DEBUG[type]) {\n    console.log(`[DEBUG:${type}] ${message}`, data !== undefined ? data : '');\n  }\n}\n\nfunction App() {\n  const [socket, setSocket] = useState(null);\n  const [gameState, setGameState] = useState(null);\n  const [isGameOver, setIsGameOver] = useState(false);\n  const [gameOverData, setGameOverData] = useState(null);\n  const [isConnecting, setIsConnecting] = useState(true);\n  const [error, setError] = useState(null);\n  const [socketError, setSocketError] = useState(null);\n\n  // Hard‐drop guard so holding space won't repeat\n  const hardDropActiveRef = useRef(false);\n\n  // Add state for background rotation\n  const [currentBackgroundIndex, setCurrentBackgroundIndex] = useState(0);\n  const backgroundIntervalRef = useRef(null);\n\n  // Add state for timer and scoring\n  const [elapsedTime, setElapsedTime] = useState(0);\n  const [currentScore, setCurrentScore] = useState(0);\n  const [lastScoreChange, setLastScoreChange] = useState(0);\n  const [level, setLevel] = useState(1);\n  const timerIntervalRef = useRef(null);\n\n  // Connect to socket on component mount\n  useEffect(() => {\n    const connectToServer = async () => {\n      try {\n        setIsConnecting(true);\n\n        // Load configuration\n        const config = await loadConfig();\n        const serverAddress = config.client?.serverAddress || 'http://localhost:3001';\n\n        debugLog('events', 'Connecting to server:', serverAddress);\n\n        // Create new socket connection\n        const newSocket = io(serverAddress);\n        setSocket(newSocket);\n\n        // Socket event handlers\n        newSocket.on('connect', () => {\n          debugLog('events', 'Socket connected with ID:', newSocket.id);\n          setIsConnecting(false);\n          setSocketError(null);\n        });\n\n        newSocket.on('connect_error', (err) => {\n          debugLog('events', 'Connection error:', err.message);\n          setSocketError(`Connection error: ${err.message}`);\n          setIsConnecting(false);\n        });\n\n        // Handle initial state\n        newSocket.on('init', (initialState) => {\n          debugLog('events', 'Received init event with state:', initialState);\n          setGameState(initialState);\n        });\n        \n        // Handle room creation\n        newSocket.on('roomCreated', (data) => {\n          debugLog('events', 'Received roomCreated event with data:', data);\n          debugLog('state', 'Setting appPhase to readyscreen from:', gameState?.appPhase);\n          setGameState(prevState => {\n            const newState = {\n              ...data.gameState,\n              appPhase: 'readyscreen'\n            };\n            debugLog('state', 'New gameState after roomCreated:', newState);\n            return newState;\n          });\n          setError(null);\n        });\n        \n        // Handle room join\n        newSocket.on('roomJoined', (data) => {\n          debugLog('events', 'Received roomJoined event with data:', data);\n          debugLog('state', 'Setting appPhase to readyscreen from:', gameState?.appPhase);\n          setGameState(prevState => {\n            const newState = {\n              ...data.gameState,\n              appPhase: 'readyscreen'\n            };\n            debugLog('state', 'New gameState after roomJoined:', newState);\n            return newState;\n          });\n          setError(null);\n        });\n        \n        // Handle leaving room\n        newSocket.on('roomLeft', (data) => {\n          debugLog('events', 'Received roomLeft event with data:', data);\n          debugLog('state', 'Setting appPhase to homescreen from:', gameState?.appPhase);\n          setGameState(prevState => {\n            const newState = {\n              appPhase: 'homescreen',\n              socketId: newSocket.id\n            };\n            debugLog('state', 'New gameState after roomLeft:', newState);\n            return newState;\n          });\n        });\n        \n        // Handle errors\n        newSocket.on('error', ({ message }) => {\n          debugLog('events', 'Received server error:', message);\n          setError(message);\n        });\n\n        // Handle game state updates\n        newSocket.on('gameState', (newState) => {\n          debugLog('events', 'Received gameState update with appPhase:', newState?.appPhase);\n          setGameState(prevState => {\n            // If we're showing a readyscreen from a room we just created or joined,\n            // don't let a gameState event with homescreen override it\n            if (prevState?.appPhase === 'readyscreen' && newState?.appPhase === 'homescreen') {\n              debugLog('state', 'Ignoring homescreen gameState while in readyscreen');\n              return prevState;\n            }\n            debugLog('state', 'Updating gameState from:', prevState?.appPhase, 'to:', newState?.appPhase);\n            return newState;\n          });\n        });\n\n        // Handle game over\n        newSocket.on('gameOver', (data) => {\n          console.log('Game over with data:', data);\n          setIsGameOver(true);\n          setGameOverData(data);\n        });\n        \n        // Handle player joined notification\n        newSocket.on('playerJoined', ({ playerId, player, gameState }) => {\n          console.log(`Player joined: ${playerId}`);\n          setGameState(gameState);\n        });\n        \n        // Handle player left notification\n        newSocket.on('playerLeft', ({ playerId, gameState }) => {\n          console.log(`Player left: ${playerId}`);\n          setGameState(gameState);\n        });\n        \n        // Handle host assignment (when previous host leaves)\n        newSocket.on('hostAssigned', ({ gameState }) => {\n          console.log('You are now the host');\n          setGameState(gameState);\n        });\n\n        // Return cleanup function\n        return () => {\n          console.log('Disconnecting socket');\n          newSocket.disconnect();\n        };\n      } catch (err) {\n        console.error('Error connecting to server:', err);\n        setSocketError(`Error connecting to server: ${err.message}`);\n        setIsConnecting(false);\n      }\n    };\n\n    connectToServer();\n  }, []);\n\n  // Background rotation effect - only active during gameplay\n  useEffect(() => {\n    // Clear any existing background rotation interval\n    if (backgroundIntervalRef.current) {\n      clearInterval(backgroundIntervalRef.current);\n      backgroundIntervalRef.current = null;\n    }\n\n    // Start background rotation when game is playing\n    if (gameState && gameState.appPhase === 'playing') {\n      // Randomize starting background\n      setCurrentBackgroundIndex(Math.floor(Math.random() * BACKGROUND_IMAGES.length));\n\n      // Set interval to rotate backgrounds\n      backgroundIntervalRef.current = setInterval(() => {\n        setCurrentBackgroundIndex(prevIndex =>\n          (prevIndex + 1) % BACKGROUND_IMAGES.length\n        );\n      }, BACKGROUND_CHANGE_INTERVAL);\n    }\n\n    // Cleanup on unmount or phase change\n    return () => {\n      if (backgroundIntervalRef.current) {\n        clearInterval(backgroundIntervalRef.current);\n        backgroundIntervalRef.current = null;\n      }\n    };\n  }, [gameState?.appPhase]);\n\n  // Timer management based on game phase\n  useEffect(() => {\n    // Clean up the previous interval if it exists\n    if (timerIntervalRef.current) {\n      clearInterval(timerIntervalRef.current);\n      timerIntervalRef.current = null;\n    }\n\n    if (gameState && gameState.appPhase === 'playing') {\n      // Reset the timer when game starts\n      setElapsedTime(0);\n      setCurrentScore(0);\n      setLastScoreChange(0);\n      setLevel(1);\n\n      // Start a new timer that updates every 10ms for centisecond precision\n      timerIntervalRef.current = setInterval(() => {\n        setElapsedTime(prevTime => prevTime + 10);\n      }, 10);\n\n      console.log('Timer started');\n    }\n\n    // Cleanup on unmount or phase change\n    return () => {\n      if (timerIntervalRef.current) {\n        clearInterval(timerIntervalRef.current);\n        timerIntervalRef.current = null;\n      }\n    };\n  }, [gameState?.appPhase]);\n\n  // Update the player list for display and track current player's score\n  const updatePlayerList = useCallback((players) => {\n    if (!players || typeof players !== 'object') return;\n\n    // Map player data to what we need\n    const playerEntries = Object.entries(players);\n\n    // Update current player score state for the score panel\n    if (socket) {\n      const currentPlayerEntry = playerEntries.find(([id]) => id === socket.id);\n      if (currentPlayerEntry) {\n        const [, currentPlayer] = currentPlayerEntry;\n\n        // Update score if changed\n        if (currentPlayer.score !== currentScore) {\n          const scoreChange = Math.max(0, currentPlayer.score - currentScore);\n          if (scoreChange > 0) {\n            setLastScoreChange(scoreChange);\n            // Reset the score change highlight after 1 second\n            setTimeout(() => setLastScoreChange(0), 1000);\n          }\n          setCurrentScore(currentPlayer.score);\n        }\n\n        // Update level if changed\n        if (currentPlayer.level && currentPlayer.level !== level) {\n          setLevel(currentPlayer.level);\n        }\n      }\n    }\n  }, [currentScore, level, socket]);\n\n  // Keyboard control handlers\n  useEffect(() => {\n    if (!socket || !gameState) return;\n\n    const handleKeyDown = (e) => {\n      // Only process key events if game is in progress\n      if (gameState.appPhase === 'playing') {\n        switch (e.code) {\n          case 'ArrowLeft':\n            // First send immediate move, then start DAS\n            socket.emit('playerAction', { type: 'moveLeft' });\n            socket.emit('playerAction', { type: 'startDAS', direction: 'left' });\n            break;\n          case 'ArrowRight':\n            // First send immediate move, then start DAS\n            socket.emit('playerAction', { type: 'moveRight' });\n            socket.emit('playerAction', { type: 'startDAS', direction: 'right' });\n            break;\n          case 'ArrowUp':\n          case 'KeyZ':\n            socket.emit('playerAction', { type: 'rotate' });\n            break;\n          case 'ArrowDown':\n            socket.emit('playerAction', { type: 'softDrop' });\n            break;\n          case 'Space':\n            // guard against auto‑repeat when holding space\n            if (!hardDropActiveRef.current) {\n              socket.emit('playerAction', { type: 'hardDrop' });\n              hardDropActiveRef.current = true;\n            }\n            break;\n          default:\n            break;\n        }\n      } else if (gameState.appPhase === 'readyscreen') {\n        // Handle ready toggle on X key press\n        if (e.code === 'KeyX') {\n          const isCurrentlyReady = gameState.readyPlayers && \n            gameState.readyPlayers.includes(socket.id);\n          console.log('X key pressed, toggling ready state:', !isCurrentlyReady);\n          socket.emit('playerReady', !isCurrentlyReady);\n        }\n      }\n    };\n\n    const handleKeyUp = (e) => {\n      // Only process key events if game is in progress\n      if (gameState.appPhase === 'playing') {\n        switch (e.code) {\n          case 'ArrowLeft':\n          case 'ArrowRight':\n            socket.emit('playerAction', { type: 'endDAS' });\n            break;\n          case 'ArrowDown':\n            socket.emit('playerAction', { type: 'endSoftDrop' });\n            break;\n          case 'Space':\n            // re‑enable hardDrop once key is released\n            hardDropActiveRef.current = false;\n            break;\n          default:\n            break;\n        }\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyDown);\n    window.addEventListener('keyup', handleKeyUp);\n\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n      window.removeEventListener('keyup', handleKeyUp);\n    };\n  }, [socket, gameState]);\n\n  // Room management handlers\n  const handleCreateRoom = useCallback((playerName) => {\n    if (socket) {\n      socket.emit('createRoom', playerName);\n    }\n  }, [socket]);\n  \n  const handleJoinRoom = useCallback((roomCode, playerName) => {\n    if (socket) {\n      socket.emit('joinRoom', { roomCode, playerName });\n    }\n  }, [socket]);\n  \n  const handleLeaveRoom = useCallback(() => {\n    if (socket) {\n      socket.emit('leaveRoom');\n    }\n  }, [socket]);\n\n  // Handle player ready state\n  const handlePlayerReady = useCallback((isReady) => {\n    if (socket) {\n      socket.emit('playerReady', isReady);\n    }\n  }, [socket]);\n\n  // Handle game start\n  const handleStartGame = useCallback(() => {\n    if (socket) {\n      socket.emit('startGame');\n    }\n  }, [socket]);\n\n  // Handle game mode change\n  const handleSetGameMode = useCallback((mode) => {\n    if (socket) {\n      socket.emit('setGameMode', mode);\n    }\n  }, [socket]);\n\n  // Handle game over timeout\n  const handleGameOverTimeout = useCallback(() => {\n    setIsGameOver(false);\n    setGameOverData(null);\n  }, []);\n\n  // Get the current background image URL\n  const getCurrentBackgroundUrl = () => {\n    if (!BACKGROUND_IMAGES.length) return null;\n    return `${process.env.PUBLIC_URL}/backgrounds/${BACKGROUND_IMAGES[currentBackgroundIndex]}`;\n  };\n\n  // Show loading or error screen\n  if (isConnecting) {\n    return <div className=\"App\"><h1>Connecting to server...</h1></div>;\n  }\n\n  if (socketError) {\n    return (\n      <div className=\"App\">\n        <h1>Connection Error</h1>\n        <p>{socketError}</p>\n        <p>Please check that the server is running and the configuration is correct.</p>\n        <button\n          onClick={() => window.location.reload()}\n          style={{\n            padding: '10px 20px',\n            backgroundColor: '#FF5733',\n            border: 'none',\n            borderRadius: '4px',\n            color: 'white',\n            cursor: 'pointer',\n            marginTop: '20px'\n          }}\n        >\n          Retry Connection\n        </button>\n      </div>\n    );\n  }\n\n  // Show loading screen if no game state\n  if (!gameState) {\n    return <div className=\"App\"><h1>Waiting for game state...</h1></div>;\n  }\n\n  // Render appropriate screen based on app phase\n  return (\n    <div\n      className=\"App\"\n      style={{\n        ...(gameState.appPhase === 'playing' && {\n          backgroundImage: `url(${getCurrentBackgroundUrl()})`,\n          backgroundSize: 'cover',\n          backgroundPosition: 'center',\n          transition: 'background-image 1s ease-in-out',\n          minHeight: '100vh'\n        })\n      }}\n      tabIndex=\"0\"\n    >\n      {gameState.appPhase === 'homescreen' && (\n        <NewHomeScreen\n          onCreateRoom={handleCreateRoom}\n          onJoinRoom={handleJoinRoom}\n          error={error}\n        />\n      )}\n      \n      {gameState.appPhase === 'readyscreen' && (\n        <ReadyScreen\n          roomCode={gameState.roomCode}\n          players={gameState.players || {}}\n          currentPlayerId={socket?.id}\n          readyPlayers={gameState.readyPlayers || []}\n          onReady={handlePlayerReady}\n          onStartGame={handleStartGame}\n          onLeaveRoom={handleLeaveRoom}\n          onSetGameMode={handleSetGameMode}\n          gameMode={gameState.gameMode}\n          gameInProgress={gameState.gameInProgress}\n          isHost={gameState.players?.[socket?.id]?.isHost}\n        />\n      )}\n\n      {gameState.appPhase === 'playing' && (\n        <div style={{\n          backgroundColor: 'rgba(0, 0, 0, 0.8)',\n          backdropFilter: 'blur(5px)',\n          padding: '20px',\n          borderRadius: '10px',\n          margin: '10px auto',\n          maxWidth: '900px'\n        }}>\n          <div style={{\n            display: 'flex',\n            justifyContent: 'space-between',\n            alignItems: 'center',\n            marginBottom: '15px'\n          }}>\n            <h1 style={{ margin: 0, fontSize: '28px', color: '#fff' }}>Tetristributed</h1>\n            <div style={{\n              display: 'flex',\n              alignItems: 'center',\n              gap: '15px'\n            }}>\n              <div style={{\n                fontSize: '14px',\n                backgroundColor: '#444',\n                padding: '5px 10px',\n                borderRadius: '4px',\n                display: 'flex',\n                flexDirection: 'column',\n                alignItems: 'center'\n              }}>\n                <span style={{fontSize: '10px', color: '#aaa'}}>ROOM</span>\n                <span style={{fontWeight: 'bold'}}>{gameState.roomCode}</span>\n              </div>\n              <div style={{\n                fontSize: '14px',\n                backgroundColor: '#333',\n                padding: '5px 10px',\n                borderRadius: '4px'\n              }}>\n                Player: {socket?.id && socket.id.substring(0, 4)}\n              </div>\n            </div>\n          </div>\n\n          <div style={{ display: 'flex', gap: '20px' }}>\n            <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n              <BoardStage\n                board={gameState.board || []}\n                players={gameState.players || {}}\n                linesToClear={gameState.linesToClear || []}\n              />\n            </div>\n\n            <div style={{\n              display: 'flex',\n              flexDirection: 'column',\n              minWidth: '220px'\n            }}>\n              {/* Integrated Score Panel with Timer */}\n              <ScorePanel\n                score={currentScore}\n                level={level}\n                lastScoreChange={lastScoreChange}\n                elapsedTime={elapsedTime}\n              />\n\n              {/* Players List */}\n              <div style={{\n                backgroundColor: 'rgba(40, 40, 40, 0.9)',\n                padding: '12px',\n                borderRadius: '8px',\n                marginTop: '15px'\n              }}>\n                <h2 style={{ margin: '0 0 10px 0', fontSize: '18px', color: '#ccc' }}>Players</h2>\n                <ul style={{ listStyle: 'none', padding: 0, margin: 0 }}>\n                  {Object.entries(gameState.players || {}).map(([id, player]) => {\n                    const isCurrentPlayer = id === socket?.id;\n                    const shortId = id.substring(0, 4);\n\n                    return (\n                      <li\n                        key={id}\n                        style={{\n                          margin: '6px 0',\n                          padding: '8px',\n                          backgroundColor: isCurrentPlayer ? '#444' : '#333',\n                          borderLeft: `4px solid ${player.color || '#ccc'}`,\n                          borderRadius: '4px',\n                          transition: 'background-color 0.3s'\n                        }}\n                      >\n                        <div style={{\n                          display: 'flex',\n                          alignItems: 'center',\n                          justifyContent: 'space-between'\n                        }}>\n                          <div>\n                            <span style={{\n                              fontWeight: isCurrentPlayer ? 'bold' : 'normal',\n                              color: isCurrentPlayer ? '#fff' : '#ccc'\n                            }}>\n                              {player.name || `Player ${player.playerNumber || shortId}`}\n                            </span>\n                            {isCurrentPlayer && <span style={{\n                              fontSize: '12px',\n                              marginLeft: '5px',\n                              color: '#ffcc00'\n                            }}>\n                              (You)\n                            </span>}\n                          </div>\n                          <div style={{\n                            backgroundColor: '#222',\n                            padding: '2px 6px',\n                            borderRadius: '3px',\n                            fontSize: '14px',\n                            fontWeight: 'bold'\n                          }}>\n                            {player.score || 0}\n                          </div>\n                        </div>\n                      </li>\n                    );\n                  })}\n                </ul>\n\n                <div style={{\n                  marginTop: '15px',\n                  padding: '8px',\n                  backgroundColor: '#222',\n                  borderRadius: '4px',\n                  textAlign: 'center'\n                }}>\n                  <div style={{ fontSize: '12px', color: '#aaa' }}>GAME MODE</div>\n                  <div style={{ fontSize: '16px', fontWeight: 'bold', marginTop: '4px' }}>\n                    {gameState.gameMode || 'Classic'}\n                  </div>\n                </div>\n              </div>\n\n              {/* Controls Help */}\n              <div style={{\n                backgroundColor: 'rgba(40, 40, 40, 0.7)',\n                padding: '12px',\n                borderRadius: '8px',\n                marginTop: '15px',\n                fontSize: '12px',\n                color: '#aaa'\n              }}>\n                <div style={{ marginBottom: '5px', fontWeight: 'bold', color: '#ccc' }}>Controls:</div>\n                <div>← → : Move</div>\n                <div>↓ : Soft Drop</div>\n                <div>↑ / Z : Rotate</div>\n                <div>Space : Hard Drop</div>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {isGameOver && gameOverData && (\n        <GameOverScreen\n          gameOverData={gameOverData}\n          currentPlayerId={socket?.id}\n          onTimeout={handleGameOverTimeout}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}