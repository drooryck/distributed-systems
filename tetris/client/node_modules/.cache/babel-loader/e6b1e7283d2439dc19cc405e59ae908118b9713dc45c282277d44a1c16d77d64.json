{"ast":null,"code":"import React,{useEffect,useState,useCallback,useRef}from'react';import{io}from'socket.io-client';import{connectToCluster}from'./serverDiscovery';import BoardStage from'./BoardStage';import NewHomeScreen from'./NewHomeScreen';import ReadyScreen from'./ReadyScreen';import GameOverScreen from'./GameOverScreen';import ScorePanel from'./ScorePanel';import'./App.css';// Background image configuration\nimport{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const BACKGROUND_IMAGES=['deep-tetris-color.jpg','tetris-1920-x-1080-background-hyihqau5t3lalo4e.png','tetris-2560-x-1600-background-3bjbi7nyulqbller.jpg'];const BACKGROUND_CHANGE_INTERVAL=30000;// 30 seconds\n// Load config file to get server address\nconst loadConfig=async()=>{try{const response=await fetch('/config.json');if(!response.ok){throw new Error(`Failed to load config: ${response.status}`);}return await response.json();}catch(error){console.warn('Error loading config, using default server address:',error);return{serverAddress:'http://localhost:3001'};}};// Debug logging\nconst DEBUG={events:true,state:true,render:false};function debugLog(type){if(DEBUG[type]){for(var _len=arguments.length,args=new Array(_len>1?_len-1:0),_key=1;_key<_len;_key++){args[_key-1]=arguments[_key];}console.log(`[DEBUG:${type}]`,...args);}}// Function to get current background URL\nconst getBackgroundUrl=index=>{return`${process.env.PUBLIC_URL}/backgrounds/${BACKGROUND_IMAGES[index]}`;};// App component\nfunction App(){const[socket,setSocket]=useState(null);const[gameState,setGameState]=useState(null);const[isGameOver,setIsGameOver]=useState(false);const[gameOverData,setGameOverData]=useState(null);const[isConnecting,setIsConnecting]=useState(true);const[error,setError]=useState(null);const[socketError,setSocketError]=useState(null);// Hard‐drop guard so holding space won't repeat\nconst hardDropActiveRef=useRef(false);// Add state for background rotation\nconst[currentBackgroundIndex,setCurrentBackgroundIndex]=useState(0);const backgroundIntervalRef=useRef(null);// Add state for timer and scoring\nconst[elapsedTime,setElapsedTime]=useState(0);const[currentScore,setCurrentScore]=useState(0);const[lastScoreChange,setLastScoreChange]=useState(0);const[level,setLevel]=useState(1);const timerIntervalRef=useRef(null);// For reconnection logic\nconst reconnectTimeoutRef=useRef(null);const reconnectionAttemptsRef=useRef(0);const MAX_RECONNECT_ATTEMPTS=5;const lastGameStateRef=useRef(null);// Function to get current background URL\nconst getCurrentBackgroundUrl=()=>{return getBackgroundUrl(currentBackgroundIndex);};// Connect to socket on component mount\nuseEffect(()=>{const connectToServer=async()=>{try{setIsConnecting(true);setSocketError(null);// Try to connect to the cluster\nlet newSocket;try{debugLog('events','Attempting to connect to server cluster');newSocket=await connectToCluster();}catch(clusterError){var _config$client;debugLog('events','Cluster connection failed, falling back to direct connection',clusterError);// Fall back to direct connection\nconst config=await loadConfig();const serverAddress=((_config$client=config.client)===null||_config$client===void 0?void 0:_config$client.serverAddress)||config.serverAddress||'http://localhost:3001';debugLog('events','Connecting to server:',serverAddress);newSocket=io(serverAddress);}setSocket(newSocket);// Socket event handlers\nnewSocket.on('connect',()=>{debugLog('events','Socket connected with ID:',newSocket.id);setIsConnecting(false);setSocketError(null);reconnectionAttemptsRef.current=0;});newSocket.on('connect_error',err=>{debugLog('events','Connection error:',err.message);setSocketError(`Connection error: ${err.message}`);setIsConnecting(false);});// Handle leader information updates\nnewSocket.on('leaderInfo',info=>{debugLog('events','Leader info received:',info);if(!info.isLeader&&info.leaderAddress){debugLog('events','Redirecting to leader at:',info.leaderAddress);// Disconnect from current socket\nnewSocket.disconnect();// Connect to the leader\nconst leaderSocket=io(info.leaderAddress);setSocket(leaderSocket);// Set up event handlers on the new socket\n// ...similar handlers as above\n}});// Handle initial state\nnewSocket.on('init',initialState=>{debugLog('events','Received init event with state:',initialState);});// Handle game state updates\nnewSocket.on('gameState',newGameState=>{debugLog('state','Received gameState update:',newGameState);setGameState(prevState=>{// Store the game state for potential reconnection\nif(newGameState){lastGameStateRef.current=newGameState;}// Special case to prevent accidentally going back to homescreen\nif((prevState===null||prevState===void 0?void 0:prevState.appPhase)==='readyscreen'&&(newGameState===null||newGameState===void 0?void 0:newGameState.appPhase)==='homescreen'){debugLog('state','Ignoring homescreen gameState while in readyscreen');return prevState;}return newGameState;});// Update score if available\nif(newGameState&&newGameState.appPhase==='playing'){// Find the player that corresponds to this client\nconst player=newGameState.players[newSocket.id];if(player){const newScore=player.score||0;if(newScore!==currentScore){setLastScoreChange(Date.now());setCurrentScore(newScore);}}}});// Handle room creation\nnewSocket.on('roomCreated',_ref=>{let{roomCode,gameState}=_ref;debugLog('events',`Room created: ${roomCode}`);setGameState(gameState);});// Handle joining a room\nnewSocket.on('roomJoined',_ref2=>{let{roomCode,gameState}=_ref2;debugLog('events',`Joined room: ${roomCode}`);setGameState(gameState);});// Handle player joining\nnewSocket.on('playerJoined',_ref3=>{let{playerId,gameState}=_ref3;debugLog('events',`Player joined: ${playerId}`);setGameState(gameState);});// Handle player leaving\nnewSocket.on('playerLeft',_ref4=>{let{playerId,gameState}=_ref4;debugLog('events',`Player left: ${playerId}`);setGameState(gameState);});// Handle host assignment (when previous host leaves)\nnewSocket.on('hostAssigned',_ref5=>{let{gameState}=_ref5;debugLog('events','You are now the host');setGameState(gameState);});// Handle game over\nnewSocket.on('gameOver',data=>{debugLog('events','Game over:',data);setIsGameOver(true);setGameOverData(data);});// Handle server errors\nnewSocket.on('error',err=>{debugLog('events','Server error:',err);setError(err.message);});// Handle disconnection with reconnection logic\nnewSocket.on('disconnect',reason=>{debugLog('events','Socket disconnected:',reason);// If the disconnect was not initiated by the client, attempt to reconnect\nif(reason==='io server disconnect'||reason==='transport close'||reason==='transport error'){if(reconnectionAttemptsRef.current<MAX_RECONNECT_ATTEMPTS){debugLog('events',`Attempting to reconnect (${reconnectionAttemptsRef.current+1}/${MAX_RECONNECT_ATTEMPTS})...`);setIsConnecting(true);// Clear any existing reconnection timeout\nif(reconnectTimeoutRef.current){clearTimeout(reconnectTimeoutRef.current);}// Exponential backoff for reconnection\nconst delay=Math.min(1000*Math.pow(2,reconnectionAttemptsRef.current),10000);reconnectTimeoutRef.current=setTimeout(async()=>{reconnectionAttemptsRef.current++;connectToServer();},delay);}else{debugLog('events','Max reconnection attempts reached');setSocketError('Could not reconnect to the server. Please refresh the page.');setIsConnecting(false);}}});// Return cleanup function\nreturn()=>{debugLog('events','Cleaning up socket connection');if(reconnectTimeoutRef.current){clearTimeout(reconnectTimeoutRef.current);}newSocket.disconnect();};}catch(err){console.error('Error connecting to server:',err);setSocketError(`Error connecting to server: ${err.message}`);setIsConnecting(false);}};connectToServer();},[]);// Background rotation effect - only active during gameplay\nuseEffect(()=>{// Clear any existing background rotation interval\nif(backgroundIntervalRef.current){clearInterval(backgroundIntervalRef.current);backgroundIntervalRef.current=null;}// Start background rotation when game is playing\nif(gameState&&gameState.appPhase==='playing'){backgroundIntervalRef.current=setInterval(()=>{setCurrentBackgroundIndex(prevIndex=>(prevIndex+1)%BACKGROUND_IMAGES.length);},BACKGROUND_CHANGE_INTERVAL);}return()=>{if(backgroundIntervalRef.current){clearInterval(backgroundIntervalRef.current);}};},[gameState===null||gameState===void 0?void 0:gameState.appPhase]);// Timer effect for gameplay\nuseEffect(()=>{if(gameState&&gameState.appPhase==='playing'){if(!timerIntervalRef.current){const startTime=Date.now();timerIntervalRef.current=setInterval(()=>{const elapsed=Math.floor((Date.now()-startTime)/1000);setElapsedTime(elapsed);// Update level based on time (every 30 seconds)\nconst newLevel=Math.max(1,Math.floor(elapsed/30)+1);if(newLevel!==level){setLevel(newLevel);}},1000);}}else{// Clear timer when not playing\nif(timerIntervalRef.current){clearInterval(timerIntervalRef.current);timerIntervalRef.current=null;}// Reset timer and level when game ends\nif(gameState&&gameState.appPhase!=='playing'){setElapsedTime(0);setLevel(1);}}return()=>{if(timerIntervalRef.current){clearInterval(timerIntervalRef.current);}};},[gameState===null||gameState===void 0?void 0:gameState.appPhase,level]);// Handle keydown events for gameplay\nconst handleKeyDown=useCallback(e=>{if(!socket||!gameState||gameState.appPhase!=='playing')return;// Prevent default behavior for game controls\nif(['ArrowLeft','ArrowRight','ArrowUp','ArrowDown','Space','KeyZ'].includes(e.code)){e.preventDefault();}// Only handle keys that aren't being repeated (except down)\nif(!e.repeat||e.code==='ArrowDown'){switch(e.code){case'ArrowLeft':// First send immediate move, then start DAS\nsocket.emit('playerAction',{type:'moveLeft'});socket.emit('playerAction',{type:'startDAS',direction:'left'});break;case'ArrowRight':// First send immediate move, then start DAS\nsocket.emit('playerAction',{type:'moveRight'});socket.emit('playerAction',{type:'startDAS',direction:'right'});break;case'ArrowUp':case'KeyZ':socket.emit('playerAction',{type:'rotate'});break;case'ArrowDown':socket.emit('playerAction',{type:'softDrop'});break;case'Space':// guard against auto‑repeat when holding space\nif(!hardDropActiveRef.current){socket.emit('playerAction',{type:'hardDrop'});hardDropActiveRef.current=true;}break;default:break;}}},[socket,gameState]);// Handle keyup events to stop DAS (delayed auto-shift)\nconst handleKeyUp=useCallback(e=>{if(!socket||!gameState||gameState.appPhase!=='playing')return;switch(e.code){case'ArrowLeft':case'ArrowRight':socket.emit('playerAction',{type:'stopDAS'});break;case'Space':hardDropActiveRef.current=false;break;default:break;}},[socket,gameState]);// Add key event listeners\nuseEffect(()=>{window.addEventListener('keydown',handleKeyDown);window.addEventListener('keyup',handleKeyUp);return()=>{window.removeEventListener('keydown',handleKeyDown);window.removeEventListener('keyup',handleKeyUp);};},[handleKeyDown,handleKeyUp]);// Create a room\nconst createRoom=useCallback(playerName=>{if(socket){debugLog('events','Creating room with player name:',playerName);socket.emit('createRoom',playerName);}},[socket]);// Join a room\nconst joinRoom=useCallback((roomCode,playerName)=>{if(socket){debugLog('events',`Joining room ${roomCode} with player name: ${playerName}`);socket.emit('joinRoom',{roomCode,playerName});}},[socket]);// Leave a room\nconst leaveRoom=useCallback(()=>{if(socket){debugLog('events','Leaving room');socket.emit('leaveRoom');}},[socket]);// Set player ready state\nconst setReady=useCallback(isReady=>{if(socket){debugLog('events',`Setting ready state: ${isReady}`);socket.emit('playerReady',isReady);}},[socket]);// Start the game (host only)\nconst startGame=useCallback(()=>{if(socket){debugLog('events','Starting game');socket.emit('startGame');}},[socket]);// Show error message if there's a socket error\nif(socketError){return/*#__PURE__*/_jsxs(\"div\",{className:\"App error-screen\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Connection Error\"}),/*#__PURE__*/_jsx(\"p\",{children:socketError}),/*#__PURE__*/_jsx(\"p\",{children:\"Please check that the server is running and the configuration is correct.\"}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>window.location.reload(),style:{padding:'10px 20px',backgroundColor:'#FF5733',border:'none',borderRadius:'4px',color:'white',cursor:'pointer',marginTop:'20px'},children:\"Retry Connection\"})]});}// Show loading screen if no game state\nif(!gameState){return/*#__PURE__*/_jsx(\"div\",{className:\"App\",children:/*#__PURE__*/_jsx(\"h1\",{children:\"Waiting for game state...\"})});}// Render appropriate screen based on app phase\nreturn/*#__PURE__*/_jsxs(\"div\",{className:\"App\",style:{...(gameState.appPhase==='playing'&&{backgroundImage:`url(${getCurrentBackgroundUrl()})`,backgroundSize:'cover',backgroundPosition:'center'})},children:[gameState.appPhase==='homescreen'&&/*#__PURE__*/_jsx(NewHomeScreen,{onCreateRoom:createRoom,onJoinRoom:joinRoom}),gameState.appPhase==='readyscreen'&&/*#__PURE__*/_jsx(ReadyScreen,{gameState:gameState,socketId:socket?socket.id:null,onReady:setReady,onLeaveRoom:leaveRoom,onStartGame:startGame}),gameState.appPhase==='playing'&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(BoardStage,{board:gameState.board,players:gameState.players,socketId:socket?socket.id:null}),/*#__PURE__*/_jsx(ScorePanel,{score:currentScore,lastScoreChange:lastScoreChange,level:level,time:elapsedTime})]}),gameState.appPhase==='gameover'&&/*#__PURE__*/_jsx(GameOverScreen,{gameOverData:gameOverData,onPlayAgain:()=>{setIsGameOver(false);leaveRoom();}})]});}export default App;","map":{"version":3,"names":["React","useEffect","useState","useCallback","useRef","io","connectToCluster","BoardStage","NewHomeScreen","ReadyScreen","GameOverScreen","ScorePanel","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","BACKGROUND_IMAGES","BACKGROUND_CHANGE_INTERVAL","loadConfig","response","fetch","ok","Error","status","json","error","console","warn","serverAddress","DEBUG","events","state","render","debugLog","type","_len","arguments","length","args","Array","_key","log","getBackgroundUrl","index","process","env","PUBLIC_URL","App","socket","setSocket","gameState","setGameState","isGameOver","setIsGameOver","gameOverData","setGameOverData","isConnecting","setIsConnecting","setError","socketError","setSocketError","hardDropActiveRef","currentBackgroundIndex","setCurrentBackgroundIndex","backgroundIntervalRef","elapsedTime","setElapsedTime","currentScore","setCurrentScore","lastScoreChange","setLastScoreChange","level","setLevel","timerIntervalRef","reconnectTimeoutRef","reconnectionAttemptsRef","MAX_RECONNECT_ATTEMPTS","lastGameStateRef","getCurrentBackgroundUrl","connectToServer","newSocket","clusterError","_config$client","config","client","on","id","current","err","message","info","isLeader","leaderAddress","disconnect","leaderSocket","initialState","newGameState","prevState","appPhase","player","players","newScore","score","Date","now","_ref","roomCode","_ref2","_ref3","playerId","_ref4","_ref5","data","reason","clearTimeout","delay","Math","min","pow","setTimeout","clearInterval","setInterval","prevIndex","startTime","elapsed","floor","newLevel","max","handleKeyDown","e","includes","code","preventDefault","repeat","emit","direction","handleKeyUp","window","addEventListener","removeEventListener","createRoom","playerName","joinRoom","leaveRoom","setReady","isReady","startGame","className","children","onClick","location","reload","style","padding","backgroundColor","border","borderRadius","color","cursor","marginTop","backgroundImage","backgroundSize","backgroundPosition","onCreateRoom","onJoinRoom","socketId","onReady","onLeaveRoom","onStartGame","board","time","onPlayAgain"],"sources":["/Users/driesrooryck/Desktop/s25/distributed-systems/tetris/client/src/App.js"],"sourcesContent":["import React, { useEffect, useState, useCallback, useRef } from 'react';\nimport { io } from 'socket.io-client';\nimport { connectToCluster } from './serverDiscovery';\nimport BoardStage from './BoardStage';\nimport NewHomeScreen from './NewHomeScreen';\nimport ReadyScreen from './ReadyScreen';\nimport GameOverScreen from './GameOverScreen';\nimport ScorePanel from './ScorePanel';\nimport './App.css';\n\n// Background image configuration\nconst BACKGROUND_IMAGES = [\n  'deep-tetris-color.jpg',\n  'tetris-1920-x-1080-background-hyihqau5t3lalo4e.png',\n  'tetris-2560-x-1600-background-3bjbi7nyulqbller.jpg',\n];\nconst BACKGROUND_CHANGE_INTERVAL = 30000; // 30 seconds\n\n// Load config file to get server address\nconst loadConfig = async () => {\n  try {\n    const response = await fetch('/config.json');\n    if (!response.ok) {\n      throw new Error(`Failed to load config: ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.warn('Error loading config, using default server address:', error);\n    return { serverAddress: 'http://localhost:3001' };\n  }\n};\n\n// Debug logging\nconst DEBUG = {\n  events: true,\n  state: true,\n  render: false\n};\n\nfunction debugLog(type, ...args) {\n  if (DEBUG[type]) {\n    console.log(`[DEBUG:${type}]`, ...args);\n  }\n}\n\n// Function to get current background URL\nconst getBackgroundUrl = (index) => {\n  return `${process.env.PUBLIC_URL}/backgrounds/${BACKGROUND_IMAGES[index]}`;\n};\n\n// App component\nfunction App() {\n  const [socket, setSocket] = useState(null);\n  const [gameState, setGameState] = useState(null);\n  const [isGameOver, setIsGameOver] = useState(false);\n  const [gameOverData, setGameOverData] = useState(null);\n  const [isConnecting, setIsConnecting] = useState(true);\n  const [error, setError] = useState(null);\n  const [socketError, setSocketError] = useState(null);\n\n  // Hard‐drop guard so holding space won't repeat\n  const hardDropActiveRef = useRef(false);\n\n  // Add state for background rotation\n  const [currentBackgroundIndex, setCurrentBackgroundIndex] = useState(0);\n  const backgroundIntervalRef = useRef(null);\n\n  // Add state for timer and scoring\n  const [elapsedTime, setElapsedTime] = useState(0);\n  const [currentScore, setCurrentScore] = useState(0);\n  const [lastScoreChange, setLastScoreChange] = useState(0);\n  const [level, setLevel] = useState(1);\n  const timerIntervalRef = useRef(null);\n\n  // For reconnection logic\n  const reconnectTimeoutRef = useRef(null);\n  const reconnectionAttemptsRef = useRef(0);\n  const MAX_RECONNECT_ATTEMPTS = 5;\n  const lastGameStateRef = useRef(null);\n\n  // Function to get current background URL\n  const getCurrentBackgroundUrl = () => {\n    return getBackgroundUrl(currentBackgroundIndex);\n  };\n\n  // Connect to socket on component mount\n  useEffect(() => {\n    const connectToServer = async () => {\n      try {\n        setIsConnecting(true);\n        setSocketError(null);\n\n        // Try to connect to the cluster\n        let newSocket;\n        try {\n          debugLog('events', 'Attempting to connect to server cluster');\n          newSocket = await connectToCluster();\n        } catch (clusterError) {\n          debugLog('events', 'Cluster connection failed, falling back to direct connection', clusterError);\n          \n          // Fall back to direct connection\n          const config = await loadConfig();\n          const serverAddress = config.client?.serverAddress || config.serverAddress || 'http://localhost:3001';\n          \n          debugLog('events', 'Connecting to server:', serverAddress);\n          newSocket = io(serverAddress);\n        }\n        \n        setSocket(newSocket);\n\n        // Socket event handlers\n        newSocket.on('connect', () => {\n          debugLog('events', 'Socket connected with ID:', newSocket.id);\n          setIsConnecting(false);\n          setSocketError(null);\n          reconnectionAttemptsRef.current = 0;\n        });\n\n        newSocket.on('connect_error', (err) => {\n          debugLog('events', 'Connection error:', err.message);\n          setSocketError(`Connection error: ${err.message}`);\n          setIsConnecting(false);\n        });\n\n        // Handle leader information updates\n        newSocket.on('leaderInfo', (info) => {\n          debugLog('events', 'Leader info received:', info);\n          \n          if (!info.isLeader && info.leaderAddress) {\n            debugLog('events', 'Redirecting to leader at:', info.leaderAddress);\n            \n            // Disconnect from current socket\n            newSocket.disconnect();\n            \n            // Connect to the leader\n            const leaderSocket = io(info.leaderAddress);\n            setSocket(leaderSocket);\n            \n            // Set up event handlers on the new socket\n            // ...similar handlers as above\n          }\n        });\n\n        // Handle initial state\n        newSocket.on('init', (initialState) => {\n          debugLog('events', 'Received init event with state:', initialState);\n        });\n\n        // Handle game state updates\n        newSocket.on('gameState', (newGameState) => {\n          debugLog('state', 'Received gameState update:', newGameState);\n          \n          setGameState((prevState) => {\n            // Store the game state for potential reconnection\n            if (newGameState) {\n              lastGameStateRef.current = newGameState;\n            }\n            \n            // Special case to prevent accidentally going back to homescreen\n            if (prevState?.appPhase === 'readyscreen' && newGameState?.appPhase === 'homescreen') {\n              debugLog('state', 'Ignoring homescreen gameState while in readyscreen');\n              return prevState;\n            }\n            \n            return newGameState;\n          });\n          \n          // Update score if available\n          if (newGameState && newGameState.appPhase === 'playing') {\n            // Find the player that corresponds to this client\n            const player = newGameState.players[newSocket.id];\n            if (player) {\n              const newScore = player.score || 0;\n              if (newScore !== currentScore) {\n                setLastScoreChange(Date.now());\n                setCurrentScore(newScore);\n              }\n            }\n          }\n        });\n\n        // Handle room creation\n        newSocket.on('roomCreated', ({ roomCode, gameState }) => {\n          debugLog('events', `Room created: ${roomCode}`);\n          setGameState(gameState);\n        });\n\n        // Handle joining a room\n        newSocket.on('roomJoined', ({ roomCode, gameState }) => {\n          debugLog('events', `Joined room: ${roomCode}`);\n          setGameState(gameState);\n        });\n\n        // Handle player joining\n        newSocket.on('playerJoined', ({ playerId, gameState }) => {\n          debugLog('events', `Player joined: ${playerId}`);\n          setGameState(gameState);\n        });\n\n        // Handle player leaving\n        newSocket.on('playerLeft', ({ playerId, gameState }) => {\n          debugLog('events', `Player left: ${playerId}`);\n          setGameState(gameState);\n        });\n        \n        // Handle host assignment (when previous host leaves)\n        newSocket.on('hostAssigned', ({ gameState }) => {\n          debugLog('events', 'You are now the host');\n          setGameState(gameState);\n        });\n\n        // Handle game over\n        newSocket.on('gameOver', (data) => {\n          debugLog('events', 'Game over:', data);\n          setIsGameOver(true);\n          setGameOverData(data);\n        });\n\n        // Handle server errors\n        newSocket.on('error', (err) => {\n          debugLog('events', 'Server error:', err);\n          setError(err.message);\n        });\n\n        // Handle disconnection with reconnection logic\n        newSocket.on('disconnect', (reason) => {\n          debugLog('events', 'Socket disconnected:', reason);\n          \n          // If the disconnect was not initiated by the client, attempt to reconnect\n          if (reason === 'io server disconnect' || reason === 'transport close' || reason === 'transport error') {\n            if (reconnectionAttemptsRef.current < MAX_RECONNECT_ATTEMPTS) {\n              debugLog('events', `Attempting to reconnect (${reconnectionAttemptsRef.current + 1}/${MAX_RECONNECT_ATTEMPTS})...`);\n              setIsConnecting(true);\n              \n              // Clear any existing reconnection timeout\n              if (reconnectTimeoutRef.current) {\n                clearTimeout(reconnectTimeoutRef.current);\n              }\n              \n              // Exponential backoff for reconnection\n              const delay = Math.min(1000 * Math.pow(2, reconnectionAttemptsRef.current), 10000);\n              reconnectTimeoutRef.current = setTimeout(async () => {\n                reconnectionAttemptsRef.current++;\n                connectToServer();\n              }, delay);\n            } else {\n              debugLog('events', 'Max reconnection attempts reached');\n              setSocketError('Could not reconnect to the server. Please refresh the page.');\n              setIsConnecting(false);\n            }\n          }\n        });\n\n        // Return cleanup function\n        return () => {\n          debugLog('events', 'Cleaning up socket connection');\n          \n          if (reconnectTimeoutRef.current) {\n            clearTimeout(reconnectTimeoutRef.current);\n          }\n          \n          newSocket.disconnect();\n        };\n      } catch (err) {\n        console.error('Error connecting to server:', err);\n        setSocketError(`Error connecting to server: ${err.message}`);\n        setIsConnecting(false);\n      }\n    };\n\n    connectToServer();\n  }, []);\n\n  // Background rotation effect - only active during gameplay\n  useEffect(() => {\n    // Clear any existing background rotation interval\n    if (backgroundIntervalRef.current) {\n      clearInterval(backgroundIntervalRef.current);\n      backgroundIntervalRef.current = null;\n    }\n\n    // Start background rotation when game is playing\n    if (gameState && gameState.appPhase === 'playing') {\n      backgroundIntervalRef.current = setInterval(() => {\n        setCurrentBackgroundIndex((prevIndex) => \n          (prevIndex + 1) % BACKGROUND_IMAGES.length\n        );\n      }, BACKGROUND_CHANGE_INTERVAL);\n    }\n\n    return () => {\n      if (backgroundIntervalRef.current) {\n        clearInterval(backgroundIntervalRef.current);\n      }\n    };\n  }, [gameState?.appPhase]);\n\n  // Timer effect for gameplay\n  useEffect(() => {\n    if (gameState && gameState.appPhase === 'playing') {\n      if (!timerIntervalRef.current) {\n        const startTime = Date.now();\n        timerIntervalRef.current = setInterval(() => {\n          const elapsed = Math.floor((Date.now() - startTime) / 1000);\n          setElapsedTime(elapsed);\n          \n          // Update level based on time (every 30 seconds)\n          const newLevel = Math.max(1, Math.floor(elapsed / 30) + 1);\n          if (newLevel !== level) {\n            setLevel(newLevel);\n          }\n        }, 1000);\n      }\n    } else {\n      // Clear timer when not playing\n      if (timerIntervalRef.current) {\n        clearInterval(timerIntervalRef.current);\n        timerIntervalRef.current = null;\n      }\n      \n      // Reset timer and level when game ends\n      if (gameState && gameState.appPhase !== 'playing') {\n        setElapsedTime(0);\n        setLevel(1);\n      }\n    }\n    \n    return () => {\n      if (timerIntervalRef.current) {\n        clearInterval(timerIntervalRef.current);\n      }\n    };\n  }, [gameState?.appPhase, level]);\n\n  // Handle keydown events for gameplay\n  const handleKeyDown = useCallback((e) => {\n    if (!socket || !gameState || gameState.appPhase !== 'playing') return;\n\n    // Prevent default behavior for game controls\n    if (['ArrowLeft', 'ArrowRight', 'ArrowUp', 'ArrowDown', 'Space', 'KeyZ'].includes(e.code)) {\n      e.preventDefault();\n    }\n\n    // Only handle keys that aren't being repeated (except down)\n    if (!e.repeat || e.code === 'ArrowDown') {\n      switch (e.code) {\n        case 'ArrowLeft':\n          // First send immediate move, then start DAS\n          socket.emit('playerAction', { type: 'moveLeft' });\n          socket.emit('playerAction', { type: 'startDAS', direction: 'left' });\n          break;\n        case 'ArrowRight':\n          // First send immediate move, then start DAS\n          socket.emit('playerAction', { type: 'moveRight' });\n          socket.emit('playerAction', { type: 'startDAS', direction: 'right' });\n          break;\n        case 'ArrowUp':\n        case 'KeyZ':\n          socket.emit('playerAction', { type: 'rotate' });\n          break;\n        case 'ArrowDown':\n          socket.emit('playerAction', { type: 'softDrop' });\n          break;\n        case 'Space':\n          // guard against auto‑repeat when holding space\n          if (!hardDropActiveRef.current) {\n            socket.emit('playerAction', { type: 'hardDrop' });\n            hardDropActiveRef.current = true;\n          }\n          break;\n        default:\n          break;\n      }\n    }\n  }, [socket, gameState]);\n\n  // Handle keyup events to stop DAS (delayed auto-shift)\n  const handleKeyUp = useCallback((e) => {\n    if (!socket || !gameState || gameState.appPhase !== 'playing') return;\n    \n    switch (e.code) {\n      case 'ArrowLeft':\n      case 'ArrowRight':\n        socket.emit('playerAction', { type: 'stopDAS' });\n        break;\n      case 'Space':\n        hardDropActiveRef.current = false;\n        break;\n      default:\n        break;\n    }\n  }, [socket, gameState]);\n\n  // Add key event listeners\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown);\n    window.addEventListener('keyup', handleKeyUp);\n    \n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n      window.removeEventListener('keyup', handleKeyUp);\n    };\n  }, [handleKeyDown, handleKeyUp]);\n\n  // Create a room\n  const createRoom = useCallback((playerName) => {\n    if (socket) {\n      debugLog('events', 'Creating room with player name:', playerName);\n      socket.emit('createRoom', playerName);\n    }\n  }, [socket]);\n\n  // Join a room\n  const joinRoom = useCallback((roomCode, playerName) => {\n    if (socket) {\n      debugLog('events', `Joining room ${roomCode} with player name: ${playerName}`);\n      socket.emit('joinRoom', { roomCode, playerName });\n    }\n  }, [socket]);\n\n  // Leave a room\n  const leaveRoom = useCallback(() => {\n    if (socket) {\n      debugLog('events', 'Leaving room');\n      socket.emit('leaveRoom');\n    }\n  }, [socket]);\n\n  // Set player ready state\n  const setReady = useCallback((isReady) => {\n    if (socket) {\n      debugLog('events', `Setting ready state: ${isReady}`);\n      socket.emit('playerReady', isReady);\n    }\n  }, [socket]);\n\n  // Start the game (host only)\n  const startGame = useCallback(() => {\n    if (socket) {\n      debugLog('events', 'Starting game');\n      socket.emit('startGame');\n    }\n  }, [socket]);\n\n  // Show error message if there's a socket error\n  if (socketError) {\n    return (\n      <div className=\"App error-screen\">\n        <h1>Connection Error</h1>\n        <p>{socketError}</p>\n        <p>Please check that the server is running and the configuration is correct.</p>\n        <button\n          onClick={() => window.location.reload()}\n          style={{\n            padding: '10px 20px',\n            backgroundColor: '#FF5733',\n            border: 'none',\n            borderRadius: '4px',\n            color: 'white',\n            cursor: 'pointer',\n            marginTop: '20px'\n          }}\n        >\n          Retry Connection\n        </button>\n      </div>\n    );\n  }\n\n  // Show loading screen if no game state\n  if (!gameState) {\n    return <div className=\"App\"><h1>Waiting for game state...</h1></div>;\n  }\n\n  // Render appropriate screen based on app phase\n  return (\n    <div\n      className=\"App\"\n      style={{\n        ...(gameState.appPhase === 'playing' && {\n          backgroundImage: `url(${getCurrentBackgroundUrl()})`,\n          backgroundSize: 'cover',\n          backgroundPosition: 'center',\n        }),\n      }}\n    >\n      {gameState.appPhase === 'homescreen' && (\n        <NewHomeScreen\n          onCreateRoom={createRoom}\n          onJoinRoom={joinRoom}\n        />\n      )}\n      \n      {gameState.appPhase === 'readyscreen' && (\n        <ReadyScreen\n          gameState={gameState}\n          socketId={socket ? socket.id : null}\n          onReady={setReady}\n          onLeaveRoom={leaveRoom}\n          onStartGame={startGame}\n        />\n      )}\n      \n      {gameState.appPhase === 'playing' && (\n        <>\n          <BoardStage\n            board={gameState.board}\n            players={gameState.players}\n            socketId={socket ? socket.id : null}\n          />\n          <ScorePanel\n            score={currentScore}\n            lastScoreChange={lastScoreChange}\n            level={level}\n            time={elapsedTime}\n          />\n        </>\n      )}\n      \n      {gameState.appPhase === 'gameover' && (\n        <GameOverScreen\n          gameOverData={gameOverData}\n          onPlayAgain={() => {\n            setIsGameOver(false);\n            leaveRoom();\n          }}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}