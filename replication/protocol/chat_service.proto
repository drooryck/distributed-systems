syntax = "proto3";

// ========== RESPONSE MESSAGES ==========

message GenericResponse {
  string status = 1;  
  string msg = 2;
}

message LoginResponse {
  string auth_token = 1;
  string status     = 2;
  string msg        = 3;
  int32 unread_count = 4;
}

message CountUnreadResponse {
  string status = 1;
  string msg    = 2;
  int32 unread_count = 3;
}

message ChatMessage {
  int32 id       = 1;
  string sender  = 2;
  string content = 3;
}

message ListMessagesResponse {
  string status  = 1;
  string msg     = 2;
  repeated ChatMessage messages = 3;
  int32 total_count = 4;  // total # messages (for paging)
}

message UserRecord {
  int32 id = 1;
  string username = 2;
}

message ListAccountsResponse {
  string status = 1; 
  string msg    = 2; 
  repeated UserRecord users = 3;
}

message DeleteMessagesResponse {
  string status = 1;
  string msg    = 2;
  int32 deleted_count = 3;
}

// ========== REQUEST MESSAGES ==========

message SignupRequest {
  string username = 1;
  string password = 2;
}

message LoginRequest {
  string username = 1;
  string password = 2;
}

message EmptyRequest {
  string auth_token = 1;
}

message CountUnreadRequest {
  string auth_token = 1;
}

message SendMessageRequest {
  string auth_token = 1;
  string recipient  = 2;
  string content    = 3;
}

message ListMessagesRequest {
  string auth_token = 1;
  int32 start       = 2;
  int32 count       = 3;
}

message FetchAwayMsgsRequest {
  string auth_token = 1;
  int32 limit       = 2;
}

message ListAccountsRequest {
  string auth_token = 1;
  string pattern    = 2; 
  int32 start       = 3;
  int32 count       = 4;
}

message DeleteMessagesRequest {
  string auth_token = 1;
  repeated int32 message_ids_to_delete = 2;
}

message ReplicationRequest {
  string op_type   = 1;  // e.g. "CREATE_SESSION", "INSERT_MESSAGE"
  string sender    = 2;  // used for user creation, sending messages, etc.
  string recipient = 3;
  string content   = 4;
  string auth_token = 5;
  repeated int32 message_ids = 6;
}

// NEW: Heartbeat for leader election
message HeartbeatRequest {
  int32 leader_id = 1;  // ID of the node claiming leadership
  int32 server_id = 2;  // ID of the node sending the heartbeat
}

message HeartbeatResponse {
  string status = 1;
  string msg    = 2;
  int32 current_leader_id = 3; // for convenience: who this server thinks the leader is
}

// NEW: Cluster info for replication
message ServerInfo {
  int32 server_id = 1;
  string address = 2;
}

message ClusterInfoResponse {
  string status = 1;
  string msg = 2;
  repeated ServerInfo servers = 3;
}

// ========== SERVICE DEFINITION ==========

service ChatService {
  rpc Signup(SignupRequest) returns (GenericResponse);
  rpc Login(LoginRequest) returns (LoginResponse);
  rpc Logout(EmptyRequest) returns (GenericResponse);
  rpc CountUnread(CountUnreadRequest) returns (CountUnreadResponse);
  rpc SendMessage(SendMessageRequest) returns (GenericResponse);
  rpc ListMessages(ListMessagesRequest) returns (ListMessagesResponse);
  rpc FetchAwayMsgs(FetchAwayMsgsRequest) returns (ListMessagesResponse);
  rpc ListAccounts(ListAccountsRequest) returns (ListAccountsResponse);
  rpc DeleteMessages(DeleteMessagesRequest) returns (DeleteMessagesResponse);
  rpc DeleteAccount(EmptyRequest) returns (GenericResponse);
  rpc ResetDB(EmptyRequest) returns (GenericResponse);

  rpc Replicate(ReplicationRequest) returns (GenericResponse);

  // Heartbeat for leader election
  rpc Heartbeat(HeartbeatRequest) returns (HeartbeatResponse);

  // cluster info rpc
  rpc ClusterInfo(EmptyRequest) returns (ClusterInfoResponse);
}
