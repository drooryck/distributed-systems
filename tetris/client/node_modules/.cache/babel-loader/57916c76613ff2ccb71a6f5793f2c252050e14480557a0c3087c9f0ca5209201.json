{"ast":null,"code":"import{io}from'socket.io-client';/**\n * Connect to the cluster of servers with automatic leader discovery\n * Attempts to connect to each server in sequence until it finds the leader\n */export async function connectToCluster(){let initialUrl=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;try{// Load cluster configuration\nconst response=await fetch('/config.json');const config=await response.json();// Try the initial URL first (the one the user typed in browser)\nif(initialUrl){try{console.log(`Trying to connect to initial URL: ${initialUrl}`);const socket=io(initialUrl,{timeout:5000});const result=await new Promise((resolve,reject)=>{let timeoutId=setTimeout(()=>{socket.disconnect();reject(new Error(`Connection to ${initialUrl} timed out`));},5000);socket.on('connect',()=>{socket.emit('getLeaderInfo');});socket.on('leaderInfo',info=>{clearTimeout(timeoutId);if(info.isLeader){console.log(`Connected to leader at ${initialUrl}`);resolve({socket,redirect:false});}else if(info.leaderAddress){console.log(`Redirecting to leader at ${info.leaderAddress}`);socket.disconnect();resolve({socket:null,redirect:true,redirectTo:info.leaderAddress});}else{socket.disconnect();reject(new Error('No leader information available'));}});socket.on('connect_error',err=>{clearTimeout(timeoutId);socket.disconnect();reject(err);});});if(result.redirect){return io(result.redirectTo);}return result.socket;}catch(initialUrlError){console.warn('Failed to connect to initial URL:',initialUrlError);// Fall through to trying other servers\n}}// Try all configured servers in sequence\nconst serverUrls=config.clusterServers||[config.serverAddress||'http://localhost:3001'];for(const serverUrl of serverUrls){try{console.log(`Trying to connect to ${serverUrl}`);const socket=io(serverUrl,{timeout:3000});const result=await new Promise((resolve,reject)=>{let timeoutId=setTimeout(()=>{socket.disconnect();reject(new Error(`Connection to ${serverUrl} timed out`));},3000);socket.on('connect',()=>{socket.emit('getLeaderInfo');});socket.on('leaderInfo',info=>{clearTimeout(timeoutId);if(info.isLeader){console.log(`Connected to leader at ${serverUrl}`);resolve({socket,redirect:false});}else if(info.leaderAddress){console.log(`Redirecting to leader at ${info.leaderAddress}`);socket.disconnect();resolve({socket:null,redirect:true,redirectTo:info.leaderAddress});}else{socket.disconnect();reject(new Error('No leader information available'));}});socket.on('connect_error',err=>{clearTimeout(timeoutId);socket.disconnect();reject(err);});});if(result.redirect){return io(result.redirectTo);}return result.socket;}catch(error){console.warn(`Failed to connect to ${serverUrl}:`,error);// Continue trying next server\n}}throw new Error('Could not connect to any server in the cluster');}catch(error){console.error('Server discovery failed:',error);throw error;}}","map":{"version":3,"names":["io","connectToCluster","initialUrl","arguments","length","undefined","response","fetch","config","json","console","log","socket","timeout","result","Promise","resolve","reject","timeoutId","setTimeout","disconnect","Error","on","emit","info","clearTimeout","isLeader","redirect","leaderAddress","redirectTo","err","initialUrlError","warn","serverUrls","clusterServers","serverAddress","serverUrl","error"],"sources":["/Users/driesrooryck/Desktop/s25/distributed-systems/tetris/client/src/serverDiscovery.js"],"sourcesContent":["import { io } from 'socket.io-client';\n\n/**\n * Connect to the cluster of servers with automatic leader discovery\n * Attempts to connect to each server in sequence until it finds the leader\n */\nexport async function connectToCluster(initialUrl = null) {\n  try {\n    // Load cluster configuration\n    const response = await fetch('/config.json');\n    const config = await response.json();\n    \n    // Try the initial URL first (the one the user typed in browser)\n    if (initialUrl) {\n      try {\n        console.log(`Trying to connect to initial URL: ${initialUrl}`);\n        const socket = io(initialUrl, { timeout: 5000 });\n        \n        const result = await new Promise((resolve, reject) => {\n          let timeoutId = setTimeout(() => {\n            socket.disconnect();\n            reject(new Error(`Connection to ${initialUrl} timed out`));\n          }, 5000);\n          \n          socket.on('connect', () => {\n            socket.emit('getLeaderInfo');\n          });\n          \n          socket.on('leaderInfo', (info) => {\n            clearTimeout(timeoutId);\n            if (info.isLeader) {\n              console.log(`Connected to leader at ${initialUrl}`);\n              resolve({ socket, redirect: false });\n            } else if (info.leaderAddress) {\n              console.log(`Redirecting to leader at ${info.leaderAddress}`);\n              socket.disconnect();\n              resolve({ socket: null, redirect: true, redirectTo: info.leaderAddress });\n            } else {\n              socket.disconnect();\n              reject(new Error('No leader information available'));\n            }\n          });\n          \n          socket.on('connect_error', (err) => {\n            clearTimeout(timeoutId);\n            socket.disconnect();\n            reject(err);\n          });\n        });\n        \n        if (result.redirect) {\n          return io(result.redirectTo);\n        }\n        \n        return result.socket;\n      } catch (initialUrlError) {\n        console.warn('Failed to connect to initial URL:', initialUrlError);\n        // Fall through to trying other servers\n      }\n    }\n    \n    // Try all configured servers in sequence\n    const serverUrls = config.clusterServers || \n                       [config.serverAddress || 'http://localhost:3001'];\n    \n    for (const serverUrl of serverUrls) {\n      try {\n        console.log(`Trying to connect to ${serverUrl}`);\n        const socket = io(serverUrl, { timeout: 3000 });\n        \n        const result = await new Promise((resolve, reject) => {\n          let timeoutId = setTimeout(() => {\n            socket.disconnect();\n            reject(new Error(`Connection to ${serverUrl} timed out`));\n          }, 3000);\n          \n          socket.on('connect', () => {\n            socket.emit('getLeaderInfo');\n          });\n          \n          socket.on('leaderInfo', (info) => {\n            clearTimeout(timeoutId);\n            if (info.isLeader) {\n              console.log(`Connected to leader at ${serverUrl}`);\n              resolve({ socket, redirect: false });\n            } else if (info.leaderAddress) {\n              console.log(`Redirecting to leader at ${info.leaderAddress}`);\n              socket.disconnect();\n              resolve({ socket: null, redirect: true, redirectTo: info.leaderAddress });\n            } else {\n              socket.disconnect();\n              reject(new Error('No leader information available'));\n            }\n          });\n          \n          socket.on('connect_error', (err) => {\n            clearTimeout(timeoutId);\n            socket.disconnect();\n            reject(err);\n          });\n        });\n        \n        if (result.redirect) {\n          return io(result.redirectTo);\n        }\n        \n        return result.socket;\n      } catch (error) {\n        console.warn(`Failed to connect to ${serverUrl}:`, error);\n        // Continue trying next server\n      }\n    }\n    \n    throw new Error('Could not connect to any server in the cluster');\n  } catch (error) {\n    console.error('Server discovery failed:', error);\n    throw error;\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}