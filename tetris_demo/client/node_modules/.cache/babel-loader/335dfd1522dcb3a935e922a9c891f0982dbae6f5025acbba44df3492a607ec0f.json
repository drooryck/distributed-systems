{"ast":null,"code":"import React,{useEffect,useState,useCallback,useRef}from'react';import{io}from'socket.io-client';import BoardStage from'./BoardStage';import NewHomeScreen from'./NewHomeScreen';import ReadyScreen from'./ReadyScreen';import GameOverScreen from'./GameOverScreen';import ScorePanel from'./ScorePanel';import'./App.css';// Import session storage utilities\nimport{saveGameSession,getGameSession,clearGameSession}from'./utils/sessionStorage';// Background image configuration\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const BACKGROUND_IMAGES=['deep-tetris-color.jpg','tetris-1920-x-1080-background-hyihqau5t3lalo4e.png','tetris-2560-x-1600-background-3bjbi7nyulqbller.jpg'];const BACKGROUND_CHANGE_INTERVAL=30000;// 30 seconds\n// Load config file to get server address\nconst loadConfig=async()=>{try{const response=await fetch('/config.json');if(!response.ok){throw new Error(`Failed to load config: ${response.status}`);}return await response.json();}catch(error){console.warn('Error loading config, using default server address:',error);return{client:{serverAddress:'http://localhost:3001'}};}};// Add debug logger at the top of the file\nconst DEBUG={events:true,state:true,render:true};function debugLog(type,message,data){if(DEBUG[type]){console.log(`[DEBUG:${type}] ${message}`,data!==undefined?data:'');}}function App(){var _gameState$players,_gameState$players$so;const[socket,setSocket]=useState(null);const[gameState,setGameState]=useState(null);const[isGameOver,setIsGameOver]=useState(false);const[gameOverData,setGameOverData]=useState(null);const[isConnecting,setIsConnecting]=useState(true);const[error,setError]=useState(null);const[socketError,setSocketError]=useState(null);// Hard‐drop guard so holding space won't repeat\nconst hardDropActiveRef=useRef(false);// Add state for background rotation\nconst[currentBackgroundIndex,setCurrentBackgroundIndex]=useState(0);const backgroundIntervalRef=useRef(null);// Add state for timer and scoring\nconst[elapsedTime,setElapsedTime]=useState(0);const[currentScore,setCurrentScore]=useState(0);const[lastScoreChange,setLastScoreChange]=useState(0);const[level,setLevel]=useState(1);const timerIntervalRef=useRef(null);// Connect to socket on component mount\nuseEffect(()=>{const connectToServer=async()=>{try{var _config$client;setIsConnecting(true);// Load configuration\nconst config=await loadConfig();const serverAddress=(_config$client=config.client)===null||_config$client===void 0?void 0:_config$client.serverAddress;debugLog('events','Connecting to server:',serverAddress);// Create new socket connection\nconst newSocket=io(serverAddress);setSocket(newSocket);// Socket event handlers\nnewSocket.on('connect',()=>{debugLog('events','Socket connected with ID:',newSocket.id);setIsConnecting(false);setSocketError(null);// Check for saved session after reconnecting\nconst savedSession=getGameSession();if(savedSession&&savedSession.roomCode){debugLog('events','Found saved session. Attempting to rejoin room:',savedSession.roomCode);// Try to rejoin the room with saved session data\nnewSocket.emit('rejoinRoom',{roomCode:savedSession.roomCode,playerName:savedSession.playerName,previousSocketId:savedSession.socketId});}});newSocket.on('connect_error',err=>{debugLog('events','Connection error:',err.message);setSocketError(`Connection error: ${err.message}`);setIsConnecting(false);});// Handle initial state\nnewSocket.on('init',initialState=>{debugLog('events','Received init event with state:',initialState);setGameState(initialState);});// Add handler for successful room rejoin\nnewSocket.on('roomRejoined',data=>{var _data$gameState$playe;debugLog('events','Received roomRejoined event with data:',data);// Save the new session data with updated socket ID\nsaveGameSession({roomCode:data.roomCode,playerName:((_data$gameState$playe=data.gameState.players[newSocket.id])===null||_data$gameState$playe===void 0?void 0:_data$gameState$playe.name)||'Player',socketId:newSocket.id});// Update game state for player\nsetGameState(data.gameState);setError(null);});// Handle room creation - save session\nnewSocket.on('roomCreated',data=>{var _data$gameState$playe2;debugLog('events','Received roomCreated event with data:',data);// Save session data for automatic reconnection\nsaveGameSession({roomCode:data.roomCode,playerName:((_data$gameState$playe2=data.gameState.players[newSocket.id])===null||_data$gameState$playe2===void 0?void 0:_data$gameState$playe2.name)||'Player',socketId:newSocket.id});debugLog('state','Setting appPhase to readyscreen from:',gameState===null||gameState===void 0?void 0:gameState.appPhase);setGameState(prevState=>{const newState={...data.gameState,appPhase:'readyscreen'};debugLog('state','New gameState after roomCreated:',newState);return newState;});setError(null);});// Handle room join - save session\nnewSocket.on('roomJoined',data=>{var _data$gameState$playe3;debugLog('events','Received roomJoined event with data:',data);// Save session data for automatic reconnection\nsaveGameSession({roomCode:data.roomCode,playerName:((_data$gameState$playe3=data.gameState.players[newSocket.id])===null||_data$gameState$playe3===void 0?void 0:_data$gameState$playe3.name)||'Player',socketId:newSocket.id});debugLog('state','Setting appPhase to readyscreen from:',gameState===null||gameState===void 0?void 0:gameState.appPhase);setGameState(prevState=>{const newState={...data.gameState,appPhase:'readyscreen'};debugLog('state','New gameState after roomJoined:',newState);return newState;});setError(null);});// Handle leaving room - clear session\nnewSocket.on('roomLeft',data=>{debugLog('events','Received roomLeft event with data:',data);// Clear session data when leaving room\nclearGameSession();debugLog('state','Setting appPhase to homescreen from:',gameState===null||gameState===void 0?void 0:gameState.appPhase);setGameState(prevState=>{const newState={appPhase:'homescreen',socketId:newSocket.id};debugLog('state','New gameState after roomLeft:',newState);return newState;});});// Handle server disconnection for automatic reconnection\nnewSocket.on('disconnect',reason=>{debugLog('events',`Socket disconnected: ${reason}`);// If server crashed or closed, try to reconnect to new leader\nif(reason==='io server disconnect'||reason==='transport close'){debugLog('events','Server appears to be down, refreshing to connect to new leader');// Don't clear session, we'll use it to rejoin on reconnect\nsetTimeout(()=>{// Force reload to trigger redirect to new leader\nwindow.location.reload();},1000);}});// Handle server status updates\nnewSocket.on('server-status',status=>{debugLog('events',`Received server status update:`,status);if(status.isLeader){// Server declaring itself as leader - we're already connected to it\ndebugLog('events',`Connected to leader server ${status.serverId}`);}});// Handle errors\nnewSocket.on('error',_ref=>{let{message}=_ref;debugLog('events','Received server error:',message);setError(message);});// Handle game state updates\nnewSocket.on('gameState',newState=>{debugLog('events','Received gameState update with appPhase:',newState===null||newState===void 0?void 0:newState.appPhase);setGameState(prevState=>{// If we're showing a readyscreen from a room we just created or joined,\n// don't let a gameState event with homescreen override it\nif((prevState===null||prevState===void 0?void 0:prevState.appPhase)==='readyscreen'&&(newState===null||newState===void 0?void 0:newState.appPhase)==='homescreen'){debugLog('state','Ignoring homescreen gameState while in readyscreen');return prevState;}debugLog('state','Updating gameState from:',prevState===null||prevState===void 0?void 0:prevState.appPhase,'to:',newState===null||newState===void 0?void 0:newState.appPhase);return newState;});});// Handle game over - clear session\nnewSocket.on('gameOver',data=>{console.log('Game over with data:',data);// Clear session on game over\nclearGameSession();setIsGameOver(true);setGameOverData(data);});// Handle player joined notification\nnewSocket.on('playerJoined',_ref2=>{let{playerId,player,gameState}=_ref2;console.log(`Player joined: ${playerId}`);setGameState(gameState);});// Handle player left notification\nnewSocket.on('playerLeft',_ref3=>{let{playerId,gameState}=_ref3;console.log(`Player left: ${playerId}`);setGameState(gameState);});// Handle host assignment (when previous host leaves)\nnewSocket.on('hostAssigned',_ref4=>{let{gameState}=_ref4;console.log('You are now the host');setGameState(gameState);});// Return cleanup function\nreturn()=>{console.log('Disconnecting socket');newSocket.disconnect();};}catch(err){console.error('Error connecting to server:',err);setSocketError(`Error connecting to server: ${err.message}`);setIsConnecting(false);}};connectToServer();},[]);// Background rotation effect - only active during gameplay\nuseEffect(()=>{// Clear any existing background rotation interval\nif(backgroundIntervalRef.current){clearInterval(backgroundIntervalRef.current);backgroundIntervalRef.current=null;}// Start background rotation when game is playing\nif(gameState&&gameState.appPhase==='playing'){// Randomize starting background\nsetCurrentBackgroundIndex(Math.floor(Math.random()*BACKGROUND_IMAGES.length));// Set interval to rotate backgrounds\nbackgroundIntervalRef.current=setInterval(()=>{setCurrentBackgroundIndex(prevIndex=>(prevIndex+1)%BACKGROUND_IMAGES.length);},BACKGROUND_CHANGE_INTERVAL);}// Cleanup on unmount or phase change\nreturn()=>{if(backgroundIntervalRef.current){clearInterval(backgroundIntervalRef.current);backgroundIntervalRef.current=null;}};},[gameState===null||gameState===void 0?void 0:gameState.appPhase]);// Timer management based on game phase\nuseEffect(()=>{// Clean up the previous interval if it exists\nif(timerIntervalRef.current){clearInterval(timerIntervalRef.current);timerIntervalRef.current=null;}if(gameState&&gameState.appPhase==='playing'){// Reset the timer when game starts\nsetElapsedTime(0);setCurrentScore(0);setLastScoreChange(0);setLevel(1);// Start a new timer that updates every 10ms for centisecond precision\ntimerIntervalRef.current=setInterval(()=>{setElapsedTime(prevTime=>prevTime+10);},10);console.log('Timer started');}// Cleanup on unmount or phase change\nreturn()=>{if(timerIntervalRef.current){clearInterval(timerIntervalRef.current);timerIntervalRef.current=null;}};},[gameState===null||gameState===void 0?void 0:gameState.appPhase]);// Update the player list for display and track current player's score\nconst updatePlayerList=useCallback(players=>{if(!players||typeof players!=='object')return;// Map player data to what we need\nconst playerEntries=Object.entries(players);// Update current player score state for the score panel\nif(socket){const currentPlayerEntry=playerEntries.find(_ref5=>{let[id]=_ref5;return id===socket.id;});if(currentPlayerEntry){const[,currentPlayer]=currentPlayerEntry;// Update score if changed\nif(currentPlayer.score!==currentScore){const scoreChange=Math.max(0,currentPlayer.score-currentScore);if(scoreChange>0){setLastScoreChange(scoreChange);// Reset the score change highlight after 1 second\nsetTimeout(()=>setLastScoreChange(0),1000);}setCurrentScore(currentPlayer.score);}// Update level if changed\nif(currentPlayer.level&&currentPlayer.level!==level){setLevel(currentPlayer.level);}}}},[currentScore,level,socket]);// Keyboard control handlers\nuseEffect(()=>{if(!socket||!gameState)return;const handleKeyDown=e=>{// Only process key events if game is in progress\nif(gameState.appPhase==='playing'){switch(e.code){case'ArrowLeft':// First send immediate move, then start DAS\nsocket.emit('playerAction',{type:'moveLeft'});socket.emit('playerAction',{type:'startDAS',direction:'left'});break;case'ArrowRight':// First send immediate move, then start DAS\nsocket.emit('playerAction',{type:'moveRight'});socket.emit('playerAction',{type:'startDAS',direction:'right'});break;case'ArrowUp':case'KeyZ':socket.emit('playerAction',{type:'rotate'});break;case'ArrowDown':socket.emit('playerAction',{type:'softDrop'});break;case'Space':// guard against auto‑repeat when holding space\nif(!hardDropActiveRef.current){socket.emit('playerAction',{type:'hardDrop'});hardDropActiveRef.current=true;}break;default:break;}}else if(gameState.appPhase==='readyscreen'){// Handle ready toggle on X key press\nif(e.code==='KeyX'){const isCurrentlyReady=gameState.readyPlayers&&gameState.readyPlayers.includes(socket.id);console.log('X key pressed, toggling ready state:',!isCurrentlyReady);socket.emit('playerReady',!isCurrentlyReady);}}};const handleKeyUp=e=>{// Only process key events if game is in progress\nif(gameState.appPhase==='playing'){switch(e.code){case'ArrowLeft':case'ArrowRight':socket.emit('playerAction',{type:'endDAS'});break;case'ArrowDown':socket.emit('playerAction',{type:'endSoftDrop'});break;case'Space':// re‑enable hardDrop once key is released\nhardDropActiveRef.current=false;break;default:break;}}};window.addEventListener('keydown',handleKeyDown);window.addEventListener('keyup',handleKeyUp);return()=>{window.removeEventListener('keydown',handleKeyDown);window.removeEventListener('keyup',handleKeyUp);};},[socket,gameState]);// Room management handlers\nconst handleCreateRoom=useCallback(playerName=>{if(socket){socket.emit('createRoom',playerName);}},[socket]);const handleJoinRoom=useCallback((roomCode,playerName)=>{if(socket){socket.emit('joinRoom',{roomCode,playerName});}},[socket]);const handleLeaveRoom=useCallback(()=>{if(socket){socket.emit('leaveRoom');}},[socket]);// Handle player ready state\nconst handlePlayerReady=useCallback(isReady=>{if(socket){socket.emit('playerReady',isReady);}},[socket]);// Handle game start\nconst handleStartGame=useCallback(()=>{if(socket){socket.emit('startGame');}},[socket]);// Handle game mode change\nconst handleSetGameMode=useCallback(mode=>{if(socket){socket.emit('setGameMode',mode);}},[socket]);// Handle game over timeout\nconst handleGameOverTimeout=useCallback(()=>{setIsGameOver(false);setGameOverData(null);},[]);// Get the current background image URL\nconst getCurrentBackgroundUrl=()=>{if(!BACKGROUND_IMAGES.length)return null;return`${process.env.PUBLIC_URL}/backgrounds/${BACKGROUND_IMAGES[currentBackgroundIndex]}`;};// Show loading or error screen\nif(isConnecting){return/*#__PURE__*/_jsx(\"div\",{className:\"App\",children:/*#__PURE__*/_jsx(\"h1\",{children:\"Connecting to server...\"})});}if(socketError){return/*#__PURE__*/_jsxs(\"div\",{className:\"App\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Connection Error\"}),/*#__PURE__*/_jsx(\"p\",{children:socketError}),/*#__PURE__*/_jsx(\"p\",{children:\"Please check that the server is running and the configuration is correct.\"}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>window.location.reload(),style:{padding:'10px 20px',backgroundColor:'#FF5733',border:'none',borderRadius:'4px',color:'white',cursor:'pointer',marginTop:'20px'},children:\"Retry Connection\"})]});}// Show loading screen if no game state\nif(!gameState){return/*#__PURE__*/_jsx(\"div\",{className:\"App\",children:/*#__PURE__*/_jsx(\"h1\",{children:\"Waiting for game state...\"})});}// Render appropriate screen based on app phase\nreturn/*#__PURE__*/_jsxs(\"div\",{className:\"App\",style:{...(gameState.appPhase==='playing'&&{backgroundImage:`url(${getCurrentBackgroundUrl()})`,backgroundSize:'cover',backgroundPosition:'center',transition:'background-image 1s ease-in-out',minHeight:'100vh'})},tabIndex:\"0\",children:[gameState.appPhase==='homescreen'&&/*#__PURE__*/_jsx(NewHomeScreen,{onCreateRoom:handleCreateRoom,onJoinRoom:handleJoinRoom,error:error}),gameState.appPhase==='readyscreen'&&/*#__PURE__*/_jsx(ReadyScreen,{roomCode:gameState.roomCode,players:gameState.players||{},currentPlayerId:socket===null||socket===void 0?void 0:socket.id,readyPlayers:gameState.readyPlayers||[],onReady:handlePlayerReady,onStartGame:handleStartGame,onLeaveRoom:handleLeaveRoom,onSetGameMode:handleSetGameMode,gameMode:gameState.gameMode,gameInProgress:gameState.gameInProgress,isHost:(_gameState$players=gameState.players)===null||_gameState$players===void 0?void 0:(_gameState$players$so=_gameState$players[socket===null||socket===void 0?void 0:socket.id])===null||_gameState$players$so===void 0?void 0:_gameState$players$so.isHost}),gameState.appPhase==='playing'&&/*#__PURE__*/_jsxs(\"div\",{style:{backgroundColor:'rgba(0, 0, 0, 0.8)',backdropFilter:'blur(5px)',padding:'20px',borderRadius:'10px',margin:'10px auto',maxWidth:'900px'},children:[/*#__PURE__*/_jsxs(\"div\",{style:{display:'flex',justifyContent:'space-between',alignItems:'center',marginBottom:'15px'},children:[/*#__PURE__*/_jsx(\"h1\",{style:{margin:0,fontSize:'28px',color:'#fff'},children:\"Tetristributed\"}),/*#__PURE__*/_jsxs(\"div\",{style:{display:'flex',alignItems:'center',gap:'15px'},children:[/*#__PURE__*/_jsxs(\"div\",{style:{fontSize:'14px',backgroundColor:'#444',padding:'5px 10px',borderRadius:'4px',display:'flex',flexDirection:'column',alignItems:'center'},children:[/*#__PURE__*/_jsx(\"span\",{style:{fontSize:'10px',color:'#aaa'},children:\"ROOM\"}),/*#__PURE__*/_jsx(\"span\",{style:{fontWeight:'bold'},children:gameState.roomCode})]}),/*#__PURE__*/_jsxs(\"div\",{style:{fontSize:'14px',backgroundColor:'#333',padding:'5px 10px',borderRadius:'4px'},children:[\"Player: \",(socket===null||socket===void 0?void 0:socket.id)&&socket.id.substring(0,4)]})]})]}),/*#__PURE__*/_jsxs(\"div\",{style:{display:'flex',gap:'20px'},children:[/*#__PURE__*/_jsx(\"div\",{style:{display:'flex',flexDirection:'column',alignItems:'center'},children:/*#__PURE__*/_jsx(BoardStage,{board:gameState.board||[],players:gameState.players||{},linesToClear:gameState.linesToClear||[]})}),/*#__PURE__*/_jsxs(\"div\",{style:{display:'flex',flexDirection:'column',minWidth:'220px'},children:[/*#__PURE__*/_jsx(ScorePanel,{score:currentScore,level:level,lastScoreChange:lastScoreChange,elapsedTime:elapsedTime}),/*#__PURE__*/_jsxs(\"div\",{style:{backgroundColor:'rgba(40, 40, 40, 0.9)',padding:'12px',borderRadius:'8px',marginTop:'15px'},children:[/*#__PURE__*/_jsx(\"h2\",{style:{margin:'0 0 10px 0',fontSize:'18px',color:'#ccc'},children:\"Players\"}),/*#__PURE__*/_jsx(\"ul\",{style:{listStyle:'none',padding:0,margin:0},children:Object.entries(gameState.players||{}).map(_ref6=>{let[id,player]=_ref6;const isCurrentPlayer=id===(socket===null||socket===void 0?void 0:socket.id);const shortId=id.substring(0,4);return/*#__PURE__*/_jsx(\"li\",{style:{margin:'6px 0',padding:'8px',backgroundColor:isCurrentPlayer?'#444':'#333',borderLeft:`4px solid ${player.color||'#ccc'}`,borderRadius:'4px',transition:'background-color 0.3s'},children:/*#__PURE__*/_jsxs(\"div\",{style:{display:'flex',alignItems:'center',justifyContent:'space-between'},children:[/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"span\",{style:{fontWeight:isCurrentPlayer?'bold':'normal',color:isCurrentPlayer?'#fff':'#ccc'},children:player.name||`Player ${player.playerNumber||shortId}`}),isCurrentPlayer&&/*#__PURE__*/_jsx(\"span\",{style:{fontSize:'12px',marginLeft:'5px',color:'#ffcc00'},children:\"(You)\"})]}),/*#__PURE__*/_jsx(\"div\",{style:{backgroundColor:'#222',padding:'2px 6px',borderRadius:'3px',fontSize:'14px',fontWeight:'bold'},children:player.score||0})]})},id);})}),/*#__PURE__*/_jsxs(\"div\",{style:{marginTop:'15px',padding:'8px',backgroundColor:'#222',borderRadius:'4px',textAlign:'center'},children:[/*#__PURE__*/_jsx(\"div\",{style:{fontSize:'12px',color:'#aaa'},children:\"GAME MODE\"}),/*#__PURE__*/_jsx(\"div\",{style:{fontSize:'16px',fontWeight:'bold',marginTop:'4px'},children:gameState.gameMode||'Classic'})]})]}),/*#__PURE__*/_jsxs(\"div\",{style:{backgroundColor:'rgba(40, 40, 40, 0.7)',padding:'12px',borderRadius:'8px',marginTop:'15px',fontSize:'12px',color:'#aaa'},children:[/*#__PURE__*/_jsx(\"div\",{style:{marginBottom:'5px',fontWeight:'bold',color:'#ccc'},children:\"Controls:\"}),/*#__PURE__*/_jsx(\"div\",{children:\"\\u2190 \\u2192 : Move\"}),/*#__PURE__*/_jsx(\"div\",{children:\"\\u2193 : Soft Drop\"}),/*#__PURE__*/_jsx(\"div\",{children:\"\\u2191 / Z : Rotate\"}),/*#__PURE__*/_jsx(\"div\",{children:\"Space : Hard Drop\"})]})]})]})]}),isGameOver&&gameOverData&&/*#__PURE__*/_jsx(GameOverScreen,{gameOverData:gameOverData,currentPlayerId:socket===null||socket===void 0?void 0:socket.id,onTimeout:handleGameOverTimeout})]});}export default App;","map":{"version":3,"names":["React","useEffect","useState","useCallback","useRef","io","BoardStage","NewHomeScreen","ReadyScreen","GameOverScreen","ScorePanel","saveGameSession","getGameSession","clearGameSession","jsx","_jsx","jsxs","_jsxs","BACKGROUND_IMAGES","BACKGROUND_CHANGE_INTERVAL","loadConfig","response","fetch","ok","Error","status","json","error","console","warn","client","serverAddress","DEBUG","events","state","render","debugLog","type","message","data","log","undefined","App","_gameState$players","_gameState$players$so","socket","setSocket","gameState","setGameState","isGameOver","setIsGameOver","gameOverData","setGameOverData","isConnecting","setIsConnecting","setError","socketError","setSocketError","hardDropActiveRef","currentBackgroundIndex","setCurrentBackgroundIndex","backgroundIntervalRef","elapsedTime","setElapsedTime","currentScore","setCurrentScore","lastScoreChange","setLastScoreChange","level","setLevel","timerIntervalRef","connectToServer","_config$client","config","newSocket","on","id","savedSession","roomCode","emit","playerName","previousSocketId","socketId","err","initialState","_data$gameState$playe","players","name","_data$gameState$playe2","appPhase","prevState","newState","_data$gameState$playe3","reason","setTimeout","window","location","reload","isLeader","serverId","_ref","_ref2","playerId","player","_ref3","_ref4","disconnect","current","clearInterval","Math","floor","random","length","setInterval","prevIndex","prevTime","updatePlayerList","playerEntries","Object","entries","currentPlayerEntry","find","_ref5","currentPlayer","score","scoreChange","max","handleKeyDown","e","code","direction","isCurrentlyReady","readyPlayers","includes","handleKeyUp","addEventListener","removeEventListener","handleCreateRoom","handleJoinRoom","handleLeaveRoom","handlePlayerReady","isReady","handleStartGame","handleSetGameMode","mode","handleGameOverTimeout","getCurrentBackgroundUrl","process","env","PUBLIC_URL","className","children","onClick","style","padding","backgroundColor","border","borderRadius","color","cursor","marginTop","backgroundImage","backgroundSize","backgroundPosition","transition","minHeight","tabIndex","onCreateRoom","onJoinRoom","currentPlayerId","onReady","onStartGame","onLeaveRoom","onSetGameMode","gameMode","gameInProgress","isHost","backdropFilter","margin","maxWidth","display","justifyContent","alignItems","marginBottom","fontSize","gap","flexDirection","fontWeight","substring","board","linesToClear","minWidth","listStyle","map","_ref6","isCurrentPlayer","shortId","borderLeft","playerNumber","marginLeft","textAlign","onTimeout"],"sources":["/Users/driesrooryck/Desktop/s25/new_try/distributed-systems/tetris/client/src/App.js"],"sourcesContent":["import React, { useEffect, useState, useCallback, useRef } from 'react';\nimport { io } from 'socket.io-client';\nimport BoardStage from './BoardStage';\nimport NewHomeScreen from './NewHomeScreen';\nimport ReadyScreen from './ReadyScreen';\nimport GameOverScreen from './GameOverScreen';\nimport ScorePanel from './ScorePanel';\nimport './App.css';\n\n// Import session storage utilities\nimport { saveGameSession, getGameSession, clearGameSession } from './utils/sessionStorage';\n\n// Background image configuration\nconst BACKGROUND_IMAGES = [\n  'deep-tetris-color.jpg',\n  'tetris-1920-x-1080-background-hyihqau5t3lalo4e.png',\n  'tetris-2560-x-1600-background-3bjbi7nyulqbller.jpg',\n];\nconst BACKGROUND_CHANGE_INTERVAL = 30000; // 30 seconds\n\n// Load config file to get server address\nconst loadConfig = async () => {\n  try {\n    const response = await fetch('/config.json');\n    if (!response.ok) {\n      throw new Error(`Failed to load config: ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.warn('Error loading config, using default server address:', error);\n    return { client: { serverAddress: 'http://localhost:3001' } };\n  }\n};\n\n// Add debug logger at the top of the file\nconst DEBUG = {\n  events: true,\n  state: true,\n  render: true\n};\n\nfunction debugLog(type, message, data) {\n  if (DEBUG[type]) {\n    console.log(`[DEBUG:${type}] ${message}`, data !== undefined ? data : '');\n  }\n}\n\nfunction App() {\n  const [socket, setSocket] = useState(null);\n  const [gameState, setGameState] = useState(null);\n  const [isGameOver, setIsGameOver] = useState(false);\n  const [gameOverData, setGameOverData] = useState(null);\n  const [isConnecting, setIsConnecting] = useState(true);\n  const [error, setError] = useState(null);\n  const [socketError, setSocketError] = useState(null);\n\n  // Hard‐drop guard so holding space won't repeat\n  const hardDropActiveRef = useRef(false);\n\n  // Add state for background rotation\n  const [currentBackgroundIndex, setCurrentBackgroundIndex] = useState(0);\n  const backgroundIntervalRef = useRef(null);\n\n  // Add state for timer and scoring\n  const [elapsedTime, setElapsedTime] = useState(0);\n  const [currentScore, setCurrentScore] = useState(0);\n  const [lastScoreChange, setLastScoreChange] = useState(0);\n  const [level, setLevel] = useState(1);\n  const timerIntervalRef = useRef(null);\n\n  // Connect to socket on component mount\n  useEffect(() => {\n    const connectToServer = async () => {\n      try {\n        setIsConnecting(true);\n\n        // Load configuration\n        const config = await loadConfig();\n        const serverAddress = config.client?.serverAddress;\n\n        debugLog('events', 'Connecting to server:', serverAddress);\n\n        // Create new socket connection\n        const newSocket = io(serverAddress);\n        setSocket(newSocket);\n\n        // Socket event handlers\n        newSocket.on('connect', () => {\n          debugLog('events', 'Socket connected with ID:', newSocket.id);\n          setIsConnecting(false);\n          setSocketError(null);\n          \n          // Check for saved session after reconnecting\n          const savedSession = getGameSession();\n          if (savedSession && savedSession.roomCode) {\n            debugLog('events', 'Found saved session. Attempting to rejoin room:', savedSession.roomCode);\n            \n            // Try to rejoin the room with saved session data\n            newSocket.emit('rejoinRoom', {\n              roomCode: savedSession.roomCode,\n              playerName: savedSession.playerName,\n              previousSocketId: savedSession.socketId\n            });\n          }\n        });\n\n        newSocket.on('connect_error', (err) => {\n          debugLog('events', 'Connection error:', err.message);\n          setSocketError(`Connection error: ${err.message}`);\n          setIsConnecting(false);\n        });\n\n        // Handle initial state\n        newSocket.on('init', (initialState) => {\n          debugLog('events', 'Received init event with state:', initialState);\n          setGameState(initialState);\n        });\n        \n        // Add handler for successful room rejoin\n        newSocket.on('roomRejoined', (data) => {\n          debugLog('events', 'Received roomRejoined event with data:', data);\n          \n          // Save the new session data with updated socket ID\n          saveGameSession({\n            roomCode: data.roomCode,\n            playerName: data.gameState.players[newSocket.id]?.name || 'Player',\n            socketId: newSocket.id\n          });\n          \n          // Update game state for player\n          setGameState(data.gameState);\n          setError(null);\n        });\n        \n        // Handle room creation - save session\n        newSocket.on('roomCreated', (data) => {\n          debugLog('events', 'Received roomCreated event with data:', data);\n          \n          // Save session data for automatic reconnection\n          saveGameSession({\n            roomCode: data.roomCode,\n            playerName: data.gameState.players[newSocket.id]?.name || 'Player',\n            socketId: newSocket.id\n          });\n          \n          debugLog('state', 'Setting appPhase to readyscreen from:', gameState?.appPhase);\n          setGameState(prevState => {\n            const newState = {\n              ...data.gameState,\n              appPhase: 'readyscreen'\n            };\n            debugLog('state', 'New gameState after roomCreated:', newState);\n            return newState;\n          });\n          setError(null);\n        });\n        \n        // Handle room join - save session\n        newSocket.on('roomJoined', (data) => {\n          debugLog('events', 'Received roomJoined event with data:', data);\n          \n          // Save session data for automatic reconnection\n          saveGameSession({\n            roomCode: data.roomCode,\n            playerName: data.gameState.players[newSocket.id]?.name || 'Player',\n            socketId: newSocket.id\n          });\n          \n          debugLog('state', 'Setting appPhase to readyscreen from:', gameState?.appPhase);\n          setGameState(prevState => {\n            const newState = {\n              ...data.gameState,\n              appPhase: 'readyscreen'\n            };\n            debugLog('state', 'New gameState after roomJoined:', newState);\n            return newState;\n          });\n          setError(null);\n        });\n        \n        // Handle leaving room - clear session\n        newSocket.on('roomLeft', (data) => {\n          debugLog('events', 'Received roomLeft event with data:', data);\n          \n          // Clear session data when leaving room\n          clearGameSession();\n          \n          debugLog('state', 'Setting appPhase to homescreen from:', gameState?.appPhase);\n          setGameState(prevState => {\n            const newState = {\n              appPhase: 'homescreen',\n              socketId: newSocket.id\n            };\n            debugLog('state', 'New gameState after roomLeft:', newState);\n            return newState;\n          });\n        });\n        \n        // Handle server disconnection for automatic reconnection\n        newSocket.on('disconnect', (reason) => {\n          debugLog('events', `Socket disconnected: ${reason}`);\n          \n          // If server crashed or closed, try to reconnect to new leader\n          if (reason === 'io server disconnect' || reason === 'transport close') {\n            debugLog('events', 'Server appears to be down, refreshing to connect to new leader');\n            \n            // Don't clear session, we'll use it to rejoin on reconnect\n            setTimeout(() => {\n              // Force reload to trigger redirect to new leader\n              window.location.reload();\n            }, 1000);\n          }\n        });\n        \n        // Handle server status updates\n        newSocket.on('server-status', (status) => {\n          debugLog('events', `Received server status update:`, status);\n          \n          if (status.isLeader) {\n            // Server declaring itself as leader - we're already connected to it\n            debugLog('events', `Connected to leader server ${status.serverId}`);\n          }\n        });\n        \n        // Handle errors\n        newSocket.on('error', ({ message }) => {\n          debugLog('events', 'Received server error:', message);\n          setError(message);\n        });\n\n        // Handle game state updates\n        newSocket.on('gameState', (newState) => {\n          debugLog('events', 'Received gameState update with appPhase:', newState?.appPhase);\n          setGameState(prevState => {\n            // If we're showing a readyscreen from a room we just created or joined,\n            // don't let a gameState event with homescreen override it\n            if (prevState?.appPhase === 'readyscreen' && newState?.appPhase === 'homescreen') {\n              debugLog('state', 'Ignoring homescreen gameState while in readyscreen');\n              return prevState;\n            }\n            debugLog('state', 'Updating gameState from:', prevState?.appPhase, 'to:', newState?.appPhase);\n            return newState;\n          });\n        });\n\n        // Handle game over - clear session\n        newSocket.on('gameOver', (data) => {\n          console.log('Game over with data:', data);\n          \n          // Clear session on game over\n          clearGameSession();\n          \n          setIsGameOver(true);\n          setGameOverData(data);\n        });\n        \n        // Handle player joined notification\n        newSocket.on('playerJoined', ({ playerId, player, gameState }) => {\n          console.log(`Player joined: ${playerId}`);\n          setGameState(gameState);\n        });\n        \n        // Handle player left notification\n        newSocket.on('playerLeft', ({ playerId, gameState }) => {\n          console.log(`Player left: ${playerId}`);\n          setGameState(gameState);\n        });\n        \n        // Handle host assignment (when previous host leaves)\n        newSocket.on('hostAssigned', ({ gameState }) => {\n          console.log('You are now the host');\n          setGameState(gameState);\n        });\n\n        // Return cleanup function\n        return () => {\n          console.log('Disconnecting socket');\n          newSocket.disconnect();\n        };\n      } catch (err) {\n        console.error('Error connecting to server:', err);\n        setSocketError(`Error connecting to server: ${err.message}`);\n        setIsConnecting(false);\n      }\n    };\n\n    connectToServer();\n  }, []);\n\n  // Background rotation effect - only active during gameplay\n  useEffect(() => {\n    // Clear any existing background rotation interval\n    if (backgroundIntervalRef.current) {\n      clearInterval(backgroundIntervalRef.current);\n      backgroundIntervalRef.current = null;\n    }\n\n    // Start background rotation when game is playing\n    if (gameState && gameState.appPhase === 'playing') {\n      // Randomize starting background\n      setCurrentBackgroundIndex(Math.floor(Math.random() * BACKGROUND_IMAGES.length));\n\n      // Set interval to rotate backgrounds\n      backgroundIntervalRef.current = setInterval(() => {\n        setCurrentBackgroundIndex(prevIndex =>\n          (prevIndex + 1) % BACKGROUND_IMAGES.length\n        );\n      }, BACKGROUND_CHANGE_INTERVAL);\n    }\n\n    // Cleanup on unmount or phase change\n    return () => {\n      if (backgroundIntervalRef.current) {\n        clearInterval(backgroundIntervalRef.current);\n        backgroundIntervalRef.current = null;\n      }\n    };\n  }, [gameState?.appPhase]);\n\n  // Timer management based on game phase\n  useEffect(() => {\n    // Clean up the previous interval if it exists\n    if (timerIntervalRef.current) {\n      clearInterval(timerIntervalRef.current);\n      timerIntervalRef.current = null;\n    }\n\n    if (gameState && gameState.appPhase === 'playing') {\n      // Reset the timer when game starts\n      setElapsedTime(0);\n      setCurrentScore(0);\n      setLastScoreChange(0);\n      setLevel(1);\n\n      // Start a new timer that updates every 10ms for centisecond precision\n      timerIntervalRef.current = setInterval(() => {\n        setElapsedTime(prevTime => prevTime + 10);\n      }, 10);\n\n      console.log('Timer started');\n    }\n\n    // Cleanup on unmount or phase change\n    return () => {\n      if (timerIntervalRef.current) {\n        clearInterval(timerIntervalRef.current);\n        timerIntervalRef.current = null;\n      }\n    };\n  }, [gameState?.appPhase]);\n\n  // Update the player list for display and track current player's score\n  const updatePlayerList = useCallback((players) => {\n    if (!players || typeof players !== 'object') return;\n\n    // Map player data to what we need\n    const playerEntries = Object.entries(players);\n\n    // Update current player score state for the score panel\n    if (socket) {\n      const currentPlayerEntry = playerEntries.find(([id]) => id === socket.id);\n      if (currentPlayerEntry) {\n        const [, currentPlayer] = currentPlayerEntry;\n\n        // Update score if changed\n        if (currentPlayer.score !== currentScore) {\n          const scoreChange = Math.max(0, currentPlayer.score - currentScore);\n          if (scoreChange > 0) {\n            setLastScoreChange(scoreChange);\n            // Reset the score change highlight after 1 second\n            setTimeout(() => setLastScoreChange(0), 1000);\n          }\n          setCurrentScore(currentPlayer.score);\n        }\n\n        // Update level if changed\n        if (currentPlayer.level && currentPlayer.level !== level) {\n          setLevel(currentPlayer.level);\n        }\n      }\n    }\n  }, [currentScore, level, socket]);\n\n  // Keyboard control handlers\n  useEffect(() => {\n    if (!socket || !gameState) return;\n\n    const handleKeyDown = (e) => {\n      // Only process key events if game is in progress\n      if (gameState.appPhase === 'playing') {\n        switch (e.code) {\n          case 'ArrowLeft':\n            // First send immediate move, then start DAS\n            socket.emit('playerAction', { type: 'moveLeft' });\n            socket.emit('playerAction', { type: 'startDAS', direction: 'left' });\n            break;\n          case 'ArrowRight':\n            // First send immediate move, then start DAS\n            socket.emit('playerAction', { type: 'moveRight' });\n            socket.emit('playerAction', { type: 'startDAS', direction: 'right' });\n            break;\n          case 'ArrowUp':\n          case 'KeyZ':\n            socket.emit('playerAction', { type: 'rotate' });\n            break;\n          case 'ArrowDown':\n            socket.emit('playerAction', { type: 'softDrop' });\n            break;\n          case 'Space':\n            // guard against auto‑repeat when holding space\n            if (!hardDropActiveRef.current) {\n              socket.emit('playerAction', { type: 'hardDrop' });\n              hardDropActiveRef.current = true;\n            }\n            break;\n          default:\n            break;\n        }\n      } else if (gameState.appPhase === 'readyscreen') {\n        // Handle ready toggle on X key press\n        if (e.code === 'KeyX') {\n          const isCurrentlyReady = gameState.readyPlayers && \n            gameState.readyPlayers.includes(socket.id);\n          console.log('X key pressed, toggling ready state:', !isCurrentlyReady);\n          socket.emit('playerReady', !isCurrentlyReady);\n        }\n      }\n    };\n\n    const handleKeyUp = (e) => {\n      // Only process key events if game is in progress\n      if (gameState.appPhase === 'playing') {\n        switch (e.code) {\n          case 'ArrowLeft':\n          case 'ArrowRight':\n            socket.emit('playerAction', { type: 'endDAS' });\n            break;\n          case 'ArrowDown':\n            socket.emit('playerAction', { type: 'endSoftDrop' });\n            break;\n          case 'Space':\n            // re‑enable hardDrop once key is released\n            hardDropActiveRef.current = false;\n            break;\n          default:\n            break;\n        }\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyDown);\n    window.addEventListener('keyup', handleKeyUp);\n\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n      window.removeEventListener('keyup', handleKeyUp);\n    };\n  }, [socket, gameState]);\n\n  // Room management handlers\n  const handleCreateRoom = useCallback((playerName) => {\n    if (socket) {\n      socket.emit('createRoom', playerName);\n    }\n  }, [socket]);\n  \n  const handleJoinRoom = useCallback((roomCode, playerName) => {\n    if (socket) {\n      socket.emit('joinRoom', { roomCode, playerName });\n    }\n  }, [socket]);\n  \n  const handleLeaveRoom = useCallback(() => {\n    if (socket) {\n      socket.emit('leaveRoom');\n    }\n  }, [socket]);\n\n  // Handle player ready state\n  const handlePlayerReady = useCallback((isReady) => {\n    if (socket) {\n      socket.emit('playerReady', isReady);\n    }\n  }, [socket]);\n\n  // Handle game start\n  const handleStartGame = useCallback(() => {\n    if (socket) {\n      socket.emit('startGame');\n    }\n  }, [socket]);\n\n  // Handle game mode change\n  const handleSetGameMode = useCallback((mode) => {\n    if (socket) {\n      socket.emit('setGameMode', mode);\n    }\n  }, [socket]);\n\n  // Handle game over timeout\n  const handleGameOverTimeout = useCallback(() => {\n    setIsGameOver(false);\n    setGameOverData(null);\n  }, []);\n\n  // Get the current background image URL\n  const getCurrentBackgroundUrl = () => {\n    if (!BACKGROUND_IMAGES.length) return null;\n    return `${process.env.PUBLIC_URL}/backgrounds/${BACKGROUND_IMAGES[currentBackgroundIndex]}`;\n  };\n\n  // Show loading or error screen\n  if (isConnecting) {\n    return <div className=\"App\"><h1>Connecting to server...</h1></div>;\n  }\n\n  if (socketError) {\n    return (\n      <div className=\"App\">\n        <h1>Connection Error</h1>\n        <p>{socketError}</p>\n        <p>Please check that the server is running and the configuration is correct.</p>\n        <button\n          onClick={() => window.location.reload()}\n          style={{\n            padding: '10px 20px',\n            backgroundColor: '#FF5733',\n            border: 'none',\n            borderRadius: '4px',\n            color: 'white',\n            cursor: 'pointer',\n            marginTop: '20px'\n          }}\n        >\n          Retry Connection\n        </button>\n      </div>\n    );\n  }\n\n  // Show loading screen if no game state\n  if (!gameState) {\n    return <div className=\"App\"><h1>Waiting for game state...</h1></div>;\n  }\n\n  // Render appropriate screen based on app phase\n  return (\n    <div\n      className=\"App\"\n      style={{\n        ...(gameState.appPhase === 'playing' && {\n          backgroundImage: `url(${getCurrentBackgroundUrl()})`,\n          backgroundSize: 'cover',\n          backgroundPosition: 'center',\n          transition: 'background-image 1s ease-in-out',\n          minHeight: '100vh'\n        })\n      }}\n      tabIndex=\"0\"\n    >\n      {gameState.appPhase === 'homescreen' && (\n        <NewHomeScreen\n          onCreateRoom={handleCreateRoom}\n          onJoinRoom={handleJoinRoom}\n          error={error}\n        />\n      )}\n      \n      {gameState.appPhase === 'readyscreen' && (\n        <ReadyScreen\n          roomCode={gameState.roomCode}\n          players={gameState.players || {}}\n          currentPlayerId={socket?.id}\n          readyPlayers={gameState.readyPlayers || []}\n          onReady={handlePlayerReady}\n          onStartGame={handleStartGame}\n          onLeaveRoom={handleLeaveRoom}\n          onSetGameMode={handleSetGameMode}\n          gameMode={gameState.gameMode}\n          gameInProgress={gameState.gameInProgress}\n          isHost={gameState.players?.[socket?.id]?.isHost}\n        />\n      )}\n\n      {gameState.appPhase === 'playing' && (\n        <div style={{\n          backgroundColor: 'rgba(0, 0, 0, 0.8)',\n          backdropFilter: 'blur(5px)',\n          padding: '20px',\n          borderRadius: '10px',\n          margin: '10px auto',\n          maxWidth: '900px'\n        }}>\n          <div style={{\n            display: 'flex',\n            justifyContent: 'space-between',\n            alignItems: 'center',\n            marginBottom: '15px'\n          }}>\n            <h1 style={{ margin: 0, fontSize: '28px', color: '#fff' }}>Tetristributed</h1>\n            <div style={{\n              display: 'flex',\n              alignItems: 'center',\n              gap: '15px'\n            }}>\n              <div style={{\n                fontSize: '14px',\n                backgroundColor: '#444',\n                padding: '5px 10px',\n                borderRadius: '4px',\n                display: 'flex',\n                flexDirection: 'column',\n                alignItems: 'center'\n              }}>\n                <span style={{fontSize: '10px', color: '#aaa'}}>ROOM</span>\n                <span style={{fontWeight: 'bold'}}>{gameState.roomCode}</span>\n              </div>\n              <div style={{\n                fontSize: '14px',\n                backgroundColor: '#333',\n                padding: '5px 10px',\n                borderRadius: '4px'\n              }}>\n                Player: {socket?.id && socket.id.substring(0, 4)}\n              </div>\n            </div>\n          </div>\n\n          <div style={{ display: 'flex', gap: '20px' }}>\n            <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n              <BoardStage\n                board={gameState.board || []}\n                players={gameState.players || {}}\n                linesToClear={gameState.linesToClear || []}\n              />\n            </div>\n\n            <div style={{\n              display: 'flex',\n              flexDirection: 'column',\n              minWidth: '220px'\n            }}>\n              {/* Integrated Score Panel with Timer */}\n              <ScorePanel\n                score={currentScore}\n                level={level}\n                lastScoreChange={lastScoreChange}\n                elapsedTime={elapsedTime}\n              />\n\n              {/* Players List */}\n              <div style={{\n                backgroundColor: 'rgba(40, 40, 40, 0.9)',\n                padding: '12px',\n                borderRadius: '8px',\n                marginTop: '15px'\n              }}>\n                <h2 style={{ margin: '0 0 10px 0', fontSize: '18px', color: '#ccc' }}>Players</h2>\n                <ul style={{ listStyle: 'none', padding: 0, margin: 0 }}>\n                  {Object.entries(gameState.players || {}).map(([id, player]) => {\n                    const isCurrentPlayer = id === socket?.id;\n                    const shortId = id.substring(0, 4);\n\n                    return (\n                      <li\n                        key={id}\n                        style={{\n                          margin: '6px 0',\n                          padding: '8px',\n                          backgroundColor: isCurrentPlayer ? '#444' : '#333',\n                          borderLeft: `4px solid ${player.color || '#ccc'}`,\n                          borderRadius: '4px',\n                          transition: 'background-color 0.3s'\n                        }}\n                      >\n                        <div style={{\n                          display: 'flex',\n                          alignItems: 'center',\n                          justifyContent: 'space-between'\n                        }}>\n                          <div>\n                            <span style={{\n                              fontWeight: isCurrentPlayer ? 'bold' : 'normal',\n                              color: isCurrentPlayer ? '#fff' : '#ccc'\n                            }}>\n                              {player.name || `Player ${player.playerNumber || shortId}`}\n                            </span>\n                            {isCurrentPlayer && <span style={{\n                              fontSize: '12px',\n                              marginLeft: '5px',\n                              color: '#ffcc00'\n                            }}>\n                              (You)\n                            </span>}\n                          </div>\n                          <div style={{\n                            backgroundColor: '#222',\n                            padding: '2px 6px',\n                            borderRadius: '3px',\n                            fontSize: '14px',\n                            fontWeight: 'bold'\n                          }}>\n                            {player.score || 0}\n                          </div>\n                        </div>\n                      </li>\n                    );\n                  })}\n                </ul>\n\n                <div style={{\n                  marginTop: '15px',\n                  padding: '8px',\n                  backgroundColor: '#222',\n                  borderRadius: '4px',\n                  textAlign: 'center'\n                }}>\n                  <div style={{ fontSize: '12px', color: '#aaa' }}>GAME MODE</div>\n                  <div style={{ fontSize: '16px', fontWeight: 'bold', marginTop: '4px' }}>\n                    {gameState.gameMode || 'Classic'}\n                  </div>\n                </div>\n              </div>\n\n              {/* Controls Help */}\n              <div style={{\n                backgroundColor: 'rgba(40, 40, 40, 0.7)',\n                padding: '12px',\n                borderRadius: '8px',\n                marginTop: '15px',\n                fontSize: '12px',\n                color: '#aaa'\n              }}>\n                <div style={{ marginBottom: '5px', fontWeight: 'bold', color: '#ccc' }}>Controls:</div>\n                <div>← → : Move</div>\n                <div>↓ : Soft Drop</div>\n                <div>↑ / Z : Rotate</div>\n                <div>Space : Hard Drop</div>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {isGameOver && gameOverData && (\n        <GameOverScreen\n          gameOverData={gameOverData}\n          currentPlayerId={socket?.id}\n          onTimeout={handleGameOverTimeout}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}