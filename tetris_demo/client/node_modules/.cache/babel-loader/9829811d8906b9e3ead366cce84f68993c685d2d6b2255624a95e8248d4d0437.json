{"ast":null,"code":"var _jsxFileName = \"/Users/driesrooryck/Desktop/s25/distributed-systems/tetris/client/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useCallback, useRef } from 'react';\nimport { io } from 'socket.io-client';\nimport BoardStage from './BoardStage';\nimport HomeScreen from './HomeScreen';\nimport GameOverScreen from './GameOverScreen';\nimport ScorePanel from './ScorePanel';\n\n// Background image configuration\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BACKGROUND_IMAGES = ['deep-tetris-color.jpg', 'tetris-1920-x-1080-background-hyihqau5t3lalo4e.png', 'tetris-2560-x-1600-background-3bjbi7nyulqbller.jpg'];\nconst BACKGROUND_CHANGE_INTERVAL = 30000; // 30 seconds\n\n// Load config file to get server address\nconst loadConfig = async () => {\n  try {\n    console.log('Attempting to load config.json...');\n    const response = await fetch('/config.json');\n    if (!response.ok) {\n      console.warn(`Config file fetch failed with status: ${response.status}`);\n      throw new Error(`Failed to load config: ${response.status}`);\n    }\n    const config = await response.json();\n    console.log('Config loaded successfully:', config);\n    return config;\n  } catch (error) {\n    console.warn('Error loading config, using default server address:', error);\n    // Try to detect if we're running on a network\n    const hostname = window.location.hostname;\n    const defaultServer = hostname === 'localhost' ? 'http://localhost:3001' : `http://${hostname}:3001`;\n    console.log(`Using default server address: ${defaultServer}`);\n    return {\n      client: {\n        serverAddress: defaultServer\n      }\n    };\n  }\n};\nfunction App() {\n  _s();\n  var _gameState$players, _gameState$players$so;\n  const [socket, setSocket] = useState(null);\n  const [gameState, setGameState] = useState(null);\n  const [isGameOver, setIsGameOver] = useState(false);\n  const [gameOverData, setGameOverData] = useState(null);\n  const [isConnecting, setIsConnecting] = useState(true);\n  const [connectionAttempts, setConnectionAttempts] = useState(0);\n  const [error, setError] = useState(null);\n\n  // Add state for background rotation\n  const [currentBackgroundIndex, setCurrentBackgroundIndex] = useState(0);\n  const backgroundIntervalRef = useRef(null);\n\n  // Add state for timer and scoring\n  const [elapsedTime, setElapsedTime] = useState(0);\n  const [currentScore, setCurrentScore] = useState(0);\n  const [lastScoreChange, setLastScoreChange] = useState(0);\n  const [level, setLevel] = useState(1);\n  const timerIntervalRef = useRef(null);\n\n  // Function to retry connection\n  const retryConnection = useCallback(() => {\n    setIsConnecting(true);\n    setError(null);\n    setConnectionAttempts(prev => prev + 1);\n  }, []);\n\n  // Connect to socket on component mount\n  useEffect(() => {\n    const connectToServer = async () => {\n      try {\n        var _config$client;\n        setIsConnecting(true);\n\n        // Load configuration\n        const config = await loadConfig();\n        const serverAddress = ((_config$client = config.client) === null || _config$client === void 0 ? void 0 : _config$client.serverAddress) || 'http://localhost:3001';\n        console.log(`Attempting to connect to server at: ${serverAddress} (Attempt ${connectionAttempts + 1})`);\n\n        // Create new socket connection with explicit timeout\n        const newSocket = io(serverAddress, {\n          reconnectionAttempts: 3,\n          timeout: 5000,\n          reconnection: true,\n          reconnectionDelay: 1000,\n          reconnectionDelayMax: 5000\n        });\n\n        // Set a connection timeout\n        const timeoutId = setTimeout(() => {\n          if (newSocket && !newSocket.connected) {\n            console.error('Connection timeout');\n            newSocket.disconnect();\n            setError(`Connection timed out. Server may be down at ${serverAddress}`);\n            setIsConnecting(false);\n          }\n        }, 8000);\n\n        // Socket event handlers\n        newSocket.on('connect', () => {\n          console.log('Connected to server successfully!');\n          clearTimeout(timeoutId);\n          setSocket(newSocket);\n          setIsConnecting(false);\n          setConnectionAttempts(0);\n        });\n        newSocket.on('connect_error', err => {\n          console.error('Socket connection error:', err);\n          clearTimeout(timeoutId);\n          setError(`Unable to connect to server: ${err.message}`);\n          setIsConnecting(false);\n        });\n\n        // Rest of your socket event handlers...\n        newSocket.on('init', initialState => {\n          console.log('Received initial game state:', initialState);\n          setGameState(initialState);\n          updatePlayerList(initialState.players || {});\n        });\n\n        // Socket disconnection handler\n        newSocket.on('disconnect', reason => {\n          console.warn(`Socket disconnected: ${reason}`);\n          if (reason === 'io server disconnect' || reason === 'transport close') {\n            setError(`Server connection lost: ${reason}. Please refresh the page.`);\n          }\n        });\n\n        // Return cleanup function\n        return () => {\n          console.log('Cleaning up socket connection');\n          clearTimeout(timeoutId);\n          if (newSocket) {\n            newSocket.disconnect();\n          }\n        };\n      } catch (err) {\n        console.error('Error in connection process:', err);\n        setError(`Connection error: ${err.message}. Please check if the server is running.`);\n        setIsConnecting(false);\n      }\n    };\n    connectToServer();\n  }, [connectionAttempts]); // Added connectionAttempts as dependency for retry functionality\n\n  // Background rotation effect - only active during gameplay\n  useEffect(() => {\n    // Clear any existing background rotation interval\n    if (backgroundIntervalRef.current) {\n      clearInterval(backgroundIntervalRef.current);\n      backgroundIntervalRef.current = null;\n    }\n\n    // Start background rotation when game is playing\n    if (gameState && gameState.appPhase === 'playing') {\n      // Randomize starting background\n      setCurrentBackgroundIndex(Math.floor(Math.random() * BACKGROUND_IMAGES.length));\n\n      // Set interval to rotate backgrounds\n      backgroundIntervalRef.current = setInterval(() => {\n        setCurrentBackgroundIndex(prevIndex => (prevIndex + 1) % BACKGROUND_IMAGES.length);\n      }, BACKGROUND_CHANGE_INTERVAL);\n    }\n\n    // Cleanup on unmount or phase change\n    return () => {\n      if (backgroundIntervalRef.current) {\n        clearInterval(backgroundIntervalRef.current);\n        backgroundIntervalRef.current = null;\n      }\n    };\n  }, [gameState === null || gameState === void 0 ? void 0 : gameState.appPhase]);\n\n  // Timer management based on game phase\n  useEffect(() => {\n    // Clean up the previous interval if it exists\n    if (timerIntervalRef.current) {\n      clearInterval(timerIntervalRef.current);\n      timerIntervalRef.current = null;\n    }\n    if (gameState && gameState.appPhase === 'playing') {\n      // Reset the timer when game starts\n      setElapsedTime(0);\n      setCurrentScore(0);\n      setLastScoreChange(0);\n      setLevel(1);\n\n      // Start a new timer that updates every 10ms for centisecond precision\n      timerIntervalRef.current = setInterval(() => {\n        setElapsedTime(prevTime => prevTime + 10);\n      }, 10);\n      console.log('Timer started');\n    }\n\n    // Cleanup on unmount or phase change\n    return () => {\n      if (timerIntervalRef.current) {\n        clearInterval(timerIntervalRef.current);\n        timerIntervalRef.current = null;\n      }\n    };\n  }, [gameState === null || gameState === void 0 ? void 0 : gameState.appPhase]);\n\n  // Update the player list for display and track current player's score\n  const updatePlayerList = useCallback(players => {\n    if (!players || typeof players !== 'object') return;\n\n    // Map player data to what we need\n    const playerEntries = Object.entries(players);\n\n    // Update current player score state for the score panel\n    if (socket) {\n      const currentPlayerEntry = playerEntries.find(([id]) => id === socket.id);\n      if (currentPlayerEntry) {\n        const [, currentPlayer] = currentPlayerEntry;\n\n        // Update score if changed\n        if (currentPlayer.score !== currentScore) {\n          const scoreChange = Math.max(0, currentPlayer.score - currentScore);\n          if (scoreChange > 0) {\n            setLastScoreChange(scoreChange);\n            // Reset the score change highlight after 1 second\n            setTimeout(() => setLastScoreChange(0), 1000);\n          }\n          setCurrentScore(currentPlayer.score);\n        }\n\n        // Update level if changed\n        if (currentPlayer.level && currentPlayer.level !== level) {\n          setLevel(currentPlayer.level);\n        }\n      }\n    }\n  }, [currentScore, level, socket]);\n\n  // Keyboard control handlers\n  useEffect(() => {\n    if (!socket || !gameState) return;\n    const handleKeyDown = e => {\n      // Only process key events if game is in progress\n      if (gameState.appPhase === 'playing') {\n        switch (e.code) {\n          case 'ArrowLeft':\n            // First send immediate move, then start DAS\n            socket.emit('playerAction', {\n              type: 'moveLeft'\n            });\n            socket.emit('playerAction', {\n              type: 'startDAS',\n              direction: 'left'\n            });\n            break;\n          case 'ArrowRight':\n            // First send immediate move, then start DAS\n            socket.emit('playerAction', {\n              type: 'moveRight'\n            });\n            socket.emit('playerAction', {\n              type: 'startDAS',\n              direction: 'right'\n            });\n            break;\n          case 'ArrowUp':\n          case 'KeyZ':\n            socket.emit('playerAction', {\n              type: 'rotate'\n            });\n            break;\n          case 'ArrowDown':\n            socket.emit('playerAction', {\n              type: 'softDrop'\n            });\n            break;\n          case 'Space':\n            socket.emit('playerAction', {\n              type: 'hardDrop'\n            });\n            break;\n          default:\n            break;\n        }\n      } else if (gameState.appPhase === 'homescreen') {\n        // Handle ready toggle on X key press\n        if (e.code === 'KeyX') {\n          const isCurrentlyReady = gameState.readyPlayers.includes(socket.id);\n          console.log('X key pressed, toggling ready state:', !isCurrentlyReady);\n          socket.emit('playerReady', !isCurrentlyReady);\n        }\n      }\n    };\n    const handleKeyUp = e => {\n      // Only process key events if game is in progress\n      if (gameState.appPhase === 'playing') {\n        switch (e.code) {\n          case 'ArrowLeft':\n          case 'ArrowRight':\n            socket.emit('playerAction', {\n              type: 'endDAS'\n            });\n            break;\n          case 'ArrowDown':\n            socket.emit('playerAction', {\n              type: 'endSoftDrop'\n            });\n            break;\n          default:\n            break;\n        }\n      }\n    };\n    window.addEventListener('keydown', handleKeyDown);\n    window.addEventListener('keyup', handleKeyUp);\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n      window.removeEventListener('keyup', handleKeyUp);\n    };\n  }, [socket, gameState]);\n\n  // Handle player ready state\n  const handlePlayerReady = useCallback(isReady => {\n    if (socket) {\n      socket.emit('playerReady', isReady);\n    }\n  }, [socket]);\n\n  // Handle game start\n  const handleStartGame = useCallback(() => {\n    if (socket) {\n      socket.emit('startGame');\n    }\n  }, [socket]);\n\n  // Handle game mode change\n  const handleSetGameMode = useCallback(mode => {\n    if (socket) {\n      socket.emit('setGameMode', mode);\n    }\n  }, [socket]);\n\n  // Handle game over timeout\n  const handleGameOverTimeout = useCallback(() => {\n    setIsGameOver(false);\n    setGameOverData(null);\n  }, []);\n\n  // Get the current background image URL\n  const getCurrentBackgroundUrl = () => {\n    if (!BACKGROUND_IMAGES.length) return null;\n    return `${process.env.PUBLIC_URL}/backgrounds/${BACKGROUND_IMAGES[currentBackgroundIndex]}`;\n  };\n\n  // Show loading or error screen\n\n  // Show loading or error screen with improved UI\n  if (isConnecting) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      style: {\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n        height: '100vh',\n        backgroundColor: '#282c34',\n        color: 'white'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Connecting to Tetris server...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 357,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginTop: '20px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            width: '50px',\n            height: '50px',\n            border: '5px solid #f3f3f3',\n            borderTop: '5px solid #3498db',\n            borderRadius: '50%',\n            animation: 'spin 1s linear infinite'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 359,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"style\", {\n          children: `\n            @keyframes spin {\n              0% { transform: rotate(0deg); }\n              100% { transform: rotate(360deg); }\n            }\n          `\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 367,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 348,\n      columnNumber: 7\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      style: {\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n        height: '100vh',\n        backgroundColor: '#282c34',\n        color: 'white',\n        padding: '20px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Connection Error\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 391,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          backgroundColor: 'rgba(255,0,0,0.1)',\n          border: '1px solid #ff6b6b',\n          borderRadius: '5px',\n          padding: '20px',\n          marginTop: '20px',\n          maxWidth: '600px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            marginBottom: '10px'\n          },\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 400,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Troubleshooting steps:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 401,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          style: {\n            textAlign: 'left'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Make sure the Tetris server is running\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 403,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Check that your network allows WebSocket connections\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 404,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Verify your config.json file has the correct server address\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 405,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 402,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 392,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: retryConnection,\n        style: {\n          padding: '10px 20px',\n          backgroundColor: '#3498db',\n          border: 'none',\n          borderRadius: '4px',\n          color: 'white',\n          cursor: 'pointer',\n          marginTop: '20px',\n          fontSize: '16px'\n        },\n        children: \"Retry Connection\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 408,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 381,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Show loading screen if no game state\n  if (!gameState) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Waiting for game state...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 429,\n        columnNumber: 33\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 429,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Home screen or game screen based on app phase\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    style: {\n      // Apply background image only during gameplay\n      ...(gameState.appPhase === 'playing' && {\n        backgroundImage: `url(${getCurrentBackgroundUrl()})`,\n        backgroundSize: 'cover',\n        backgroundPosition: 'center',\n        transition: 'background-image 1s ease-in-out',\n        minHeight: '100vh'\n      })\n    },\n    tabIndex: \"0\",\n    children: [gameState.appPhase === 'homescreen' && /*#__PURE__*/_jsxDEV(HomeScreen, {\n      players: gameState.players || {},\n      currentPlayerId: socket === null || socket === void 0 ? void 0 : socket.id,\n      readyPlayers: gameState.readyPlayers || [],\n      onReady: handlePlayerReady,\n      onStartGame: handleStartGame,\n      onSetGameMode: handleSetGameMode,\n      gameMode: gameState.gameMode,\n      gameInProgress: gameState.gameInProgress,\n      isRejoining: (_gameState$players = gameState.players) === null || _gameState$players === void 0 ? void 0 : (_gameState$players$so = _gameState$players[socket === null || socket === void 0 ? void 0 : socket.id]) === null || _gameState$players$so === void 0 ? void 0 : _gameState$players$so.isRejoining\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 449,\n      columnNumber: 9\n    }, this), gameState.appPhase === 'playing' && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        backgroundColor: 'rgba(0, 0, 0, 0.8)',\n        backdropFilter: 'blur(5px)',\n        padding: '20px',\n        borderRadius: '10px',\n        margin: '10px auto',\n        maxWidth: '900px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          justifyContent: 'space-between',\n          alignItems: 'center',\n          marginBottom: '15px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          style: {\n            margin: 0,\n            fontSize: '28px',\n            color: '#fff'\n          },\n          children: \"Tetristributed\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 477,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            fontSize: '14px',\n            backgroundColor: '#333',\n            padding: '5px 10px',\n            borderRadius: '4px'\n          },\n          children: [\"Player: \", (socket === null || socket === void 0 ? void 0 : socket.id) && socket.id.substring(0, 4)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 478,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 471,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          gap: '20px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center'\n          },\n          children: /*#__PURE__*/_jsxDEV(BoardStage, {\n            board: gameState.board || [],\n            players: gameState.players || {},\n            linesToClear: gameState.linesToClear || []\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 490,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 489,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            flexDirection: 'column',\n            minWidth: '220px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(ScorePanel, {\n            score: currentScore,\n            level: level,\n            lastScoreChange: lastScoreChange,\n            elapsedTime: elapsedTime\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 503,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              backgroundColor: 'rgba(40, 40, 40, 0.9)',\n              padding: '12px',\n              borderRadius: '8px',\n              marginTop: '15px'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              style: {\n                margin: '0 0 10px 0',\n                fontSize: '18px',\n                color: '#ccc'\n              },\n              children: \"Players\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 517,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n              style: {\n                listStyle: 'none',\n                padding: 0,\n                margin: 0\n              },\n              children: Object.entries(gameState.players || {}).map(([id, player]) => {\n                const isCurrentPlayer = id === (socket === null || socket === void 0 ? void 0 : socket.id);\n                const shortId = id.substring(0, 4);\n                return /*#__PURE__*/_jsxDEV(\"li\", {\n                  style: {\n                    margin: '6px 0',\n                    padding: '8px',\n                    backgroundColor: isCurrentPlayer ? '#444' : '#333',\n                    borderLeft: `4px solid ${player.color || '#ccc'}`,\n                    borderRadius: '4px',\n                    transition: 'background-color 0.3s'\n                  },\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    style: {\n                      display: 'flex',\n                      alignItems: 'center',\n                      justifyContent: 'space-between'\n                    },\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                        style: {\n                          fontWeight: isCurrentPlayer ? 'bold' : 'normal',\n                          color: isCurrentPlayer ? '#fff' : '#ccc'\n                        },\n                        children: [\"Player \", player.playerNumber || shortId]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 541,\n                        columnNumber: 29\n                      }, this), isCurrentPlayer && /*#__PURE__*/_jsxDEV(\"span\", {\n                        style: {\n                          fontSize: '12px',\n                          marginLeft: '5px',\n                          color: '#ffcc00'\n                        },\n                        children: \"(You)\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 547,\n                        columnNumber: 49\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 540,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      style: {\n                        backgroundColor: '#222',\n                        padding: '2px 6px',\n                        borderRadius: '3px',\n                        fontSize: '14px',\n                        fontWeight: 'bold'\n                      },\n                      children: player.score || 0\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 555,\n                      columnNumber: 27\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 535,\n                    columnNumber: 25\n                  }, this)\n                }, id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 524,\n                  columnNumber: 23\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 518,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                marginTop: '15px',\n                padding: '8px',\n                backgroundColor: '#222',\n                borderRadius: '4px',\n                textAlign: 'center'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  fontSize: '12px',\n                  color: '#aaa'\n                },\n                children: \"GAME MODE\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 577,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  fontSize: '16px',\n                  fontWeight: 'bold',\n                  marginTop: '4px'\n                },\n                children: gameState.gameMode || 'Classic'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 578,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 570,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 511,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              backgroundColor: 'rgba(40, 40, 40, 0.7)',\n              padding: '12px',\n              borderRadius: '8px',\n              marginTop: '15px',\n              fontSize: '12px',\n              color: '#aaa'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                marginBottom: '5px',\n                fontWeight: 'bold',\n                color: '#ccc'\n              },\n              children: \"Controls:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 593,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: \"\\u2190 \\u2192 : Move\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 594,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: \"\\u2193 : Soft Drop\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 595,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: \"\\u2191 / Z : Rotate\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 596,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: \"Space : Hard Drop\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 597,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 585,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 497,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 488,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 463,\n      columnNumber: 9\n    }, this), isGameOver && gameOverData && /*#__PURE__*/_jsxDEV(GameOverScreen, {\n      gameOverData: gameOverData,\n      onTimeout: handleGameOverTimeout\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 605,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 434,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"NBH0Fre129UoLbTZXSfxrhJZKxQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","useCallback","useRef","io","BoardStage","HomeScreen","GameOverScreen","ScorePanel","jsxDEV","_jsxDEV","BACKGROUND_IMAGES","BACKGROUND_CHANGE_INTERVAL","loadConfig","console","log","response","fetch","ok","warn","status","Error","config","json","error","hostname","window","location","defaultServer","client","serverAddress","App","_s","_gameState$players","_gameState$players$so","socket","setSocket","gameState","setGameState","isGameOver","setIsGameOver","gameOverData","setGameOverData","isConnecting","setIsConnecting","connectionAttempts","setConnectionAttempts","setError","currentBackgroundIndex","setCurrentBackgroundIndex","backgroundIntervalRef","elapsedTime","setElapsedTime","currentScore","setCurrentScore","lastScoreChange","setLastScoreChange","level","setLevel","timerIntervalRef","retryConnection","prev","connectToServer","_config$client","newSocket","reconnectionAttempts","timeout","reconnection","reconnectionDelay","reconnectionDelayMax","timeoutId","setTimeout","connected","disconnect","on","clearTimeout","err","message","initialState","updatePlayerList","players","reason","current","clearInterval","appPhase","Math","floor","random","length","setInterval","prevIndex","prevTime","playerEntries","Object","entries","currentPlayerEntry","find","id","currentPlayer","score","scoreChange","max","handleKeyDown","e","code","emit","type","direction","isCurrentlyReady","readyPlayers","includes","handleKeyUp","addEventListener","removeEventListener","handlePlayerReady","isReady","handleStartGame","handleSetGameMode","mode","handleGameOverTimeout","getCurrentBackgroundUrl","process","env","PUBLIC_URL","className","style","display","flexDirection","justifyContent","alignItems","height","backgroundColor","color","children","fileName","_jsxFileName","lineNumber","columnNumber","marginTop","width","border","borderTop","borderRadius","animation","padding","maxWidth","marginBottom","textAlign","onClick","cursor","fontSize","backgroundImage","backgroundSize","backgroundPosition","transition","minHeight","tabIndex","currentPlayerId","onReady","onStartGame","onSetGameMode","gameMode","gameInProgress","isRejoining","backdropFilter","margin","substring","gap","board","linesToClear","minWidth","listStyle","map","player","isCurrentPlayer","shortId","borderLeft","fontWeight","playerNumber","marginLeft","onTimeout","_c","$RefreshReg$"],"sources":["/Users/driesrooryck/Desktop/s25/distributed-systems/tetris/client/src/App.js"],"sourcesContent":["import React, { useEffect, useState, useCallback, useRef } from 'react';\nimport { io } from 'socket.io-client';\nimport BoardStage from './BoardStage';\nimport HomeScreen from './HomeScreen';\nimport GameOverScreen from './GameOverScreen';\nimport ScorePanel from './ScorePanel';\n\n// Background image configuration\nconst BACKGROUND_IMAGES = [\n  'deep-tetris-color.jpg',\n  'tetris-1920-x-1080-background-hyihqau5t3lalo4e.png',\n  'tetris-2560-x-1600-background-3bjbi7nyulqbller.jpg',\n];\nconst BACKGROUND_CHANGE_INTERVAL = 30000; // 30 seconds\n\n// Load config file to get server address\nconst loadConfig = async () => {\n  try {\n    console.log('Attempting to load config.json...');\n    const response = await fetch('/config.json');\n    if (!response.ok) {\n      console.warn(`Config file fetch failed with status: ${response.status}`);\n      throw new Error(`Failed to load config: ${response.status}`);\n    }\n    const config = await response.json();\n    console.log('Config loaded successfully:', config);\n    return config;\n  } catch (error) {\n    console.warn('Error loading config, using default server address:', error);\n    // Try to detect if we're running on a network\n    const hostname = window.location.hostname;\n    const defaultServer = hostname === 'localhost' ? \n      'http://localhost:3001' : \n      `http://${hostname}:3001`;\n    \n    console.log(`Using default server address: ${defaultServer}`);\n    return { client: { serverAddress: defaultServer } };\n  }\n};\n\nfunction App() {\n  const [socket, setSocket] = useState(null);\n  const [gameState, setGameState] = useState(null);\n  const [isGameOver, setIsGameOver] = useState(false);\n  const [gameOverData, setGameOverData] = useState(null);\n  const [isConnecting, setIsConnecting] = useState(true);\n  const [connectionAttempts, setConnectionAttempts] = useState(0);\n  const [error, setError] = useState(null);\n  \n  // Add state for background rotation\n  const [currentBackgroundIndex, setCurrentBackgroundIndex] = useState(0);\n  const backgroundIntervalRef = useRef(null);\n  \n  // Add state for timer and scoring\n  const [elapsedTime, setElapsedTime] = useState(0);\n  const [currentScore, setCurrentScore] = useState(0);\n  const [lastScoreChange, setLastScoreChange] = useState(0);\n  const [level, setLevel] = useState(1);\n  const timerIntervalRef = useRef(null);\n\n  // Function to retry connection\n  const retryConnection = useCallback(() => {\n    setIsConnecting(true);\n    setError(null);\n    setConnectionAttempts(prev => prev + 1);\n  }, []);\n  \n  // Connect to socket on component mount\n  useEffect(() => {\n    const connectToServer = async () => {\n      try {\n        setIsConnecting(true);\n        \n        // Load configuration\n        const config = await loadConfig();\n        const serverAddress = config.client?.serverAddress || 'http://localhost:3001';\n        \n        console.log(`Attempting to connect to server at: ${serverAddress} (Attempt ${connectionAttempts + 1})`);\n        \n        // Create new socket connection with explicit timeout\n        const newSocket = io(serverAddress, {\n          reconnectionAttempts: 3,\n          timeout: 5000,\n          reconnection: true,\n          reconnectionDelay: 1000,\n          reconnectionDelayMax: 5000,\n        });\n        \n        // Set a connection timeout\n        const timeoutId = setTimeout(() => {\n          if (newSocket && !newSocket.connected) {\n            console.error('Connection timeout');\n            newSocket.disconnect();\n            setError(`Connection timed out. Server may be down at ${serverAddress}`);\n            setIsConnecting(false);\n          }\n        }, 8000);\n        \n        // Socket event handlers\n        newSocket.on('connect', () => {\n          console.log('Connected to server successfully!');\n          clearTimeout(timeoutId);\n          setSocket(newSocket);\n          setIsConnecting(false);\n          setConnectionAttempts(0);\n        });\n        \n        newSocket.on('connect_error', (err) => {\n          console.error('Socket connection error:', err);\n          clearTimeout(timeoutId);\n          setError(`Unable to connect to server: ${err.message}`);\n          setIsConnecting(false);\n        });\n        \n        // Rest of your socket event handlers...\n        newSocket.on('init', (initialState) => {\n          console.log('Received initial game state:', initialState);\n          setGameState(initialState);\n          updatePlayerList(initialState.players || {});\n        });\n        \n        // Socket disconnection handler\n        newSocket.on('disconnect', (reason) => {\n          console.warn(`Socket disconnected: ${reason}`);\n          if (reason === 'io server disconnect' || reason === 'transport close') {\n            setError(`Server connection lost: ${reason}. Please refresh the page.`);\n          }\n        });\n        \n        // Return cleanup function\n        return () => {\n          console.log('Cleaning up socket connection');\n          clearTimeout(timeoutId);\n          if (newSocket) {\n            newSocket.disconnect();\n          }\n        };\n      } catch (err) {\n        console.error('Error in connection process:', err);\n        setError(`Connection error: ${err.message}. Please check if the server is running.`);\n        setIsConnecting(false);\n      }\n    };\n    \n    connectToServer();\n  }, [connectionAttempts]); // Added connectionAttempts as dependency for retry functionality\n  \n  \n  // Background rotation effect - only active during gameplay\n  useEffect(() => {\n    // Clear any existing background rotation interval\n    if (backgroundIntervalRef.current) {\n      clearInterval(backgroundIntervalRef.current);\n      backgroundIntervalRef.current = null;\n    }\n    \n    // Start background rotation when game is playing\n    if (gameState && gameState.appPhase === 'playing') {\n      // Randomize starting background\n      setCurrentBackgroundIndex(Math.floor(Math.random() * BACKGROUND_IMAGES.length));\n      \n      // Set interval to rotate backgrounds\n      backgroundIntervalRef.current = setInterval(() => {\n        setCurrentBackgroundIndex(prevIndex => \n          (prevIndex + 1) % BACKGROUND_IMAGES.length\n        );\n      }, BACKGROUND_CHANGE_INTERVAL);\n    }\n    \n    // Cleanup on unmount or phase change\n    return () => {\n      if (backgroundIntervalRef.current) {\n        clearInterval(backgroundIntervalRef.current);\n        backgroundIntervalRef.current = null;\n      }\n    };\n  }, [gameState?.appPhase]);\n  \n  // Timer management based on game phase\n  useEffect(() => {\n    // Clean up the previous interval if it exists\n    if (timerIntervalRef.current) {\n      clearInterval(timerIntervalRef.current);\n      timerIntervalRef.current = null;\n    }\n    \n    if (gameState && gameState.appPhase === 'playing') {\n      // Reset the timer when game starts\n      setElapsedTime(0);\n      setCurrentScore(0);\n      setLastScoreChange(0);\n      setLevel(1);\n      \n      // Start a new timer that updates every 10ms for centisecond precision\n      timerIntervalRef.current = setInterval(() => {\n        setElapsedTime(prevTime => prevTime + 10);\n      }, 10);\n      \n      console.log('Timer started');\n    }\n    \n    // Cleanup on unmount or phase change\n    return () => {\n      if (timerIntervalRef.current) {\n        clearInterval(timerIntervalRef.current);\n        timerIntervalRef.current = null;\n      }\n    };\n  }, [gameState?.appPhase]); \n  \n  // Update the player list for display and track current player's score\n  const updatePlayerList = useCallback((players) => {\n    if (!players || typeof players !== 'object') return;\n    \n    // Map player data to what we need\n    const playerEntries = Object.entries(players);\n    \n    // Update current player score state for the score panel\n    if (socket) {\n      const currentPlayerEntry = playerEntries.find(([id]) => id === socket.id);\n      if (currentPlayerEntry) {\n        const [, currentPlayer] = currentPlayerEntry;\n        \n        // Update score if changed\n        if (currentPlayer.score !== currentScore) {\n          const scoreChange = Math.max(0, currentPlayer.score - currentScore);\n          if (scoreChange > 0) {\n            setLastScoreChange(scoreChange);\n            // Reset the score change highlight after 1 second\n            setTimeout(() => setLastScoreChange(0), 1000);\n          }\n          setCurrentScore(currentPlayer.score);\n        }\n        \n        // Update level if changed\n        if (currentPlayer.level && currentPlayer.level !== level) {\n          setLevel(currentPlayer.level);\n        }\n      }\n    }\n  }, [currentScore, level, socket]);\n  \n  // Keyboard control handlers\n  useEffect(() => {\n    if (!socket || !gameState) return;\n    \n    const handleKeyDown = (e) => {\n      // Only process key events if game is in progress\n      if (gameState.appPhase === 'playing') {\n        switch (e.code) {\n          case 'ArrowLeft':\n            // First send immediate move, then start DAS\n            socket.emit('playerAction', { type: 'moveLeft' });\n            socket.emit('playerAction', { type: 'startDAS', direction: 'left' });\n            break;\n          case 'ArrowRight':\n            // First send immediate move, then start DAS\n            socket.emit('playerAction', { type: 'moveRight' });\n            socket.emit('playerAction', { type: 'startDAS', direction: 'right' });\n            break;\n          case 'ArrowUp':\n          case 'KeyZ':\n            socket.emit('playerAction', { type: 'rotate' });\n            break;\n          case 'ArrowDown':\n            socket.emit('playerAction', { type: 'softDrop' });\n            break;\n          case 'Space':\n            socket.emit('playerAction', { type: 'hardDrop' });\n            break;\n          default:\n            break;\n        }\n      } else if (gameState.appPhase === 'homescreen') {\n        // Handle ready toggle on X key press\n        if (e.code === 'KeyX') {\n          const isCurrentlyReady = gameState.readyPlayers.includes(socket.id);\n          console.log('X key pressed, toggling ready state:', !isCurrentlyReady);\n          socket.emit('playerReady', !isCurrentlyReady);\n        }\n      }\n    };\n\n    const handleKeyUp = (e) => {\n      // Only process key events if game is in progress\n      if (gameState.appPhase === 'playing') {\n        switch (e.code) {\n          case 'ArrowLeft':\n          case 'ArrowRight':\n            socket.emit('playerAction', { type: 'endDAS' });\n            break;\n          case 'ArrowDown':\n            socket.emit('playerAction', { type: 'endSoftDrop' });\n            break;\n          default:\n            break;\n        }\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyDown);\n    window.addEventListener('keyup', handleKeyUp);\n\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n      window.removeEventListener('keyup', handleKeyUp);\n    };\n  }, [socket, gameState]);\n\n  // Handle player ready state\n  const handlePlayerReady = useCallback((isReady) => {\n    if (socket) {\n      socket.emit('playerReady', isReady);\n    }\n  }, [socket]);\n\n  // Handle game start\n  const handleStartGame = useCallback(() => {\n    if (socket) {\n      socket.emit('startGame');\n    }\n  }, [socket]);\n\n  // Handle game mode change\n  const handleSetGameMode = useCallback((mode) => {\n    if (socket) {\n      socket.emit('setGameMode', mode);\n    }\n  }, [socket]);\n\n  // Handle game over timeout\n  const handleGameOverTimeout = useCallback(() => {\n    setIsGameOver(false);\n    setGameOverData(null);\n  }, []);\n\n  // Get the current background image URL\n  const getCurrentBackgroundUrl = () => {\n    if (!BACKGROUND_IMAGES.length) return null;\n    return `${process.env.PUBLIC_URL}/backgrounds/${BACKGROUND_IMAGES[currentBackgroundIndex]}`;\n  };\n\n  // Show loading or error screen\n\n  // Show loading or error screen with improved UI\n  if (isConnecting) {\n    return (\n      <div className=\"App\" style={{\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n        height: '100vh',\n        backgroundColor: '#282c34',\n        color: 'white'\n      }}>\n        <h1>Connecting to Tetris server...</h1>\n        <div style={{ marginTop: '20px' }}>\n          <div style={{ \n            width: '50px',\n            height: '50px',\n            border: '5px solid #f3f3f3',\n            borderTop: '5px solid #3498db',\n            borderRadius: '50%',\n            animation: 'spin 1s linear infinite'\n          }}></div>\n          <style>{`\n            @keyframes spin {\n              0% { transform: rotate(0deg); }\n              100% { transform: rotate(360deg); }\n            }\n          `}</style>\n        </div>\n        {/* Add timeout handling if needed */}\n      </div>\n    );\n  }\n  \n  if (error) {\n    return (\n      <div className=\"App\" style={{\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n        height: '100vh',\n        backgroundColor: '#282c34',\n        color: 'white',\n        padding: '20px'\n      }}>\n        <h1>Connection Error</h1>\n        <div style={{\n          backgroundColor: 'rgba(255,0,0,0.1)',\n          border: '1px solid #ff6b6b',\n          borderRadius: '5px',\n          padding: '20px',\n          marginTop: '20px',\n          maxWidth: '600px'\n        }}>\n          <p style={{ marginBottom: '10px' }}>{error}</p>\n          <p>Troubleshooting steps:</p>\n          <ul style={{ textAlign: 'left' }}>\n            <li>Make sure the Tetris server is running</li>\n            <li>Check that your network allows WebSocket connections</li>\n            <li>Verify your config.json file has the correct server address</li>\n          </ul>\n        </div>\n        <button \n          onClick={retryConnection}\n          style={{\n            padding: '10px 20px',\n            backgroundColor: '#3498db',\n            border: 'none',\n            borderRadius: '4px',\n            color: 'white',\n            cursor: 'pointer',\n            marginTop: '20px',\n            fontSize: '16px'\n          }}\n        >\n          Retry Connection\n        </button>\n      </div>\n    );\n  }\n\n  // Show loading screen if no game state\n  if (!gameState) {\n    return <div className=\"App\"><h1>Waiting for game state...</h1></div>;\n  }\n\n  // Home screen or game screen based on app phase\n  return (\n    <div \n      className=\"App\"\n      style={{ \n        // Apply background image only during gameplay\n        ...(gameState.appPhase === 'playing' && {\n          backgroundImage: `url(${getCurrentBackgroundUrl()})`,\n          backgroundSize: 'cover',\n          backgroundPosition: 'center',\n          transition: 'background-image 1s ease-in-out',\n          minHeight: '100vh'\n        })\n      }}\n      tabIndex=\"0\"\n    >\n      {gameState.appPhase === 'homescreen' && (\n        <HomeScreen\n          players={gameState.players || {}}\n          currentPlayerId={socket?.id}\n          readyPlayers={gameState.readyPlayers || []}\n          onReady={handlePlayerReady}\n          onStartGame={handleStartGame}\n          onSetGameMode={handleSetGameMode}\n          gameMode={gameState.gameMode}\n          gameInProgress={gameState.gameInProgress}\n          isRejoining={gameState.players?.[socket?.id]?.isRejoining}\n        />\n      )}\n      \n      {gameState.appPhase === 'playing' && (\n        <div style={{\n          backgroundColor: 'rgba(0, 0, 0, 0.8)',\n          backdropFilter: 'blur(5px)',\n          padding: '20px',\n          borderRadius: '10px',\n          margin: '10px auto',\n          maxWidth: '900px'\n        }}>\n          <div style={{ \n            display: 'flex', \n            justifyContent: 'space-between', \n            alignItems: 'center',\n            marginBottom: '15px' \n          }}>\n            <h1 style={{ margin: 0, fontSize: '28px', color: '#fff' }}>Tetristributed</h1>\n            <div style={{ \n              fontSize: '14px', \n              backgroundColor: '#333', \n              padding: '5px 10px', \n              borderRadius: '4px' \n            }}>\n              Player: {socket?.id && socket.id.substring(0, 4)}\n            </div>\n          </div>\n          \n          <div style={{ display: 'flex', gap: '20px' }}>\n            <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n              <BoardStage \n                board={gameState.board || []} \n                players={gameState.players || {}}\n                linesToClear={gameState.linesToClear || []}\n              />\n            </div>\n            \n            <div style={{ \n              display: 'flex',\n              flexDirection: 'column',\n              minWidth: '220px'\n            }}>\n              {/* Integrated Score Panel with Timer */}\n              <ScorePanel \n                score={currentScore}\n                level={level}\n                lastScoreChange={lastScoreChange}\n                elapsedTime={elapsedTime}\n              />\n              \n              {/* Players List */}\n              <div style={{ \n                backgroundColor: 'rgba(40, 40, 40, 0.9)',\n                padding: '12px',\n                borderRadius: '8px',\n                marginTop: '15px'\n              }}>\n                <h2 style={{ margin: '0 0 10px 0', fontSize: '18px', color: '#ccc' }}>Players</h2>\n                <ul style={{ listStyle: 'none', padding: 0, margin: 0 }}>\n                  {Object.entries(gameState.players || {}).map(([id, player]) => {\n                    const isCurrentPlayer = id === socket?.id;\n                    const shortId = id.substring(0, 4);\n                    \n                    return (\n                      <li \n                        key={id} \n                        style={{ \n                          margin: '6px 0',\n                          padding: '8px',\n                          backgroundColor: isCurrentPlayer ? '#444' : '#333',\n                          borderLeft: `4px solid ${player.color || '#ccc'}`,\n                          borderRadius: '4px',\n                          transition: 'background-color 0.3s'\n                        }}\n                      >\n                        <div style={{ \n                          display: 'flex', \n                          alignItems: 'center', \n                          justifyContent: 'space-between' \n                        }}>\n                          <div>\n                            <span style={{ \n                              fontWeight: isCurrentPlayer ? 'bold' : 'normal',\n                              color: isCurrentPlayer ? '#fff' : '#ccc'\n                            }}>\n                              Player {player.playerNumber || shortId}\n                            </span>\n                            {isCurrentPlayer && <span style={{ \n                              fontSize: '12px', \n                              marginLeft: '5px', \n                              color: '#ffcc00'\n                            }}>\n                              (You)\n                            </span>}\n                          </div>\n                          <div style={{ \n                            backgroundColor: '#222', \n                            padding: '2px 6px', \n                            borderRadius: '3px',\n                            fontSize: '14px',\n                            fontWeight: 'bold'\n                          }}>\n                            {player.score || 0}\n                          </div>\n                        </div>\n                      </li>\n                    );\n                  })}\n                </ul>\n                \n                <div style={{ \n                  marginTop: '15px', \n                  padding: '8px', \n                  backgroundColor: '#222', \n                  borderRadius: '4px',\n                  textAlign: 'center'\n                }}>\n                  <div style={{ fontSize: '12px', color: '#aaa' }}>GAME MODE</div>\n                  <div style={{ fontSize: '16px', fontWeight: 'bold', marginTop: '4px' }}>\n                    {gameState.gameMode || 'Classic'}\n                  </div>\n                </div>\n              </div>\n              \n              {/* Controls Help */}\n              <div style={{ \n                backgroundColor: 'rgba(40, 40, 40, 0.7)',\n                padding: '12px',\n                borderRadius: '8px',\n                marginTop: '15px',\n                fontSize: '12px',\n                color: '#aaa'\n              }}>\n                <div style={{ marginBottom: '5px', fontWeight: 'bold', color: '#ccc' }}>Controls:</div>\n                <div>← → : Move</div>\n                <div>↓ : Soft Drop</div>\n                <div>↑ / Z : Rotate</div>\n                <div>Space : Hard Drop</div>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n      \n      {isGameOver && gameOverData && (\n        <GameOverScreen \n          gameOverData={gameOverData} \n          onTimeout={handleGameOverTimeout} \n        />\n      )}\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}