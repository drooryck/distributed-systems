{"ast":null,"code":"import{io}from'socket.io-client';import{EventEmitter}from'events';import{saveGameSession,getGameSession,clearGameSession}from'./sessionStorage';class ServerConnectionManager extends EventEmitter{constructor(){super();this.serverList=[];this.activeSocket=null;this.socketId=null;// Configuration\nthis.debug=true;this.autoReconnect=true;this.reconnectInterval=2000;// Status tracking\nthis.initialized=false;this.reconnectTimer=null;}log(message){if(this.debug){console.log(`[ServerManager] ${message}`);}}async initialize(){let onConnectedCallback=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;let onStateChangeCallback=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;let serverList=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;if(this.initialized){return;}this.onConnectedCallback=onConnectedCallback;this.onStateChangeCallback=onStateChangeCallback;try{// Use provided server list or default to localhost ports\nthis.serverList=serverList||[{id:0,host:'localhost',port:3001},{id:1,host:'localhost',port:3002},{id:2,host:'localhost',port:3003}];this.log(`Initializing connection manager with ${this.serverList.length} servers`);// First try to connect to any server to find the leader\nlet leaderServer=null;for(const server of this.serverList){const serverUrl=`http://${server.host}:${server.port}`;try{this.log(`Checking server ${serverUrl} for leader info`);const socket=io(serverUrl,{reconnection:false,timeout:5000});// Wait for connection or timeout\nconst isConnected=await new Promise(resolve=>{const timeout=setTimeout(()=>{socket.disconnect();resolve(false);},5000);socket.on('connect',()=>{clearTimeout(timeout);resolve(true);});socket.on('connect_error',()=>{clearTimeout(timeout);socket.disconnect();resolve(false);});});if(isConnected){// Get leader info from this server\nconst leaderInfo=await new Promise(resolve=>{socket.emit('checkLeader',{},response=>{if(response&&response.isLeader){// This server is the leader\nresolve({id:server.id,host:server.host,port:server.port,url:serverUrl});}else if(response&&response.leaderUrl){// Get leader info from response\nconst leaderParts=response.leaderUrl.split(':');const leaderPort=parseInt(leaderParts[leaderParts.length-1]);const leaderHost=leaderParts[leaderParts.length-2].replace(/\\/\\//g,'');resolve({id:response.leaderId||0,host:leaderHost,port:leaderPort,url:response.leaderUrl});}else{// No leader info, use this server temporarily\nresolve({id:server.id,host:server.host,port:server.port,url:serverUrl});}});// If no response in 3 seconds, just use this server\nsetTimeout(()=>{resolve({id:server.id,host:server.host,port:server.port,url:serverUrl});},3000);});socket.disconnect();leaderServer=leaderInfo;break;}}catch(error){this.log(`Error checking server ${serverUrl}: ${error.message}`);// Continue to next server\n}}// Now connect to the leader server or first server if no leader found\nif(leaderServer){this.log(`Connecting to leader server at ${leaderServer.url}`);await this.connectToServer(leaderServer);}else if(this.serverList.length>0){// Try each server until one works\nfor(const server of this.serverList){const serverUrl=`http://${server.host}:${server.port}`;try{this.log(`Trying to connect to server ${serverUrl}`);await this.connectToServer({id:server.id,host:server.host,port:server.port,url:serverUrl});if(this.activeSocket)break;}catch(error){this.log(`Failed to connect to ${serverUrl}: ${error.message}`);}}}this.initialized=true;// If we don't have a connection yet, schedule a retry\nif(!this.activeSocket&&this.autoReconnect){this.scheduleReconnect();}}catch(error){this.log(`Initialization error: ${error.message}`);if(this.autoReconnect){this.scheduleReconnect();}}}async connectToServer(server){if(!server||!server.url){throw new Error('Invalid server configuration');}this.log(`Connecting to server at ${server.url}`);// Connect to the server\nconst socket=io(server.url,{reconnection:true,reconnectionAttempts:5,reconnectionDelay:1000,reconnectionDelayMax:5000,timeout:10000});return new Promise((resolve,reject)=>{// Set up connection timeout\nconst timeout=setTimeout(()=>{socket.disconnect();reject(new Error(`Connection timeout to ${server.url}`));},10000);// Handle connection\nsocket.on('connect',()=>{clearTimeout(timeout);this.log(`Connected to server at ${server.url}`);this.setActiveServer(socket,server);resolve(true);});// Handle connection error\nsocket.on('connect_error',error=>{clearTimeout(timeout);this.log(`Connection error to ${server.url}: ${error.message}`);reject(error);});// Handle disconnection\nsocket.on('disconnect',reason=>{this.log(`Disconnected from ${server.url}: ${reason}`);// If this was our active socket, try to reconnect\nif(this.activeSocket===socket){this.activeSocket=null;// Notify about server change\nif(this.onStateChangeCallback){this.onStateChangeCallback({type:'disconnected',message:`Disconnected from server: ${reason}`});}if(this.autoReconnect&&reason!=='io client disconnect'){this.scheduleReconnect();}}});});}setActiveServer(socket,server){this.activeSocket=socket;this.socketId=socket.id;// Forward events from this socket\nthis.forwardEvents(socket);// Try to rejoin a room if we have saved session\nthis.attemptRoomRejoin(socket);// Call the connected callback if provided\nif(this.onConnectedCallback){this.onConnectedCallback(socket);}// Notify about server change\nif(this.onStateChangeCallback){this.onStateChangeCallback({type:'connected',server:server.url});}}scheduleReconnect(){if(this.reconnectTimer){clearTimeout(this.reconnectTimer);}this.reconnectTimer=setTimeout(async()=>{this.log('Attempting to reconnect...');await this.initialize(this.onConnectedCallback,this.onStateChangeCallback);},this.reconnectInterval);}forwardEvents(socket){if(!socket)return;// Forward common events from the socket to this event emitter\nconst eventsToForward=['init','gameState','roomCreated','roomJoined','roomRejoined','roomLeft','playerJoined','playerLeft','playerReady','gameStarted','gameOver','error','disconnect'];eventsToForward.forEach(eventName=>{socket.on(eventName,data=>{if(eventName==='init'&&typeof data==='string'){try{const parsedData=JSON.parse(data);this.log(`Converted string to object for init event`);data=parsedData;}catch(e){this.log(`Could not parse init string as JSON, creating default homescreen state`);data={appPhase:'homescreen',socketId:socket.id,players:{},activePlayers:[],readyPlayers:[],gameInProgress:false};}}this.emit(eventName,data);});});}attemptRoomRejoin(socket){const session=getGameSession();if(session&&session.roomCode){this.log(`Attempting to rejoin room ${session.roomCode} as ${session.playerName}`);socket.emit('rejoinRoom',{roomCode:session.roomCode,playerName:session.playerName,previousSocketId:session.socketId||this.socketId});}}emit(eventName,data){// For non-EventEmitter events, send to server\nif(eventName!=='newListener'&&eventName!=='removeListener'){if(this.activeSocket){this.activeSocket.emit(eventName,data);}else{this.log(`Cannot emit ${eventName}: no active socket`);}}// Always forward all events to local listeners\nreturn super.emit(eventName,data);}getSocket(){return this.activeSocket;}getSocketId(){return this.socketId;}disconnect(){if(this.activeSocket){this.activeSocket.disconnect();}this.activeSocket=null;this.initialized=false;if(this.reconnectTimer){clearTimeout(this.reconnectTimer);this.reconnectTimer=null;}}}// Create a singleton instance\nconst serverManager=new ServerConnectionManager();export default serverManager;","map":{"version":3,"names":["io","EventEmitter","saveGameSession","getGameSession","clearGameSession","ServerConnectionManager","constructor","serverList","activeSocket","socketId","debug","autoReconnect","reconnectInterval","initialized","reconnectTimer","log","message","console","initialize","onConnectedCallback","arguments","length","undefined","onStateChangeCallback","id","host","port","leaderServer","server","serverUrl","socket","reconnection","timeout","isConnected","Promise","resolve","setTimeout","disconnect","on","clearTimeout","leaderInfo","emit","response","isLeader","url","leaderUrl","leaderParts","split","leaderPort","parseInt","leaderHost","replace","leaderId","error","connectToServer","scheduleReconnect","Error","reconnectionAttempts","reconnectionDelay","reconnectionDelayMax","reject","setActiveServer","reason","type","forwardEvents","attemptRoomRejoin","eventsToForward","forEach","eventName","data","parsedData","JSON","parse","e","appPhase","players","activePlayers","readyPlayers","gameInProgress","session","roomCode","playerName","previousSocketId","getSocket","getSocketId","serverManager"],"sources":["/Users/driesrooryck/Desktop/s25/new_try/distributed-systems/tetris/client/src/utils/serverConnection.js"],"sourcesContent":["import { io } from 'socket.io-client';\nimport { EventEmitter } from 'events';\nimport { saveGameSession, getGameSession, clearGameSession } from './sessionStorage';\n\nclass ServerConnectionManager extends EventEmitter {\n  constructor() {\n    super();\n    this.serverList = [];\n    this.activeSocket = null;\n    this.socketId = null;\n    \n    // Configuration\n    this.debug = true;\n    this.autoReconnect = true;\n    this.reconnectInterval = 2000;\n    \n    // Status tracking\n    this.initialized = false;\n    this.reconnectTimer = null;\n  }\n  \n  log(message) {\n    if (this.debug) {\n      console.log(`[ServerManager] ${message}`);\n    }\n  }\n  \n  async initialize(onConnectedCallback = null, onStateChangeCallback = null, serverList = null) {\n    if (this.initialized) {\n      return;\n    }\n    \n    this.onConnectedCallback = onConnectedCallback;\n    this.onStateChangeCallback = onStateChangeCallback;\n    \n    try {\n      // Use provided server list or default to localhost ports\n      this.serverList = serverList || [\n        { id: 0, host: 'localhost', port: 3001 },\n        { id: 1, host: 'localhost', port: 3002 },\n        { id: 2, host: 'localhost', port: 3003 }\n      ];\n      \n      this.log(`Initializing connection manager with ${this.serverList.length} servers`);\n      \n      // First try to connect to any server to find the leader\n      let leaderServer = null;\n      \n      for (const server of this.serverList) {\n        const serverUrl = `http://${server.host}:${server.port}`;\n        try {\n          this.log(`Checking server ${serverUrl} for leader info`);\n          const socket = io(serverUrl, {\n            reconnection: false,\n            timeout: 5000\n          });\n          \n          // Wait for connection or timeout\n          const isConnected = await new Promise((resolve) => {\n            const timeout = setTimeout(() => {\n              socket.disconnect();\n              resolve(false);\n            }, 5000);\n            \n            socket.on('connect', () => {\n              clearTimeout(timeout);\n              resolve(true);\n            });\n            \n            socket.on('connect_error', () => {\n              clearTimeout(timeout);\n              socket.disconnect();\n              resolve(false);\n            });\n          });\n          \n          if (isConnected) {\n            // Get leader info from this server\n            const leaderInfo = await new Promise((resolve) => {\n              socket.emit('checkLeader', {}, (response) => {\n                if (response && response.isLeader) {\n                  // This server is the leader\n                  resolve({\n                    id: server.id,\n                    host: server.host,\n                    port: server.port,\n                    url: serverUrl\n                  });\n                } else if (response && response.leaderUrl) {\n                  // Get leader info from response\n                  const leaderParts = response.leaderUrl.split(':');\n                  const leaderPort = parseInt(leaderParts[leaderParts.length - 1]);\n                  const leaderHost = leaderParts[leaderParts.length - 2].replace(/\\/\\//g, '');\n                  \n                  resolve({\n                    id: response.leaderId || 0,\n                    host: leaderHost,\n                    port: leaderPort,\n                    url: response.leaderUrl\n                  });\n                } else {\n                  // No leader info, use this server temporarily\n                  resolve({\n                    id: server.id,\n                    host: server.host,\n                    port: server.port,\n                    url: serverUrl\n                  });\n                }\n              });\n              \n              // If no response in 3 seconds, just use this server\n              setTimeout(() => {\n                resolve({\n                  id: server.id,\n                  host: server.host,\n                  port: server.port,\n                  url: serverUrl\n                });\n              }, 3000);\n            });\n            \n            socket.disconnect();\n            leaderServer = leaderInfo;\n            break;\n          }\n        } catch (error) {\n          this.log(`Error checking server ${serverUrl}: ${error.message}`);\n          // Continue to next server\n        }\n      }\n      \n      // Now connect to the leader server or first server if no leader found\n      if (leaderServer) {\n        this.log(`Connecting to leader server at ${leaderServer.url}`);\n        await this.connectToServer(leaderServer);\n      } else if (this.serverList.length > 0) {\n        // Try each server until one works\n        for (const server of this.serverList) {\n          const serverUrl = `http://${server.host}:${server.port}`;\n          try {\n            this.log(`Trying to connect to server ${serverUrl}`);\n            await this.connectToServer({ \n              id: server.id,\n              host: server.host,\n              port: server.port,\n              url: serverUrl\n            });\n            if (this.activeSocket) break;\n          } catch (error) {\n            this.log(`Failed to connect to ${serverUrl}: ${error.message}`);\n          }\n        }\n      }\n      \n      this.initialized = true;\n      \n      // If we don't have a connection yet, schedule a retry\n      if (!this.activeSocket && this.autoReconnect) {\n        this.scheduleReconnect();\n      }\n    } catch (error) {\n      this.log(`Initialization error: ${error.message}`);\n      if (this.autoReconnect) {\n        this.scheduleReconnect();\n      }\n    }\n  }\n  \n  async connectToServer(server) {\n    if (!server || !server.url) {\n      throw new Error('Invalid server configuration');\n    }\n    \n    this.log(`Connecting to server at ${server.url}`);\n    \n    // Connect to the server\n    const socket = io(server.url, {\n      reconnection: true,\n      reconnectionAttempts: 5,\n      reconnectionDelay: 1000,\n      reconnectionDelayMax: 5000,\n      timeout: 10000\n    });\n    \n    return new Promise((resolve, reject) => {\n      // Set up connection timeout\n      const timeout = setTimeout(() => {\n        socket.disconnect();\n        reject(new Error(`Connection timeout to ${server.url}`));\n      }, 10000);\n      \n      // Handle connection\n      socket.on('connect', () => {\n        clearTimeout(timeout);\n        this.log(`Connected to server at ${server.url}`);\n        this.setActiveServer(socket, server);\n        resolve(true);\n      });\n      \n      // Handle connection error\n      socket.on('connect_error', (error) => {\n        clearTimeout(timeout);\n        this.log(`Connection error to ${server.url}: ${error.message}`);\n        reject(error);\n      });\n      \n      // Handle disconnection\n      socket.on('disconnect', (reason) => {\n        this.log(`Disconnected from ${server.url}: ${reason}`);\n        \n        // If this was our active socket, try to reconnect\n        if (this.activeSocket === socket) {\n          this.activeSocket = null;\n          \n          // Notify about server change\n          if (this.onStateChangeCallback) {\n            this.onStateChangeCallback({\n              type: 'disconnected',\n              message: `Disconnected from server: ${reason}`\n            });\n          }\n          \n          if (this.autoReconnect && reason !== 'io client disconnect') {\n            this.scheduleReconnect();\n          }\n        }\n      });\n    });\n  }\n  \n  setActiveServer(socket, server) {\n    this.activeSocket = socket;\n    this.socketId = socket.id;\n    \n    // Forward events from this socket\n    this.forwardEvents(socket);\n    \n    // Try to rejoin a room if we have saved session\n    this.attemptRoomRejoin(socket);\n    \n    // Call the connected callback if provided\n    if (this.onConnectedCallback) {\n      this.onConnectedCallback(socket);\n    }\n    \n    // Notify about server change\n    if (this.onStateChangeCallback) {\n      this.onStateChangeCallback({\n        type: 'connected',\n        server: server.url\n      });\n    }\n  }\n  \n  scheduleReconnect() {\n    if (this.reconnectTimer) {\n      clearTimeout(this.reconnectTimer);\n    }\n    \n    this.reconnectTimer = setTimeout(async () => {\n      this.log('Attempting to reconnect...');\n      await this.initialize(this.onConnectedCallback, this.onStateChangeCallback);\n    }, this.reconnectInterval);\n  }\n  \n  forwardEvents(socket) {\n    if (!socket) return;\n    \n    // Forward common events from the socket to this event emitter\n    const eventsToForward = [\n      'init', 'gameState', 'roomCreated', 'roomJoined', 'roomRejoined',\n      'roomLeft', 'playerJoined', 'playerLeft', 'playerReady',\n      'gameStarted', 'gameOver', 'error', 'disconnect'\n    ];\n    \n    eventsToForward.forEach(eventName => {\n      socket.on(eventName, (data) => {\n        if (eventName === 'init' && typeof data === 'string') {\n          try {\n            const parsedData = JSON.parse(data);\n            this.log(`Converted string to object for init event`);\n            data = parsedData;\n          } catch (e) {\n            this.log(`Could not parse init string as JSON, creating default homescreen state`);\n            data = { \n              appPhase: 'homescreen',\n              socketId: socket.id,\n              players: {},\n              activePlayers: [],\n              readyPlayers: [],\n              gameInProgress: false\n            };\n          }\n        }\n        \n        this.emit(eventName, data);\n      });\n    });\n  }\n  \n  attemptRoomRejoin(socket) {\n    const session = getGameSession();\n    if (session && session.roomCode) {\n      this.log(`Attempting to rejoin room ${session.roomCode} as ${session.playerName}`);\n      \n      socket.emit('rejoinRoom', {\n        roomCode: session.roomCode,\n        playerName: session.playerName,\n        previousSocketId: session.socketId || this.socketId\n      });\n    }\n  }\n  \n  emit(eventName, data) {\n    // For non-EventEmitter events, send to server\n    if (eventName !== 'newListener' && eventName !== 'removeListener') {\n      if (this.activeSocket) {\n        this.activeSocket.emit(eventName, data);\n      } else {\n        this.log(`Cannot emit ${eventName}: no active socket`);\n      }\n    }\n    \n    // Always forward all events to local listeners\n    return super.emit(eventName, data);\n  }\n  \n  getSocket() {\n    return this.activeSocket;\n  }\n  \n  getSocketId() {\n    return this.socketId;\n  }\n  \n  disconnect() {\n    if (this.activeSocket) {\n      this.activeSocket.disconnect();\n    }\n    \n    this.activeSocket = null;\n    this.initialized = false;\n    \n    if (this.reconnectTimer) {\n      clearTimeout(this.reconnectTimer);\n      this.reconnectTimer = null;\n    }\n  }\n}\n\n// Create a singleton instance\nconst serverManager = new ServerConnectionManager();\nexport default serverManager;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}