{"ast":null,"code":"var _jsxFileName = \"/Users/driesrooryck/Desktop/s25/distributed-systems/tetris/client/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useCallback, useRef } from 'react';\nimport { io } from 'socket.io-client';\nimport BoardStage from './BoardStage';\nimport NewHomeScreen from './NewHomeScreen';\nimport ReadyScreen from './ReadyScreen';\nimport GameOverScreen from './GameOverScreen';\nimport ScorePanel from './ScorePanel';\nimport './App.css';\n\n// Background image configuration\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BACKGROUND_IMAGES = ['deep-tetris-color.jpg', 'tetris-1920-x-1080-background-hyihqau5t3lalo4e.png', 'tetris-2560-x-1600-background-3bjbi7nyulqbller.jpg'];\nconst BACKGROUND_CHANGE_INTERVAL = 30000; // 30 seconds\n\n// Load config file to get server address\nconst loadConfig = async () => {\n  try {\n    const response = await fetch('/config.json');\n    if (!response.ok) {\n      throw new Error(`Failed to load config: ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.warn('Error loading config, using default server address:', error);\n    return {\n      client: {\n        serverAddress: 'http://localhost:3001'\n      }\n    };\n  }\n};\nfunction App() {\n  _s();\n  var _gameState$players, _gameState$players$so;\n  const [socket, setSocket] = useState(null);\n  const [gameState, setGameState] = useState(null);\n  const [isGameOver, setIsGameOver] = useState(false);\n  const [gameOverData, setGameOverData] = useState(null);\n  const [isConnecting, setIsConnecting] = useState(true);\n  const [error, setError] = useState(null);\n  const [socketError, setSocketError] = useState(null);\n\n  // Hard‐drop guard so holding space won't repeat\n  const hardDropActiveRef = useRef(false);\n\n  // Add state for background rotation\n  const [currentBackgroundIndex, setCurrentBackgroundIndex] = useState(0);\n  const backgroundIntervalRef = useRef(null);\n\n  // Add state for timer and scoring\n  const [elapsedTime, setElapsedTime] = useState(0);\n  const [currentScore, setCurrentScore] = useState(0);\n  const [lastScoreChange, setLastScoreChange] = useState(0);\n  const [level, setLevel] = useState(1);\n  const timerIntervalRef = useRef(null);\n\n  // Connect to socket on component mount\n  useEffect(() => {\n    const connectToServer = async () => {\n      try {\n        var _config$client;\n        setIsConnecting(true);\n\n        // Load configuration\n        const config = await loadConfig();\n        const serverAddress = ((_config$client = config.client) === null || _config$client === void 0 ? void 0 : _config$client.serverAddress) || 'http://localhost:3001';\n        console.log(`Connecting to server at: ${serverAddress}`);\n\n        // Create new socket connection\n        const newSocket = io(serverAddress);\n        setSocket(newSocket);\n\n        // Socket event handlers\n        newSocket.on('connect', () => {\n          console.log('Connected to server');\n          setIsConnecting(false);\n          setSocketError(null);\n        });\n        newSocket.on('connect_error', err => {\n          console.error('Connection error:', err);\n          setSocketError(`Connection error: ${err.message}`);\n          setIsConnecting(false);\n        });\n\n        // Handle initial state\n        newSocket.on('init', initialState => {\n          console.log('Received initial game state:', initialState);\n          setGameState(initialState);\n        });\n\n        // Handle room creation\n        newSocket.on('roomCreated', ({\n          roomCode,\n          gameState\n        }) => {\n          console.log(`Room created: ${roomCode}`);\n          setGameState({\n            ...gameState,\n            appPhase: 'readyscreen'\n          });\n          setError(null);\n        });\n\n        // Handle room join\n        newSocket.on('roomJoined', ({\n          roomCode,\n          gameState\n        }) => {\n          console.log(`Joined room: ${roomCode}`);\n          setGameState({\n            ...gameState,\n            appPhase: 'readyscreen'\n          });\n          setError(null);\n        });\n\n        // Handle leaving room\n        newSocket.on('roomLeft', data => {\n          console.log('Left room');\n          setGameState({\n            appPhase: 'homescreen',\n            socketId: newSocket.id\n          });\n        });\n\n        // Handle errors\n        newSocket.on('error', ({\n          message\n        }) => {\n          console.error('Server error:', message);\n          setError(message);\n        });\n\n        // Handle game state updates\n        newSocket.on('gameState', newState => {\n          setGameState(prevState => {\n            // If we're showing gameInProgress screen, only update if returning to lobby\n            if (prevState !== null && prevState !== void 0 && prevState.gameInProgress && !prevState.players[newSocket.id] && newState.appPhase === 'playing') {\n              // Don't update state - keep showing \"Game in Progress\" screen\n              return prevState;\n            }\n\n            // Update player list if we have new state\n            if (newState && newState.players) {\n              updatePlayerList(newState.players);\n            }\n\n            // Otherwise update normally\n            return newState;\n          });\n        });\n\n        // Handle game over\n        newSocket.on('gameOver', data => {\n          console.log('Game over with data:', data);\n          setIsGameOver(true);\n          setGameOverData(data);\n        });\n\n        // Handle player joined notification\n        newSocket.on('playerJoined', ({\n          playerId,\n          player,\n          gameState\n        }) => {\n          console.log(`Player joined: ${playerId}`);\n          setGameState(gameState);\n        });\n\n        // Handle player left notification\n        newSocket.on('playerLeft', ({\n          playerId,\n          gameState\n        }) => {\n          console.log(`Player left: ${playerId}`);\n          setGameState(gameState);\n        });\n\n        // Handle host assignment (when previous host leaves)\n        newSocket.on('hostAssigned', ({\n          gameState\n        }) => {\n          console.log('You are now the host');\n          setGameState(gameState);\n        });\n\n        // Return cleanup function\n        return () => {\n          console.log('Disconnecting socket');\n          newSocket.disconnect();\n        };\n      } catch (err) {\n        console.error('Error connecting to server:', err);\n        setSocketError(`Error connecting to server: ${err.message}`);\n        setIsConnecting(false);\n      }\n    };\n    connectToServer();\n  }, []);\n\n  // Background rotation effect - only active during gameplay\n  useEffect(() => {\n    // Clear any existing background rotation interval\n    if (backgroundIntervalRef.current) {\n      clearInterval(backgroundIntervalRef.current);\n      backgroundIntervalRef.current = null;\n    }\n\n    // Start background rotation when game is playing\n    if (gameState && gameState.appPhase === 'playing') {\n      // Randomize starting background\n      setCurrentBackgroundIndex(Math.floor(Math.random() * BACKGROUND_IMAGES.length));\n\n      // Set interval to rotate backgrounds\n      backgroundIntervalRef.current = setInterval(() => {\n        setCurrentBackgroundIndex(prevIndex => (prevIndex + 1) % BACKGROUND_IMAGES.length);\n      }, BACKGROUND_CHANGE_INTERVAL);\n    }\n\n    // Cleanup on unmount or phase change\n    return () => {\n      if (backgroundIntervalRef.current) {\n        clearInterval(backgroundIntervalRef.current);\n        backgroundIntervalRef.current = null;\n      }\n    };\n  }, [gameState === null || gameState === void 0 ? void 0 : gameState.appPhase]);\n\n  // Timer management based on game phase\n  useEffect(() => {\n    // Clean up the previous interval if it exists\n    if (timerIntervalRef.current) {\n      clearInterval(timerIntervalRef.current);\n      timerIntervalRef.current = null;\n    }\n    if (gameState && gameState.appPhase === 'playing') {\n      // Reset the timer when game starts\n      setElapsedTime(0);\n      setCurrentScore(0);\n      setLastScoreChange(0);\n      setLevel(1);\n\n      // Start a new timer that updates every 10ms for centisecond precision\n      timerIntervalRef.current = setInterval(() => {\n        setElapsedTime(prevTime => prevTime + 10);\n      }, 10);\n      console.log('Timer started');\n    }\n\n    // Cleanup on unmount or phase change\n    return () => {\n      if (timerIntervalRef.current) {\n        clearInterval(timerIntervalRef.current);\n        timerIntervalRef.current = null;\n      }\n    };\n  }, [gameState === null || gameState === void 0 ? void 0 : gameState.appPhase]);\n\n  // Update the player list for display and track current player's score\n  const updatePlayerList = useCallback(players => {\n    if (!players || typeof players !== 'object') return;\n\n    // Map player data to what we need\n    const playerEntries = Object.entries(players);\n\n    // Update current player score state for the score panel\n    if (socket) {\n      const currentPlayerEntry = playerEntries.find(([id]) => id === socket.id);\n      if (currentPlayerEntry) {\n        const [, currentPlayer] = currentPlayerEntry;\n\n        // Update score if changed\n        if (currentPlayer.score !== currentScore) {\n          const scoreChange = Math.max(0, currentPlayer.score - currentScore);\n          if (scoreChange > 0) {\n            setLastScoreChange(scoreChange);\n            // Reset the score change highlight after 1 second\n            setTimeout(() => setLastScoreChange(0), 1000);\n          }\n          setCurrentScore(currentPlayer.score);\n        }\n\n        // Update level if changed\n        if (currentPlayer.level && currentPlayer.level !== level) {\n          setLevel(currentPlayer.level);\n        }\n      }\n    }\n  }, [currentScore, level, socket]);\n\n  // Keyboard control handlers\n  useEffect(() => {\n    if (!socket || !gameState) return;\n    const handleKeyDown = e => {\n      // Only process key events if game is in progress\n      if (gameState.appPhase === 'playing') {\n        switch (e.code) {\n          case 'ArrowLeft':\n            // First send immediate move, then start DAS\n            socket.emit('playerAction', {\n              type: 'moveLeft'\n            });\n            socket.emit('playerAction', {\n              type: 'startDAS',\n              direction: 'left'\n            });\n            break;\n          case 'ArrowRight':\n            // First send immediate move, then start DAS\n            socket.emit('playerAction', {\n              type: 'moveRight'\n            });\n            socket.emit('playerAction', {\n              type: 'startDAS',\n              direction: 'right'\n            });\n            break;\n          case 'ArrowUp':\n          case 'KeyZ':\n            socket.emit('playerAction', {\n              type: 'rotate'\n            });\n            break;\n          case 'ArrowDown':\n            socket.emit('playerAction', {\n              type: 'softDrop'\n            });\n            break;\n          case 'Space':\n            // guard against auto‑repeat when holding space\n            if (!hardDropActiveRef.current) {\n              socket.emit('playerAction', {\n                type: 'hardDrop'\n              });\n              hardDropActiveRef.current = true;\n            }\n            break;\n          default:\n            break;\n        }\n      } else if (gameState.appPhase === 'readyscreen') {\n        // Handle ready toggle on X key press\n        if (e.code === 'KeyX') {\n          const isCurrentlyReady = gameState.readyPlayers && gameState.readyPlayers.includes(socket.id);\n          console.log('X key pressed, toggling ready state:', !isCurrentlyReady);\n          socket.emit('playerReady', !isCurrentlyReady);\n        }\n      }\n    };\n    const handleKeyUp = e => {\n      // Only process key events if game is in progress\n      if (gameState.appPhase === 'playing') {\n        switch (e.code) {\n          case 'ArrowLeft':\n          case 'ArrowRight':\n            socket.emit('playerAction', {\n              type: 'endDAS'\n            });\n            break;\n          case 'ArrowDown':\n            socket.emit('playerAction', {\n              type: 'endSoftDrop'\n            });\n            break;\n          case 'Space':\n            // re‑enable hardDrop once key is released\n            hardDropActiveRef.current = false;\n            break;\n          default:\n            break;\n        }\n      }\n    };\n    window.addEventListener('keydown', handleKeyDown);\n    window.addEventListener('keyup', handleKeyUp);\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n      window.removeEventListener('keyup', handleKeyUp);\n    };\n  }, [socket, gameState]);\n\n  // Room management handlers\n  const handleCreateRoom = useCallback(playerName => {\n    if (socket) {\n      socket.emit('createRoom', playerName);\n    }\n  }, [socket]);\n  const handleJoinRoom = useCallback((roomCode, playerName) => {\n    if (socket) {\n      socket.emit('joinRoom', {\n        roomCode,\n        playerName\n      });\n    }\n  }, [socket]);\n  const handleLeaveRoom = useCallback(() => {\n    if (socket) {\n      socket.emit('leaveRoom');\n    }\n  }, [socket]);\n\n  // Handle player ready state\n  const handlePlayerReady = useCallback(isReady => {\n    if (socket) {\n      socket.emit('playerReady', isReady);\n    }\n  }, [socket]);\n\n  // Handle game start\n  const handleStartGame = useCallback(() => {\n    if (socket) {\n      socket.emit('startGame');\n    }\n  }, [socket]);\n\n  // Handle game mode change\n  const handleSetGameMode = useCallback(mode => {\n    if (socket) {\n      socket.emit('setGameMode', mode);\n    }\n  }, [socket]);\n\n  // Handle game over timeout\n  const handleGameOverTimeout = useCallback(() => {\n    setIsGameOver(false);\n    setGameOverData(null);\n  }, []);\n\n  // Get the current background image URL\n  const getCurrentBackgroundUrl = () => {\n    if (!BACKGROUND_IMAGES.length) return null;\n    return `${process.env.PUBLIC_URL}/backgrounds/${BACKGROUND_IMAGES[currentBackgroundIndex]}`;\n  };\n\n  // Show loading or error screen\n  if (isConnecting) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Connecting to server...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 409,\n        columnNumber: 33\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 409,\n      columnNumber: 12\n    }, this);\n  }\n  if (socketError) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Connection Error\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 415,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: socketError\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 416,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Please check that the server is running and the configuration is correct.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 417,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => window.location.reload(),\n        style: {\n          padding: '10px 20px',\n          backgroundColor: '#FF5733',\n          border: 'none',\n          borderRadius: '4px',\n          color: 'white',\n          cursor: 'pointer',\n          marginTop: '20px'\n        },\n        children: \"Retry Connection\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 418,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 414,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Show loading screen if no game state\n  if (!gameState) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Waiting for game state...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 438,\n        columnNumber: 33\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 438,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Render appropriate screen based on app phase\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    style: {\n      ...(gameState.appPhase === 'playing' && {\n        backgroundImage: `url(${getCurrentBackgroundUrl()})`,\n        backgroundSize: 'cover',\n        backgroundPosition: 'center',\n        transition: 'background-image 1s ease-in-out',\n        minHeight: '100vh'\n      })\n    },\n    tabIndex: \"0\",\n    children: [gameState.appPhase === 'homescreen' && /*#__PURE__*/_jsxDEV(NewHomeScreen, {\n      onCreateRoom: handleCreateRoom,\n      onJoinRoom: handleJoinRoom,\n      error: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 457,\n      columnNumber: 9\n    }, this), gameState.appPhase === 'readyscreen' && /*#__PURE__*/_jsxDEV(ReadyScreen, {\n      roomCode: gameState.roomCode,\n      players: gameState.players || {},\n      currentPlayerId: socket === null || socket === void 0 ? void 0 : socket.id,\n      readyPlayers: gameState.readyPlayers || [],\n      onReady: handlePlayerReady,\n      onStartGame: handleStartGame,\n      onLeaveRoom: handleLeaveRoom,\n      onSetGameMode: handleSetGameMode,\n      gameMode: gameState.gameMode,\n      gameInProgress: gameState.gameInProgress,\n      isHost: (_gameState$players = gameState.players) === null || _gameState$players === void 0 ? void 0 : (_gameState$players$so = _gameState$players[socket === null || socket === void 0 ? void 0 : socket.id]) === null || _gameState$players$so === void 0 ? void 0 : _gameState$players$so.isHost\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 465,\n      columnNumber: 9\n    }, this), gameState.appPhase === 'playing' && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        backgroundColor: 'rgba(0, 0, 0, 0.8)',\n        backdropFilter: 'blur(5px)',\n        padding: '20px',\n        borderRadius: '10px',\n        margin: '10px auto',\n        maxWidth: '900px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          justifyContent: 'space-between',\n          alignItems: 'center',\n          marginBottom: '15px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          style: {\n            margin: 0,\n            fontSize: '28px',\n            color: '#fff'\n          },\n          children: \"Tetristributed\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 495,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            alignItems: 'center',\n            gap: '15px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              fontSize: '14px',\n              backgroundColor: '#444',\n              padding: '5px 10px',\n              borderRadius: '4px',\n              display: 'flex',\n              flexDirection: 'column',\n              alignItems: 'center'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                fontSize: '10px',\n                color: '#aaa'\n              },\n              children: \"ROOM\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 510,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                fontWeight: 'bold'\n              },\n              children: gameState.roomCode\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 511,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 501,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              fontSize: '14px',\n              backgroundColor: '#333',\n              padding: '5px 10px',\n              borderRadius: '4px'\n            },\n            children: [\"Player: \", (socket === null || socket === void 0 ? void 0 : socket.id) && socket.id.substring(0, 4)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 513,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 496,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 489,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          gap: '20px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center'\n          },\n          children: /*#__PURE__*/_jsxDEV(BoardStage, {\n            board: gameState.board || [],\n            players: gameState.players || {},\n            linesToClear: gameState.linesToClear || []\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 526,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 525,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            flexDirection: 'column',\n            minWidth: '220px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(ScorePanel, {\n            score: currentScore,\n            level: level,\n            lastScoreChange: lastScoreChange,\n            elapsedTime: elapsedTime\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 539,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              backgroundColor: 'rgba(40, 40, 40, 0.9)',\n              padding: '12px',\n              borderRadius: '8px',\n              marginTop: '15px'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              style: {\n                margin: '0 0 10px 0',\n                fontSize: '18px',\n                color: '#ccc'\n              },\n              children: \"Players\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 553,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n              style: {\n                listStyle: 'none',\n                padding: 0,\n                margin: 0\n              },\n              children: Object.entries(gameState.players || {}).map(([id, player]) => {\n                const isCurrentPlayer = id === (socket === null || socket === void 0 ? void 0 : socket.id);\n                const shortId = id.substring(0, 4);\n                return /*#__PURE__*/_jsxDEV(\"li\", {\n                  style: {\n                    margin: '6px 0',\n                    padding: '8px',\n                    backgroundColor: isCurrentPlayer ? '#444' : '#333',\n                    borderLeft: `4px solid ${player.color || '#ccc'}`,\n                    borderRadius: '4px',\n                    transition: 'background-color 0.3s'\n                  },\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    style: {\n                      display: 'flex',\n                      alignItems: 'center',\n                      justifyContent: 'space-between'\n                    },\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                        style: {\n                          fontWeight: isCurrentPlayer ? 'bold' : 'normal',\n                          color: isCurrentPlayer ? '#fff' : '#ccc'\n                        },\n                        children: player.name || `Player ${player.playerNumber || shortId}`\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 577,\n                        columnNumber: 29\n                      }, this), isCurrentPlayer && /*#__PURE__*/_jsxDEV(\"span\", {\n                        style: {\n                          fontSize: '12px',\n                          marginLeft: '5px',\n                          color: '#ffcc00'\n                        },\n                        children: \"(You)\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 583,\n                        columnNumber: 49\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 576,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      style: {\n                        backgroundColor: '#222',\n                        padding: '2px 6px',\n                        borderRadius: '3px',\n                        fontSize: '14px',\n                        fontWeight: 'bold'\n                      },\n                      children: player.score || 0\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 591,\n                      columnNumber: 27\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 571,\n                    columnNumber: 25\n                  }, this)\n                }, id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 560,\n                  columnNumber: 23\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 554,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                marginTop: '15px',\n                padding: '8px',\n                backgroundColor: '#222',\n                borderRadius: '4px',\n                textAlign: 'center'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  fontSize: '12px',\n                  color: '#aaa'\n                },\n                children: \"GAME MODE\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 613,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  fontSize: '16px',\n                  fontWeight: 'bold',\n                  marginTop: '4px'\n                },\n                children: gameState.gameMode || 'Classic'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 614,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 606,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 547,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              backgroundColor: 'rgba(40, 40, 40, 0.7)',\n              padding: '12px',\n              borderRadius: '8px',\n              marginTop: '15px',\n              fontSize: '12px',\n              color: '#aaa'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                marginBottom: '5px',\n                fontWeight: 'bold',\n                color: '#ccc'\n              },\n              children: \"Controls:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 629,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: \"\\u2190 \\u2192 : Move\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 630,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: \"\\u2193 : Soft Drop\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 631,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: \"\\u2191 / Z : Rotate\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 632,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: \"Space : Hard Drop\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 633,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 621,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 533,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 524,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 481,\n      columnNumber: 9\n    }, this), isGameOver && gameOverData && /*#__PURE__*/_jsxDEV(GameOverScreen, {\n      gameOverData: gameOverData,\n      currentPlayerId: socket === null || socket === void 0 ? void 0 : socket.id,\n      onTimeout: handleGameOverTimeout\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 641,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 443,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"kfdKZoKGcBqFXAJzBbhhpZdEbXE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","useCallback","useRef","io","BoardStage","NewHomeScreen","ReadyScreen","GameOverScreen","ScorePanel","jsxDEV","_jsxDEV","BACKGROUND_IMAGES","BACKGROUND_CHANGE_INTERVAL","loadConfig","response","fetch","ok","Error","status","json","error","console","warn","client","serverAddress","App","_s","_gameState$players","_gameState$players$so","socket","setSocket","gameState","setGameState","isGameOver","setIsGameOver","gameOverData","setGameOverData","isConnecting","setIsConnecting","setError","socketError","setSocketError","hardDropActiveRef","currentBackgroundIndex","setCurrentBackgroundIndex","backgroundIntervalRef","elapsedTime","setElapsedTime","currentScore","setCurrentScore","lastScoreChange","setLastScoreChange","level","setLevel","timerIntervalRef","connectToServer","_config$client","config","log","newSocket","on","err","message","initialState","roomCode","appPhase","data","socketId","id","newState","prevState","gameInProgress","players","updatePlayerList","playerId","player","disconnect","current","clearInterval","Math","floor","random","length","setInterval","prevIndex","prevTime","playerEntries","Object","entries","currentPlayerEntry","find","currentPlayer","score","scoreChange","max","setTimeout","handleKeyDown","e","code","emit","type","direction","isCurrentlyReady","readyPlayers","includes","handleKeyUp","window","addEventListener","removeEventListener","handleCreateRoom","playerName","handleJoinRoom","handleLeaveRoom","handlePlayerReady","isReady","handleStartGame","handleSetGameMode","mode","handleGameOverTimeout","getCurrentBackgroundUrl","process","env","PUBLIC_URL","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","location","reload","style","padding","backgroundColor","border","borderRadius","color","cursor","marginTop","backgroundImage","backgroundSize","backgroundPosition","transition","minHeight","tabIndex","onCreateRoom","onJoinRoom","currentPlayerId","onReady","onStartGame","onLeaveRoom","onSetGameMode","gameMode","isHost","backdropFilter","margin","maxWidth","display","justifyContent","alignItems","marginBottom","fontSize","gap","flexDirection","fontWeight","substring","board","linesToClear","minWidth","listStyle","map","isCurrentPlayer","shortId","borderLeft","name","playerNumber","marginLeft","textAlign","onTimeout","_c","$RefreshReg$"],"sources":["/Users/driesrooryck/Desktop/s25/distributed-systems/tetris/client/src/App.js"],"sourcesContent":["import React, { useEffect, useState, useCallback, useRef } from 'react';\nimport { io } from 'socket.io-client';\nimport BoardStage from './BoardStage';\nimport NewHomeScreen from './NewHomeScreen';\nimport ReadyScreen from './ReadyScreen';\nimport GameOverScreen from './GameOverScreen';\nimport ScorePanel from './ScorePanel';\nimport './App.css';\n\n// Background image configuration\nconst BACKGROUND_IMAGES = [\n  'deep-tetris-color.jpg',\n  'tetris-1920-x-1080-background-hyihqau5t3lalo4e.png',\n  'tetris-2560-x-1600-background-3bjbi7nyulqbller.jpg',\n];\nconst BACKGROUND_CHANGE_INTERVAL = 30000; // 30 seconds\n\n// Load config file to get server address\nconst loadConfig = async () => {\n  try {\n    const response = await fetch('/config.json');\n    if (!response.ok) {\n      throw new Error(`Failed to load config: ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.warn('Error loading config, using default server address:', error);\n    return { client: { serverAddress: 'http://localhost:3001' } };\n  }\n};\n\nfunction App() {\n  const [socket, setSocket] = useState(null);\n  const [gameState, setGameState] = useState(null);\n  const [isGameOver, setIsGameOver] = useState(false);\n  const [gameOverData, setGameOverData] = useState(null);\n  const [isConnecting, setIsConnecting] = useState(true);\n  const [error, setError] = useState(null);\n  const [socketError, setSocketError] = useState(null);\n\n  // Hard‐drop guard so holding space won't repeat\n  const hardDropActiveRef = useRef(false);\n\n  // Add state for background rotation\n  const [currentBackgroundIndex, setCurrentBackgroundIndex] = useState(0);\n  const backgroundIntervalRef = useRef(null);\n\n  // Add state for timer and scoring\n  const [elapsedTime, setElapsedTime] = useState(0);\n  const [currentScore, setCurrentScore] = useState(0);\n  const [lastScoreChange, setLastScoreChange] = useState(0);\n  const [level, setLevel] = useState(1);\n  const timerIntervalRef = useRef(null);\n\n  // Connect to socket on component mount\n  useEffect(() => {\n    const connectToServer = async () => {\n      try {\n        setIsConnecting(true);\n\n        // Load configuration\n        const config = await loadConfig();\n        const serverAddress = config.client?.serverAddress || 'http://localhost:3001';\n\n        console.log(`Connecting to server at: ${serverAddress}`);\n\n        // Create new socket connection\n        const newSocket = io(serverAddress);\n        setSocket(newSocket);\n\n        // Socket event handlers\n        newSocket.on('connect', () => {\n          console.log('Connected to server');\n          setIsConnecting(false);\n          setSocketError(null);\n        });\n\n        newSocket.on('connect_error', (err) => {\n          console.error('Connection error:', err);\n          setSocketError(`Connection error: ${err.message}`);\n          setIsConnecting(false);\n        });\n\n        // Handle initial state\n        newSocket.on('init', (initialState) => {\n          console.log('Received initial game state:', initialState);\n          setGameState(initialState);\n        });\n        \n        // Handle room creation\n        newSocket.on('roomCreated', ({ roomCode, gameState }) => {\n          console.log(`Room created: ${roomCode}`);\n          setGameState({\n            ...gameState,\n            appPhase: 'readyscreen'\n          });\n          setError(null);\n        });\n        \n        // Handle room join\n        newSocket.on('roomJoined', ({ roomCode, gameState }) => {\n          console.log(`Joined room: ${roomCode}`);\n          setGameState({\n            ...gameState,\n            appPhase: 'readyscreen'\n          });\n          setError(null);\n        });\n        \n        // Handle leaving room\n        newSocket.on('roomLeft', (data) => {\n          console.log('Left room');\n          setGameState({\n            appPhase: 'homescreen',\n            socketId: newSocket.id\n          });\n        });\n        \n        // Handle errors\n        newSocket.on('error', ({ message }) => {\n          console.error('Server error:', message);\n          setError(message);\n        });\n\n        // Handle game state updates\n        newSocket.on('gameState', (newState) => {\n          setGameState(prevState => {\n            // If we're showing gameInProgress screen, only update if returning to lobby\n            if (prevState?.gameInProgress && !prevState.players[newSocket.id] &&\n                newState.appPhase === 'playing') {\n              // Don't update state - keep showing \"Game in Progress\" screen\n              return prevState;\n            }\n\n            // Update player list if we have new state\n            if (newState && newState.players) {\n              updatePlayerList(newState.players);\n            }\n\n            // Otherwise update normally\n            return newState;\n          });\n        });\n\n        // Handle game over\n        newSocket.on('gameOver', (data) => {\n          console.log('Game over with data:', data);\n          setIsGameOver(true);\n          setGameOverData(data);\n        });\n        \n        // Handle player joined notification\n        newSocket.on('playerJoined', ({ playerId, player, gameState }) => {\n          console.log(`Player joined: ${playerId}`);\n          setGameState(gameState);\n        });\n        \n        // Handle player left notification\n        newSocket.on('playerLeft', ({ playerId, gameState }) => {\n          console.log(`Player left: ${playerId}`);\n          setGameState(gameState);\n        });\n        \n        // Handle host assignment (when previous host leaves)\n        newSocket.on('hostAssigned', ({ gameState }) => {\n          console.log('You are now the host');\n          setGameState(gameState);\n        });\n\n        // Return cleanup function\n        return () => {\n          console.log('Disconnecting socket');\n          newSocket.disconnect();\n        };\n      } catch (err) {\n        console.error('Error connecting to server:', err);\n        setSocketError(`Error connecting to server: ${err.message}`);\n        setIsConnecting(false);\n      }\n    };\n\n    connectToServer();\n  }, []);\n\n  // Background rotation effect - only active during gameplay\n  useEffect(() => {\n    // Clear any existing background rotation interval\n    if (backgroundIntervalRef.current) {\n      clearInterval(backgroundIntervalRef.current);\n      backgroundIntervalRef.current = null;\n    }\n\n    // Start background rotation when game is playing\n    if (gameState && gameState.appPhase === 'playing') {\n      // Randomize starting background\n      setCurrentBackgroundIndex(Math.floor(Math.random() * BACKGROUND_IMAGES.length));\n\n      // Set interval to rotate backgrounds\n      backgroundIntervalRef.current = setInterval(() => {\n        setCurrentBackgroundIndex(prevIndex =>\n          (prevIndex + 1) % BACKGROUND_IMAGES.length\n        );\n      }, BACKGROUND_CHANGE_INTERVAL);\n    }\n\n    // Cleanup on unmount or phase change\n    return () => {\n      if (backgroundIntervalRef.current) {\n        clearInterval(backgroundIntervalRef.current);\n        backgroundIntervalRef.current = null;\n      }\n    };\n  }, [gameState?.appPhase]);\n\n  // Timer management based on game phase\n  useEffect(() => {\n    // Clean up the previous interval if it exists\n    if (timerIntervalRef.current) {\n      clearInterval(timerIntervalRef.current);\n      timerIntervalRef.current = null;\n    }\n\n    if (gameState && gameState.appPhase === 'playing') {\n      // Reset the timer when game starts\n      setElapsedTime(0);\n      setCurrentScore(0);\n      setLastScoreChange(0);\n      setLevel(1);\n\n      // Start a new timer that updates every 10ms for centisecond precision\n      timerIntervalRef.current = setInterval(() => {\n        setElapsedTime(prevTime => prevTime + 10);\n      }, 10);\n\n      console.log('Timer started');\n    }\n\n    // Cleanup on unmount or phase change\n    return () => {\n      if (timerIntervalRef.current) {\n        clearInterval(timerIntervalRef.current);\n        timerIntervalRef.current = null;\n      }\n    };\n  }, [gameState?.appPhase]);\n\n  // Update the player list for display and track current player's score\n  const updatePlayerList = useCallback((players) => {\n    if (!players || typeof players !== 'object') return;\n\n    // Map player data to what we need\n    const playerEntries = Object.entries(players);\n\n    // Update current player score state for the score panel\n    if (socket) {\n      const currentPlayerEntry = playerEntries.find(([id]) => id === socket.id);\n      if (currentPlayerEntry) {\n        const [, currentPlayer] = currentPlayerEntry;\n\n        // Update score if changed\n        if (currentPlayer.score !== currentScore) {\n          const scoreChange = Math.max(0, currentPlayer.score - currentScore);\n          if (scoreChange > 0) {\n            setLastScoreChange(scoreChange);\n            // Reset the score change highlight after 1 second\n            setTimeout(() => setLastScoreChange(0), 1000);\n          }\n          setCurrentScore(currentPlayer.score);\n        }\n\n        // Update level if changed\n        if (currentPlayer.level && currentPlayer.level !== level) {\n          setLevel(currentPlayer.level);\n        }\n      }\n    }\n  }, [currentScore, level, socket]);\n\n  // Keyboard control handlers\n  useEffect(() => {\n    if (!socket || !gameState) return;\n\n    const handleKeyDown = (e) => {\n      // Only process key events if game is in progress\n      if (gameState.appPhase === 'playing') {\n        switch (e.code) {\n          case 'ArrowLeft':\n            // First send immediate move, then start DAS\n            socket.emit('playerAction', { type: 'moveLeft' });\n            socket.emit('playerAction', { type: 'startDAS', direction: 'left' });\n            break;\n          case 'ArrowRight':\n            // First send immediate move, then start DAS\n            socket.emit('playerAction', { type: 'moveRight' });\n            socket.emit('playerAction', { type: 'startDAS', direction: 'right' });\n            break;\n          case 'ArrowUp':\n          case 'KeyZ':\n            socket.emit('playerAction', { type: 'rotate' });\n            break;\n          case 'ArrowDown':\n            socket.emit('playerAction', { type: 'softDrop' });\n            break;\n          case 'Space':\n            // guard against auto‑repeat when holding space\n            if (!hardDropActiveRef.current) {\n              socket.emit('playerAction', { type: 'hardDrop' });\n              hardDropActiveRef.current = true;\n            }\n            break;\n          default:\n            break;\n        }\n      } else if (gameState.appPhase === 'readyscreen') {\n        // Handle ready toggle on X key press\n        if (e.code === 'KeyX') {\n          const isCurrentlyReady = gameState.readyPlayers && \n            gameState.readyPlayers.includes(socket.id);\n          console.log('X key pressed, toggling ready state:', !isCurrentlyReady);\n          socket.emit('playerReady', !isCurrentlyReady);\n        }\n      }\n    };\n\n    const handleKeyUp = (e) => {\n      // Only process key events if game is in progress\n      if (gameState.appPhase === 'playing') {\n        switch (e.code) {\n          case 'ArrowLeft':\n          case 'ArrowRight':\n            socket.emit('playerAction', { type: 'endDAS' });\n            break;\n          case 'ArrowDown':\n            socket.emit('playerAction', { type: 'endSoftDrop' });\n            break;\n          case 'Space':\n            // re‑enable hardDrop once key is released\n            hardDropActiveRef.current = false;\n            break;\n          default:\n            break;\n        }\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyDown);\n    window.addEventListener('keyup', handleKeyUp);\n\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n      window.removeEventListener('keyup', handleKeyUp);\n    };\n  }, [socket, gameState]);\n\n  // Room management handlers\n  const handleCreateRoom = useCallback((playerName) => {\n    if (socket) {\n      socket.emit('createRoom', playerName);\n    }\n  }, [socket]);\n  \n  const handleJoinRoom = useCallback((roomCode, playerName) => {\n    if (socket) {\n      socket.emit('joinRoom', { roomCode, playerName });\n    }\n  }, [socket]);\n  \n  const handleLeaveRoom = useCallback(() => {\n    if (socket) {\n      socket.emit('leaveRoom');\n    }\n  }, [socket]);\n\n  // Handle player ready state\n  const handlePlayerReady = useCallback((isReady) => {\n    if (socket) {\n      socket.emit('playerReady', isReady);\n    }\n  }, [socket]);\n\n  // Handle game start\n  const handleStartGame = useCallback(() => {\n    if (socket) {\n      socket.emit('startGame');\n    }\n  }, [socket]);\n\n  // Handle game mode change\n  const handleSetGameMode = useCallback((mode) => {\n    if (socket) {\n      socket.emit('setGameMode', mode);\n    }\n  }, [socket]);\n\n  // Handle game over timeout\n  const handleGameOverTimeout = useCallback(() => {\n    setIsGameOver(false);\n    setGameOverData(null);\n  }, []);\n\n  // Get the current background image URL\n  const getCurrentBackgroundUrl = () => {\n    if (!BACKGROUND_IMAGES.length) return null;\n    return `${process.env.PUBLIC_URL}/backgrounds/${BACKGROUND_IMAGES[currentBackgroundIndex]}`;\n  };\n\n  // Show loading or error screen\n  if (isConnecting) {\n    return <div className=\"App\"><h1>Connecting to server...</h1></div>;\n  }\n\n  if (socketError) {\n    return (\n      <div className=\"App\">\n        <h1>Connection Error</h1>\n        <p>{socketError}</p>\n        <p>Please check that the server is running and the configuration is correct.</p>\n        <button\n          onClick={() => window.location.reload()}\n          style={{\n            padding: '10px 20px',\n            backgroundColor: '#FF5733',\n            border: 'none',\n            borderRadius: '4px',\n            color: 'white',\n            cursor: 'pointer',\n            marginTop: '20px'\n          }}\n        >\n          Retry Connection\n        </button>\n      </div>\n    );\n  }\n\n  // Show loading screen if no game state\n  if (!gameState) {\n    return <div className=\"App\"><h1>Waiting for game state...</h1></div>;\n  }\n\n  // Render appropriate screen based on app phase\n  return (\n    <div\n      className=\"App\"\n      style={{\n        ...(gameState.appPhase === 'playing' && {\n          backgroundImage: `url(${getCurrentBackgroundUrl()})`,\n          backgroundSize: 'cover',\n          backgroundPosition: 'center',\n          transition: 'background-image 1s ease-in-out',\n          minHeight: '100vh'\n        })\n      }}\n      tabIndex=\"0\"\n    >\n      {gameState.appPhase === 'homescreen' && (\n        <NewHomeScreen\n          onCreateRoom={handleCreateRoom}\n          onJoinRoom={handleJoinRoom}\n          error={error}\n        />\n      )}\n      \n      {gameState.appPhase === 'readyscreen' && (\n        <ReadyScreen\n          roomCode={gameState.roomCode}\n          players={gameState.players || {}}\n          currentPlayerId={socket?.id}\n          readyPlayers={gameState.readyPlayers || []}\n          onReady={handlePlayerReady}\n          onStartGame={handleStartGame}\n          onLeaveRoom={handleLeaveRoom}\n          onSetGameMode={handleSetGameMode}\n          gameMode={gameState.gameMode}\n          gameInProgress={gameState.gameInProgress}\n          isHost={gameState.players?.[socket?.id]?.isHost}\n        />\n      )}\n\n      {gameState.appPhase === 'playing' && (\n        <div style={{\n          backgroundColor: 'rgba(0, 0, 0, 0.8)',\n          backdropFilter: 'blur(5px)',\n          padding: '20px',\n          borderRadius: '10px',\n          margin: '10px auto',\n          maxWidth: '900px'\n        }}>\n          <div style={{\n            display: 'flex',\n            justifyContent: 'space-between',\n            alignItems: 'center',\n            marginBottom: '15px'\n          }}>\n            <h1 style={{ margin: 0, fontSize: '28px', color: '#fff' }}>Tetristributed</h1>\n            <div style={{\n              display: 'flex',\n              alignItems: 'center',\n              gap: '15px'\n            }}>\n              <div style={{\n                fontSize: '14px',\n                backgroundColor: '#444',\n                padding: '5px 10px',\n                borderRadius: '4px',\n                display: 'flex',\n                flexDirection: 'column',\n                alignItems: 'center'\n              }}>\n                <span style={{fontSize: '10px', color: '#aaa'}}>ROOM</span>\n                <span style={{fontWeight: 'bold'}}>{gameState.roomCode}</span>\n              </div>\n              <div style={{\n                fontSize: '14px',\n                backgroundColor: '#333',\n                padding: '5px 10px',\n                borderRadius: '4px'\n              }}>\n                Player: {socket?.id && socket.id.substring(0, 4)}\n              </div>\n            </div>\n          </div>\n\n          <div style={{ display: 'flex', gap: '20px' }}>\n            <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n              <BoardStage\n                board={gameState.board || []}\n                players={gameState.players || {}}\n                linesToClear={gameState.linesToClear || []}\n              />\n            </div>\n\n            <div style={{\n              display: 'flex',\n              flexDirection: 'column',\n              minWidth: '220px'\n            }}>\n              {/* Integrated Score Panel with Timer */}\n              <ScorePanel\n                score={currentScore}\n                level={level}\n                lastScoreChange={lastScoreChange}\n                elapsedTime={elapsedTime}\n              />\n\n              {/* Players List */}\n              <div style={{\n                backgroundColor: 'rgba(40, 40, 40, 0.9)',\n                padding: '12px',\n                borderRadius: '8px',\n                marginTop: '15px'\n              }}>\n                <h2 style={{ margin: '0 0 10px 0', fontSize: '18px', color: '#ccc' }}>Players</h2>\n                <ul style={{ listStyle: 'none', padding: 0, margin: 0 }}>\n                  {Object.entries(gameState.players || {}).map(([id, player]) => {\n                    const isCurrentPlayer = id === socket?.id;\n                    const shortId = id.substring(0, 4);\n\n                    return (\n                      <li\n                        key={id}\n                        style={{\n                          margin: '6px 0',\n                          padding: '8px',\n                          backgroundColor: isCurrentPlayer ? '#444' : '#333',\n                          borderLeft: `4px solid ${player.color || '#ccc'}`,\n                          borderRadius: '4px',\n                          transition: 'background-color 0.3s'\n                        }}\n                      >\n                        <div style={{\n                          display: 'flex',\n                          alignItems: 'center',\n                          justifyContent: 'space-between'\n                        }}>\n                          <div>\n                            <span style={{\n                              fontWeight: isCurrentPlayer ? 'bold' : 'normal',\n                              color: isCurrentPlayer ? '#fff' : '#ccc'\n                            }}>\n                              {player.name || `Player ${player.playerNumber || shortId}`}\n                            </span>\n                            {isCurrentPlayer && <span style={{\n                              fontSize: '12px',\n                              marginLeft: '5px',\n                              color: '#ffcc00'\n                            }}>\n                              (You)\n                            </span>}\n                          </div>\n                          <div style={{\n                            backgroundColor: '#222',\n                            padding: '2px 6px',\n                            borderRadius: '3px',\n                            fontSize: '14px',\n                            fontWeight: 'bold'\n                          }}>\n                            {player.score || 0}\n                          </div>\n                        </div>\n                      </li>\n                    );\n                  })}\n                </ul>\n\n                <div style={{\n                  marginTop: '15px',\n                  padding: '8px',\n                  backgroundColor: '#222',\n                  borderRadius: '4px',\n                  textAlign: 'center'\n                }}>\n                  <div style={{ fontSize: '12px', color: '#aaa' }}>GAME MODE</div>\n                  <div style={{ fontSize: '16px', fontWeight: 'bold', marginTop: '4px' }}>\n                    {gameState.gameMode || 'Classic'}\n                  </div>\n                </div>\n              </div>\n\n              {/* Controls Help */}\n              <div style={{\n                backgroundColor: 'rgba(40, 40, 40, 0.7)',\n                padding: '12px',\n                borderRadius: '8px',\n                marginTop: '15px',\n                fontSize: '12px',\n                color: '#aaa'\n              }}>\n                <div style={{ marginBottom: '5px', fontWeight: 'bold', color: '#ccc' }}>Controls:</div>\n                <div>← → : Move</div>\n                <div>↓ : Soft Drop</div>\n                <div>↑ / Z : Rotate</div>\n                <div>Space : Hard Drop</div>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {isGameOver && gameOverData && (\n        <GameOverScreen\n          gameOverData={gameOverData}\n          currentPlayerId={socket?.id}\n          onTimeout={handleGameOverTimeout}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}