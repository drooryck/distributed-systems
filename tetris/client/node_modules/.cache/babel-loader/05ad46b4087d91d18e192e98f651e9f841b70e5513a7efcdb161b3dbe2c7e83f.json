{"ast":null,"code":"var _jsxFileName = \"/Users/driesrooryck/Desktop/s25/distributed-systems/tetris/client/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useCallback, useRef } from 'react';\nimport { io } from 'socket.io-client';\nimport BoardStage from './BoardStage';\nimport HomeScreen from './HomeScreen';\nimport GameOverScreen from './GameOverScreen';\nimport ScorePanel from './ScorePanel';\n\n// Background image configuration\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BACKGROUND_IMAGES = ['deep-tetris-color.jpg', 'tetris-1920-x-1080-background-hyihqau5t3lalo4e.png', 'tetris-2560-x-1600-background-3bjbi7nyulqbller.jpg'];\nconst BACKGROUND_CHANGE_INTERVAL = 30000; // 30 seconds\n\n// Load config file to get server address\nconst loadConfig = async () => {\n  try {\n    const response = await fetch('/config.json');\n    if (!response.ok) {\n      throw new Error(`Failed to load config: ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.warn('Error loading config, using default server address:', error);\n    return {\n      client: {\n        serverAddress: 'http://localhost:3001'\n      }\n    };\n  }\n};\nfunction App() {\n  _s();\n  var _gameState$players, _gameState$players$so;\n  const [socket, setSocket] = useState(null);\n  const [gameState, setGameState] = useState(null);\n  const [isGameOver, setIsGameOver] = useState(false);\n  const [gameOverData, setGameOverData] = useState(null);\n  const [isConnecting, setIsConnecting] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Hard‐drop guard so holding space won't repeat\n  const hardDropActiveRef = useRef(false);\n\n  // Add state for background rotation\n  const [currentBackgroundIndex, setCurrentBackgroundIndex] = useState(0);\n  const backgroundIntervalRef = useRef(null);\n\n  // Add state for timer and scoring\n  const [elapsedTime, setElapsedTime] = useState(0);\n  const [currentScore, setCurrentScore] = useState(0);\n  const [lastScoreChange, setLastScoreChange] = useState(0);\n  const [level, setLevel] = useState(1);\n  const timerIntervalRef = useRef(null);\n\n  // Connect to socket on component mount\n  useEffect(() => {\n    const connectToServer = async () => {\n      try {\n        var _config$client;\n        setIsConnecting(true);\n\n        // Load configuration\n        const config = await loadConfig();\n        const serverAddress = ((_config$client = config.client) === null || _config$client === void 0 ? void 0 : _config$client.serverAddress) || 'http://localhost:3001';\n        console.log(`Connecting to server at: ${serverAddress}`);\n\n        // Create new socket connection\n        const newSocket = io(serverAddress);\n        setSocket(newSocket);\n\n        // Socket event handlers\n        newSocket.on('connect', () => {\n          console.log('Connected to server');\n          setIsConnecting(false);\n        });\n        newSocket.on('connect_error', err => {\n          console.error('Connection error:', err);\n          setError(`Connection error: ${err.message}`);\n          setIsConnecting(false);\n        });\n        newSocket.on('init', initialState => {\n          console.log('Received initial game state:', initialState);\n          setGameState(initialState);\n          updatePlayerList(initialState.players || {});\n        });\n        newSocket.on('gameState', newState => {\n          setGameState(prevState => {\n            // If we're showing gameInProgress screen, only update if returning to lobby\n            if (prevState !== null && prevState !== void 0 && prevState.gameInProgress && !prevState.players[newSocket.id] && newState.appPhase === 'playing') {\n              // Don't update state - keep showing \"Game in Progress\" screen\n              return prevState;\n            }\n\n            // Update player list if we have new state\n            if (newState) {\n              updatePlayerList(newState.players || {});\n            }\n\n            // Otherwise update normally\n            return newState;\n          });\n        });\n        newSocket.on('gameOver', data => {\n          console.log('Game over with data:', data);\n          setIsGameOver(true);\n          setGameOverData(data);\n        });\n\n        // Return cleanup function\n        return () => {\n          console.log('Disconnecting socket');\n          newSocket.disconnect();\n        };\n      } catch (err) {\n        console.error('Error connecting to server:', err);\n        setError(`Error connecting to server: ${err.message}`);\n        setIsConnecting(false);\n      }\n    };\n    connectToServer();\n  }, []);\n\n  // Background rotation effect - only active during gameplay\n  useEffect(() => {\n    // Clear any existing background rotation interval\n    if (backgroundIntervalRef.current) {\n      clearInterval(backgroundIntervalRef.current);\n      backgroundIntervalRef.current = null;\n    }\n\n    // Start background rotation when game is playing\n    if (gameState && gameState.appPhase === 'playing') {\n      // Randomize starting background\n      setCurrentBackgroundIndex(Math.floor(Math.random() * BACKGROUND_IMAGES.length));\n\n      // Set interval to rotate backgrounds\n      backgroundIntervalRef.current = setInterval(() => {\n        setCurrentBackgroundIndex(prevIndex => (prevIndex + 1) % BACKGROUND_IMAGES.length);\n      }, BACKGROUND_CHANGE_INTERVAL);\n    }\n\n    // Cleanup on unmount or phase change\n    return () => {\n      if (backgroundIntervalRef.current) {\n        clearInterval(backgroundIntervalRef.current);\n        backgroundIntervalRef.current = null;\n      }\n    };\n  }, [gameState === null || gameState === void 0 ? void 0 : gameState.appPhase]);\n\n  // Timer management based on game phase\n  useEffect(() => {\n    // Clean up the previous interval if it exists\n    if (timerIntervalRef.current) {\n      clearInterval(timerIntervalRef.current);\n      timerIntervalRef.current = null;\n    }\n    if (gameState && gameState.appPhase === 'playing') {\n      // Reset the timer when game starts\n      setElapsedTime(0);\n      setCurrentScore(0);\n      setLastScoreChange(0);\n      setLevel(1);\n\n      // Start a new timer that updates every 10ms for centisecond precision\n      timerIntervalRef.current = setInterval(() => {\n        setElapsedTime(prevTime => prevTime + 10);\n      }, 10);\n      console.log('Timer started');\n    }\n\n    // Cleanup on unmount or phase change\n    return () => {\n      if (timerIntervalRef.current) {\n        clearInterval(timerIntervalRef.current);\n        timerIntervalRef.current = null;\n      }\n    };\n  }, [gameState === null || gameState === void 0 ? void 0 : gameState.appPhase]);\n\n  // Update the player list for display and track current player's score\n  const updatePlayerList = useCallback(players => {\n    if (!players || typeof players !== 'object') return;\n\n    // Map player data to what we need\n    const playerEntries = Object.entries(players);\n\n    // Update current player score state for the score panel\n    if (socket) {\n      const currentPlayerEntry = playerEntries.find(([id]) => id === socket.id);\n      if (currentPlayerEntry) {\n        const [, currentPlayer] = currentPlayerEntry;\n\n        // Update score if changed\n        if (currentPlayer.score !== currentScore) {\n          const scoreChange = Math.max(0, currentPlayer.score - currentScore);\n          if (scoreChange > 0) {\n            setLastScoreChange(scoreChange);\n            // Reset the score change highlight after 1 second\n            setTimeout(() => setLastScoreChange(0), 1000);\n          }\n          setCurrentScore(currentPlayer.score);\n        }\n\n        // Update level if changed\n        if (currentPlayer.level && currentPlayer.level !== level) {\n          setLevel(currentPlayer.level);\n        }\n      }\n    }\n  }, [currentScore, level, socket]);\n\n  // Keyboard control handlers\n  useEffect(() => {\n    if (!socket || !gameState) return;\n    const handleKeyDown = e => {\n      // Only process key events if game is in progress\n      if (gameState.appPhase === 'playing') {\n        switch (e.code) {\n          case 'ArrowLeft':\n            // First send immediate move, then start DAS\n            socket.emit('playerAction', {\n              type: 'moveLeft'\n            });\n            socket.emit('playerAction', {\n              type: 'startDAS',\n              direction: 'left'\n            });\n            break;\n          case 'ArrowRight':\n            // First send immediate move, then start DAS\n            socket.emit('playerAction', {\n              type: 'moveRight'\n            });\n            socket.emit('playerAction', {\n              type: 'startDAS',\n              direction: 'right'\n            });\n            break;\n          case 'ArrowUp':\n          case 'KeyZ':\n            socket.emit('playerAction', {\n              type: 'rotate'\n            });\n            break;\n          case 'ArrowDown':\n            socket.emit('playerAction', {\n              type: 'softDrop'\n            });\n            break;\n          case 'Space':\n            // guard against auto‑repeat when holding space\n            if (!hardDropActiveRef.current) {\n              socket.emit('playerAction', {\n                type: 'hardDrop'\n              });\n              hardDropActiveRef.current = true;\n            }\n            break;\n          default:\n            break;\n        }\n      } else if (gameState.appPhase === 'homescreen') {\n        // Handle ready toggle on X key press\n        if (e.code === 'KeyX') {\n          const isCurrentlyReady = gameState.readyPlayers.includes(socket.id);\n          console.log('X key pressed, toggling ready state:', !isCurrentlyReady);\n          socket.emit('playerReady', !isCurrentlyReady);\n        }\n      }\n    };\n    const handleKeyUp = e => {\n      // Only process key events if game is in progress\n      if (gameState.appPhase === 'playing') {\n        switch (e.code) {\n          case 'ArrowLeft':\n          case 'ArrowRight':\n            socket.emit('playerAction', {\n              type: 'endDAS'\n            });\n            break;\n          case 'ArrowDown':\n            socket.emit('playerAction', {\n              type: 'endSoftDrop'\n            });\n            break;\n          case 'Space':\n            // re‑enable hardDrop once key is released\n            hardDropActiveRef.current = false;\n            break;\n          default:\n            break;\n        }\n      }\n    };\n    window.addEventListener('keydown', handleKeyDown);\n    window.addEventListener('keyup', handleKeyUp);\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n      window.removeEventListener('keyup', handleKeyUp);\n    };\n  }, [socket, gameState]);\n\n  // Handle player ready state\n  const handlePlayerReady = useCallback(isReady => {\n    if (socket) {\n      socket.emit('playerReady', isReady);\n    }\n  }, [socket]);\n\n  // Handle game start\n  const handleStartGame = useCallback(() => {\n    if (socket) {\n      socket.emit('startGame');\n    }\n  }, [socket]);\n\n  // Handle game mode change\n  const handleSetGameMode = useCallback(mode => {\n    if (socket) {\n      socket.emit('setGameMode', mode);\n    }\n  }, [socket]);\n\n  // Handle game over timeout\n  const handleGameOverTimeout = useCallback(() => {\n    setIsGameOver(false);\n    setGameOverData(null);\n  }, []);\n\n  // Get the current background image URL\n  const getCurrentBackgroundUrl = () => {\n    if (!BACKGROUND_IMAGES.length) return null;\n    return `${process.env.PUBLIC_URL}/backgrounds/${BACKGROUND_IMAGES[currentBackgroundIndex]}`;\n  };\n\n  // Show loading or error screen\n  if (isConnecting) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Connecting to server...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 33\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 12\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Connection Error\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Please check that the server is running and the configuration is correct.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => window.location.reload(),\n        style: {\n          padding: '10px 20px',\n          backgroundColor: '#FF5733',\n          border: 'none',\n          borderRadius: '4px',\n          color: 'white',\n          cursor: 'pointer',\n          marginTop: '20px'\n        },\n        children: \"Retry Connection\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 335,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Show loading screen if no game state\n  if (!gameState) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Waiting for game state...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 359,\n        columnNumber: 33\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 359,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Home screen or game screen based on app phase\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    style: {\n      // Apply background image only during gameplay\n      ...(gameState.appPhase === 'playing' && {\n        backgroundImage: `url(${getCurrentBackgroundUrl()})`,\n        backgroundSize: 'cover',\n        backgroundPosition: 'center',\n        transition: 'background-image 1s ease-in-out',\n        minHeight: '100vh'\n      })\n    },\n    tabIndex: \"0\",\n    children: [gameState.appPhase === 'homescreen' && /*#__PURE__*/_jsxDEV(HomeScreen, {\n      players: gameState.players || {},\n      currentPlayerId: socket === null || socket === void 0 ? void 0 : socket.id,\n      readyPlayers: gameState.readyPlayers || [],\n      onReady: handlePlayerReady,\n      onStartGame: handleStartGame,\n      onSetGameMode: handleSetGameMode,\n      gameMode: gameState.gameMode,\n      gameInProgress: gameState.gameInProgress,\n      isRejoining: (_gameState$players = gameState.players) === null || _gameState$players === void 0 ? void 0 : (_gameState$players$so = _gameState$players[socket === null || socket === void 0 ? void 0 : socket.id]) === null || _gameState$players$so === void 0 ? void 0 : _gameState$players$so.isRejoining\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 379,\n      columnNumber: 9\n    }, this), gameState.appPhase === 'playing' && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        backgroundColor: 'rgba(0, 0, 0, 0.8)',\n        backdropFilter: 'blur(5px)',\n        padding: '20px',\n        borderRadius: '10px',\n        margin: '10px auto',\n        maxWidth: '900px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          justifyContent: 'space-between',\n          alignItems: 'center',\n          marginBottom: '15px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          style: {\n            margin: 0,\n            fontSize: '28px',\n            color: '#fff'\n          },\n          children: \"Tetristributed\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 407,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            fontSize: '14px',\n            backgroundColor: '#333',\n            padding: '5px 10px',\n            borderRadius: '4px'\n          },\n          children: [\"Player: \", (socket === null || socket === void 0 ? void 0 : socket.id) && socket.id.substring(0, 4)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 408,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 401,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          gap: '20px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center'\n          },\n          children: /*#__PURE__*/_jsxDEV(BoardStage, {\n            board: gameState.board || [],\n            players: gameState.players || {},\n            linesToClear: gameState.linesToClear || []\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 420,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 419,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            flexDirection: 'column',\n            minWidth: '220px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(ScorePanel, {\n            score: currentScore,\n            level: level,\n            lastScoreChange: lastScoreChange,\n            elapsedTime: elapsedTime\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 433,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              backgroundColor: 'rgba(40, 40, 40, 0.9)',\n              padding: '12px',\n              borderRadius: '8px',\n              marginTop: '15px'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              style: {\n                margin: '0 0 10px 0',\n                fontSize: '18px',\n                color: '#ccc'\n              },\n              children: \"Players\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 447,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n              style: {\n                listStyle: 'none',\n                padding: 0,\n                margin: 0\n              },\n              children: Object.entries(gameState.players || {}).map(([id, player]) => {\n                const isCurrentPlayer = id === (socket === null || socket === void 0 ? void 0 : socket.id);\n                const shortId = id.substring(0, 4);\n                return /*#__PURE__*/_jsxDEV(\"li\", {\n                  style: {\n                    margin: '6px 0',\n                    padding: '8px',\n                    backgroundColor: isCurrentPlayer ? '#444' : '#333',\n                    borderLeft: `4px solid ${player.color || '#ccc'}`,\n                    borderRadius: '4px',\n                    transition: 'background-color 0.3s'\n                  },\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    style: {\n                      display: 'flex',\n                      alignItems: 'center',\n                      justifyContent: 'space-between'\n                    },\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                        style: {\n                          fontWeight: isCurrentPlayer ? 'bold' : 'normal',\n                          color: isCurrentPlayer ? '#fff' : '#ccc'\n                        },\n                        children: [\"Player \", player.playerNumber || shortId]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 471,\n                        columnNumber: 29\n                      }, this), isCurrentPlayer && /*#__PURE__*/_jsxDEV(\"span\", {\n                        style: {\n                          fontSize: '12px',\n                          marginLeft: '5px',\n                          color: '#ffcc00'\n                        },\n                        children: \"(You)\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 477,\n                        columnNumber: 49\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 470,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      style: {\n                        backgroundColor: '#222',\n                        padding: '2px 6px',\n                        borderRadius: '3px',\n                        fontSize: '14px',\n                        fontWeight: 'bold'\n                      },\n                      children: player.score || 0\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 485,\n                      columnNumber: 27\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 465,\n                    columnNumber: 25\n                  }, this)\n                }, id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 454,\n                  columnNumber: 23\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 448,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                marginTop: '15px',\n                padding: '8px',\n                backgroundColor: '#222',\n                borderRadius: '4px',\n                textAlign: 'center'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  fontSize: '12px',\n                  color: '#aaa'\n                },\n                children: \"GAME MODE\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 507,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  fontSize: '16px',\n                  fontWeight: 'bold',\n                  marginTop: '4px'\n                },\n                children: gameState.gameMode || 'Classic'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 508,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 500,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 441,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              backgroundColor: 'rgba(40, 40, 40, 0.7)',\n              padding: '12px',\n              borderRadius: '8px',\n              marginTop: '15px',\n              fontSize: '12px',\n              color: '#aaa'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                marginBottom: '5px',\n                fontWeight: 'bold',\n                color: '#ccc'\n              },\n              children: \"Controls:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 523,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: \"\\u2190 \\u2192 : Move\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 524,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: \"\\u2193 : Soft Drop\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 525,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: \"\\u2191 / Z : Rotate\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 526,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: \"Space : Hard Drop\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 527,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 515,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 427,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 418,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 393,\n      columnNumber: 9\n    }, this), isGameOver && gameOverData && /*#__PURE__*/_jsxDEV(GameOverScreen, {\n      gameOverData: gameOverData,\n      currentPlayerId: socket === null || socket === void 0 ? void 0 : socket.id,\n      onTimeout: handleGameOverTimeout\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 535,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 364,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"mJeaDJCi81IF2bdh83+QcwHRvkY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","useCallback","useRef","io","BoardStage","HomeScreen","GameOverScreen","ScorePanel","jsxDEV","_jsxDEV","BACKGROUND_IMAGES","BACKGROUND_CHANGE_INTERVAL","loadConfig","response","fetch","ok","Error","status","json","error","console","warn","client","serverAddress","App","_s","_gameState$players","_gameState$players$so","socket","setSocket","gameState","setGameState","isGameOver","setIsGameOver","gameOverData","setGameOverData","isConnecting","setIsConnecting","setError","hardDropActiveRef","currentBackgroundIndex","setCurrentBackgroundIndex","backgroundIntervalRef","elapsedTime","setElapsedTime","currentScore","setCurrentScore","lastScoreChange","setLastScoreChange","level","setLevel","timerIntervalRef","connectToServer","_config$client","config","log","newSocket","on","err","message","initialState","updatePlayerList","players","newState","prevState","gameInProgress","id","appPhase","data","disconnect","current","clearInterval","Math","floor","random","length","setInterval","prevIndex","prevTime","playerEntries","Object","entries","currentPlayerEntry","find","currentPlayer","score","scoreChange","max","setTimeout","handleKeyDown","e","code","emit","type","direction","isCurrentlyReady","readyPlayers","includes","handleKeyUp","window","addEventListener","removeEventListener","handlePlayerReady","isReady","handleStartGame","handleSetGameMode","mode","handleGameOverTimeout","getCurrentBackgroundUrl","process","env","PUBLIC_URL","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","location","reload","style","padding","backgroundColor","border","borderRadius","color","cursor","marginTop","backgroundImage","backgroundSize","backgroundPosition","transition","minHeight","tabIndex","currentPlayerId","onReady","onStartGame","onSetGameMode","gameMode","isRejoining","backdropFilter","margin","maxWidth","display","justifyContent","alignItems","marginBottom","fontSize","substring","gap","flexDirection","board","linesToClear","minWidth","listStyle","map","player","isCurrentPlayer","shortId","borderLeft","fontWeight","playerNumber","marginLeft","textAlign","onTimeout","_c","$RefreshReg$"],"sources":["/Users/driesrooryck/Desktop/s25/distributed-systems/tetris/client/src/App.js"],"sourcesContent":["import React, { useEffect, useState, useCallback, useRef } from 'react';\nimport { io } from 'socket.io-client';\nimport BoardStage from './BoardStage';\nimport HomeScreen from './HomeScreen';\nimport GameOverScreen from './GameOverScreen';\nimport ScorePanel from './ScorePanel';\n\n// Background image configuration\nconst BACKGROUND_IMAGES = [\n  'deep-tetris-color.jpg',\n  'tetris-1920-x-1080-background-hyihqau5t3lalo4e.png',\n  'tetris-2560-x-1600-background-3bjbi7nyulqbller.jpg',\n];\nconst BACKGROUND_CHANGE_INTERVAL = 30000; // 30 seconds\n\n// Load config file to get server address\nconst loadConfig = async () => {\n  try {\n    const response = await fetch('/config.json');\n    if (!response.ok) {\n      throw new Error(`Failed to load config: ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.warn('Error loading config, using default server address:', error);\n    return { client: { serverAddress: 'http://localhost:3001' } };\n  }\n};\n\nfunction App() {\n  const [socket, setSocket] = useState(null);\n  const [gameState, setGameState] = useState(null);\n  const [isGameOver, setIsGameOver] = useState(false);\n  const [gameOverData, setGameOverData] = useState(null);\n  const [isConnecting, setIsConnecting] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Hard‐drop guard so holding space won't repeat\n  const hardDropActiveRef = useRef(false);\n\n  // Add state for background rotation\n  const [currentBackgroundIndex, setCurrentBackgroundIndex] = useState(0);\n  const backgroundIntervalRef = useRef(null);\n\n  // Add state for timer and scoring\n  const [elapsedTime, setElapsedTime] = useState(0);\n  const [currentScore, setCurrentScore] = useState(0);\n  const [lastScoreChange, setLastScoreChange] = useState(0);\n  const [level, setLevel] = useState(1);\n  const timerIntervalRef = useRef(null);\n\n  // Connect to socket on component mount\n  useEffect(() => {\n    const connectToServer = async () => {\n      try {\n        setIsConnecting(true);\n\n        // Load configuration\n        const config = await loadConfig();\n        const serverAddress = config.client?.serverAddress || 'http://localhost:3001';\n\n        console.log(`Connecting to server at: ${serverAddress}`);\n\n        // Create new socket connection\n        const newSocket = io(serverAddress);\n        setSocket(newSocket);\n\n        // Socket event handlers\n        newSocket.on('connect', () => {\n          console.log('Connected to server');\n          setIsConnecting(false);\n        });\n\n        newSocket.on('connect_error', (err) => {\n          console.error('Connection error:', err);\n          setError(`Connection error: ${err.message}`);\n          setIsConnecting(false);\n        });\n\n        newSocket.on('init', (initialState) => {\n          console.log('Received initial game state:', initialState);\n          setGameState(initialState);\n          updatePlayerList(initialState.players || {});\n        });\n\n        newSocket.on('gameState', (newState) => {\n          setGameState(prevState => {\n            // If we're showing gameInProgress screen, only update if returning to lobby\n            if (prevState?.gameInProgress && !prevState.players[newSocket.id] &&\n                newState.appPhase === 'playing') {\n              // Don't update state - keep showing \"Game in Progress\" screen\n              return prevState;\n            }\n\n            // Update player list if we have new state\n            if (newState) {\n              updatePlayerList(newState.players || {});\n            }\n\n            // Otherwise update normally\n            return newState;\n          });\n        });\n\n        newSocket.on('gameOver', (data) => {\n          console.log('Game over with data:', data);\n          setIsGameOver(true);\n          setGameOverData(data);\n        });\n\n        // Return cleanup function\n        return () => {\n          console.log('Disconnecting socket');\n          newSocket.disconnect();\n        };\n      } catch (err) {\n        console.error('Error connecting to server:', err);\n        setError(`Error connecting to server: ${err.message}`);\n        setIsConnecting(false);\n      }\n    };\n\n    connectToServer();\n  }, []);\n\n  // Background rotation effect - only active during gameplay\n  useEffect(() => {\n    // Clear any existing background rotation interval\n    if (backgroundIntervalRef.current) {\n      clearInterval(backgroundIntervalRef.current);\n      backgroundIntervalRef.current = null;\n    }\n\n    // Start background rotation when game is playing\n    if (gameState && gameState.appPhase === 'playing') {\n      // Randomize starting background\n      setCurrentBackgroundIndex(Math.floor(Math.random() * BACKGROUND_IMAGES.length));\n\n      // Set interval to rotate backgrounds\n      backgroundIntervalRef.current = setInterval(() => {\n        setCurrentBackgroundIndex(prevIndex =>\n          (prevIndex + 1) % BACKGROUND_IMAGES.length\n        );\n      }, BACKGROUND_CHANGE_INTERVAL);\n    }\n\n    // Cleanup on unmount or phase change\n    return () => {\n      if (backgroundIntervalRef.current) {\n        clearInterval(backgroundIntervalRef.current);\n        backgroundIntervalRef.current = null;\n      }\n    };\n  }, [gameState?.appPhase]);\n\n  // Timer management based on game phase\n  useEffect(() => {\n    // Clean up the previous interval if it exists\n    if (timerIntervalRef.current) {\n      clearInterval(timerIntervalRef.current);\n      timerIntervalRef.current = null;\n    }\n\n    if (gameState && gameState.appPhase === 'playing') {\n      // Reset the timer when game starts\n      setElapsedTime(0);\n      setCurrentScore(0);\n      setLastScoreChange(0);\n      setLevel(1);\n\n      // Start a new timer that updates every 10ms for centisecond precision\n      timerIntervalRef.current = setInterval(() => {\n        setElapsedTime(prevTime => prevTime + 10);\n      }, 10);\n\n      console.log('Timer started');\n    }\n\n    // Cleanup on unmount or phase change\n    return () => {\n      if (timerIntervalRef.current) {\n        clearInterval(timerIntervalRef.current);\n        timerIntervalRef.current = null;\n      }\n    };\n  }, [gameState?.appPhase]);\n\n  // Update the player list for display and track current player's score\n  const updatePlayerList = useCallback((players) => {\n    if (!players || typeof players !== 'object') return;\n\n    // Map player data to what we need\n    const playerEntries = Object.entries(players);\n\n    // Update current player score state for the score panel\n    if (socket) {\n      const currentPlayerEntry = playerEntries.find(([id]) => id === socket.id);\n      if (currentPlayerEntry) {\n        const [, currentPlayer] = currentPlayerEntry;\n\n        // Update score if changed\n        if (currentPlayer.score !== currentScore) {\n          const scoreChange = Math.max(0, currentPlayer.score - currentScore);\n          if (scoreChange > 0) {\n            setLastScoreChange(scoreChange);\n            // Reset the score change highlight after 1 second\n            setTimeout(() => setLastScoreChange(0), 1000);\n          }\n          setCurrentScore(currentPlayer.score);\n        }\n\n        // Update level if changed\n        if (currentPlayer.level && currentPlayer.level !== level) {\n          setLevel(currentPlayer.level);\n        }\n      }\n    }\n  }, [currentScore, level, socket]);\n\n  // Keyboard control handlers\n  useEffect(() => {\n    if (!socket || !gameState) return;\n\n    const handleKeyDown = (e) => {\n      // Only process key events if game is in progress\n      if (gameState.appPhase === 'playing') {\n        switch (e.code) {\n          case 'ArrowLeft':\n            // First send immediate move, then start DAS\n            socket.emit('playerAction', { type: 'moveLeft' });\n            socket.emit('playerAction', { type: 'startDAS', direction: 'left' });\n            break;\n          case 'ArrowRight':\n            // First send immediate move, then start DAS\n            socket.emit('playerAction', { type: 'moveRight' });\n            socket.emit('playerAction', { type: 'startDAS', direction: 'right' });\n            break;\n          case 'ArrowUp':\n          case 'KeyZ':\n            socket.emit('playerAction', { type: 'rotate' });\n            break;\n          case 'ArrowDown':\n            socket.emit('playerAction', { type: 'softDrop' });\n            break;\n          case 'Space':\n            // guard against auto‑repeat when holding space\n            if (!hardDropActiveRef.current) {\n              socket.emit('playerAction', { type: 'hardDrop' });\n              hardDropActiveRef.current = true;\n            }\n            break;\n          default:\n            break;\n        }\n      } else if (gameState.appPhase === 'homescreen') {\n        // Handle ready toggle on X key press\n        if (e.code === 'KeyX') {\n          const isCurrentlyReady = gameState.readyPlayers.includes(socket.id);\n          console.log('X key pressed, toggling ready state:', !isCurrentlyReady);\n          socket.emit('playerReady', !isCurrentlyReady);\n        }\n      }\n    };\n\n    const handleKeyUp = (e) => {\n      // Only process key events if game is in progress\n      if (gameState.appPhase === 'playing') {\n        switch (e.code) {\n          case 'ArrowLeft':\n          case 'ArrowRight':\n            socket.emit('playerAction', { type: 'endDAS' });\n            break;\n          case 'ArrowDown':\n            socket.emit('playerAction', { type: 'endSoftDrop' });\n            break;\n          case 'Space':\n            // re‑enable hardDrop once key is released\n            hardDropActiveRef.current = false;\n            break;\n          default:\n            break;\n        }\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyDown);\n    window.addEventListener('keyup', handleKeyUp);\n\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n      window.removeEventListener('keyup', handleKeyUp);\n    };\n  }, [socket, gameState]);\n\n  // Handle player ready state\n  const handlePlayerReady = useCallback((isReady) => {\n    if (socket) {\n      socket.emit('playerReady', isReady);\n    }\n  }, [socket]);\n\n  // Handle game start\n  const handleStartGame = useCallback(() => {\n    if (socket) {\n      socket.emit('startGame');\n    }\n  }, [socket]);\n\n  // Handle game mode change\n  const handleSetGameMode = useCallback((mode) => {\n    if (socket) {\n      socket.emit('setGameMode', mode);\n    }\n  }, [socket]);\n\n  // Handle game over timeout\n  const handleGameOverTimeout = useCallback(() => {\n    setIsGameOver(false);\n    setGameOverData(null);\n  }, []);\n\n  // Get the current background image URL\n  const getCurrentBackgroundUrl = () => {\n    if (!BACKGROUND_IMAGES.length) return null;\n    return `${process.env.PUBLIC_URL}/backgrounds/${BACKGROUND_IMAGES[currentBackgroundIndex]}`;\n  };\n\n  // Show loading or error screen\n  if (isConnecting) {\n    return <div className=\"App\"><h1>Connecting to server...</h1></div>;\n  }\n\n  if (error) {\n    return (\n      <div className=\"App\">\n        <h1>Connection Error</h1>\n        <p>{error}</p>\n        <p>Please check that the server is running and the configuration is correct.</p>\n        <button\n          onClick={() => window.location.reload()}\n          style={{\n            padding: '10px 20px',\n            backgroundColor: '#FF5733',\n            border: 'none',\n            borderRadius: '4px',\n            color: 'white',\n            cursor: 'pointer',\n            marginTop: '20px'\n          }}\n        >\n          Retry Connection\n        </button>\n      </div>\n    );\n  }\n\n  // Show loading screen if no game state\n  if (!gameState) {\n    return <div className=\"App\"><h1>Waiting for game state...</h1></div>;\n  }\n\n  // Home screen or game screen based on app phase\n  return (\n    <div\n      className=\"App\"\n      style={{\n        // Apply background image only during gameplay\n        ...(gameState.appPhase === 'playing' && {\n          backgroundImage: `url(${getCurrentBackgroundUrl()})`,\n          backgroundSize: 'cover',\n          backgroundPosition: 'center',\n          transition: 'background-image 1s ease-in-out',\n          minHeight: '100vh'\n        })\n      }}\n      tabIndex=\"0\"\n    >\n      {gameState.appPhase === 'homescreen' && (\n        <HomeScreen\n          players={gameState.players || {}}\n          currentPlayerId={socket?.id}\n          readyPlayers={gameState.readyPlayers || []}\n          onReady={handlePlayerReady}\n          onStartGame={handleStartGame}\n          onSetGameMode={handleSetGameMode}\n          gameMode={gameState.gameMode}\n          gameInProgress={gameState.gameInProgress}\n          isRejoining={gameState.players?.[socket?.id]?.isRejoining}\n        />\n      )}\n\n      {gameState.appPhase === 'playing' && (\n        <div style={{\n          backgroundColor: 'rgba(0, 0, 0, 0.8)',\n          backdropFilter: 'blur(5px)',\n          padding: '20px',\n          borderRadius: '10px',\n          margin: '10px auto',\n          maxWidth: '900px'\n        }}>\n          <div style={{\n            display: 'flex',\n            justifyContent: 'space-between',\n            alignItems: 'center',\n            marginBottom: '15px'\n          }}>\n            <h1 style={{ margin: 0, fontSize: '28px', color: '#fff' }}>Tetristributed</h1>\n            <div style={{\n              fontSize: '14px',\n              backgroundColor: '#333',\n              padding: '5px 10px',\n              borderRadius: '4px'\n            }}>\n              Player: {socket?.id && socket.id.substring(0, 4)}\n            </div>\n          </div>\n\n          <div style={{ display: 'flex', gap: '20px' }}>\n            <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n              <BoardStage\n                board={gameState.board || []}\n                players={gameState.players || {}}\n                linesToClear={gameState.linesToClear || []}\n              />\n            </div>\n\n            <div style={{\n              display: 'flex',\n              flexDirection: 'column',\n              minWidth: '220px'\n            }}>\n              {/* Integrated Score Panel with Timer */}\n              <ScorePanel\n                score={currentScore}\n                level={level}\n                lastScoreChange={lastScoreChange}\n                elapsedTime={elapsedTime}\n              />\n\n              {/* Players List */}\n              <div style={{\n                backgroundColor: 'rgba(40, 40, 40, 0.9)',\n                padding: '12px',\n                borderRadius: '8px',\n                marginTop: '15px'\n              }}>\n                <h2 style={{ margin: '0 0 10px 0', fontSize: '18px', color: '#ccc' }}>Players</h2>\n                <ul style={{ listStyle: 'none', padding: 0, margin: 0 }}>\n                  {Object.entries(gameState.players || {}).map(([id, player]) => {\n                    const isCurrentPlayer = id === socket?.id;\n                    const shortId = id.substring(0, 4);\n\n                    return (\n                      <li\n                        key={id}\n                        style={{\n                          margin: '6px 0',\n                          padding: '8px',\n                          backgroundColor: isCurrentPlayer ? '#444' : '#333',\n                          borderLeft: `4px solid ${player.color || '#ccc'}`,\n                          borderRadius: '4px',\n                          transition: 'background-color 0.3s'\n                        }}\n                      >\n                        <div style={{\n                          display: 'flex',\n                          alignItems: 'center',\n                          justifyContent: 'space-between'\n                        }}>\n                          <div>\n                            <span style={{\n                              fontWeight: isCurrentPlayer ? 'bold' : 'normal',\n                              color: isCurrentPlayer ? '#fff' : '#ccc'\n                            }}>\n                              Player {player.playerNumber || shortId}\n                            </span>\n                            {isCurrentPlayer && <span style={{\n                              fontSize: '12px',\n                              marginLeft: '5px',\n                              color: '#ffcc00'\n                            }}>\n                              (You)\n                            </span>}\n                          </div>\n                          <div style={{\n                            backgroundColor: '#222',\n                            padding: '2px 6px',\n                            borderRadius: '3px',\n                            fontSize: '14px',\n                            fontWeight: 'bold'\n                          }}>\n                            {player.score || 0}\n                          </div>\n                        </div>\n                      </li>\n                    );\n                  })}\n                </ul>\n\n                <div style={{\n                  marginTop: '15px',\n                  padding: '8px',\n                  backgroundColor: '#222',\n                  borderRadius: '4px',\n                  textAlign: 'center'\n                }}>\n                  <div style={{ fontSize: '12px', color: '#aaa' }}>GAME MODE</div>\n                  <div style={{ fontSize: '16px', fontWeight: 'bold', marginTop: '4px' }}>\n                    {gameState.gameMode || 'Classic'}\n                  </div>\n                </div>\n              </div>\n\n              {/* Controls Help */}\n              <div style={{\n                backgroundColor: 'rgba(40, 40, 40, 0.7)',\n                padding: '12px',\n                borderRadius: '8px',\n                marginTop: '15px',\n                fontSize: '12px',\n                color: '#aaa'\n              }}>\n                <div style={{ marginBottom: '5px', fontWeight: 'bold', color: '#ccc' }}>Controls:</div>\n                <div>← → : Move</div>\n                <div>↓ : Soft Drop</div>\n                <div>↑ / Z : Rotate</div>\n                <div>Space : Hard Drop</div>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {isGameOver && gameOverData && (\n        <GameOverScreen\n          gameOverData={gameOverData}\n          currentPlayerId={socket?.id}\n          onTimeout={handleGameOverTimeout}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}