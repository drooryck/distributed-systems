{"ast":null,"code":"import { io } from 'socket.io-client';\nimport { EventEmitter } from 'events';\nimport { saveGameSession, getGameSession, clearGameSession } from './sessionStorage';\nclass ServerConnectionManager extends EventEmitter {\n  constructor() {\n    super();\n    this.serverList = [];\n    this.activeSocket = null;\n    this.socketId = null;\n\n    // Configuration\n    this.debug = true;\n    this.autoReconnect = true;\n    this.reconnectInterval = 2000;\n\n    // Status tracking\n    this.initialized = false;\n    this.reconnectTimer = null;\n  }\n  log(message) {\n    if (this.debug) {\n      console.log(`[ServerManager] ${message}`);\n    }\n  }\n  async initialize(onConnectedCallback = null, onStateChangeCallback = null, serverList = null) {\n    if (this.initialized) {\n      return;\n    }\n    this.onConnectedCallback = onConnectedCallback;\n    this.onStateChangeCallback = onStateChangeCallback;\n    try {\n      // Use provided server list or default to localhost ports\n      this.serverList = serverList || [{\n        id: 0,\n        host: 'localhost',\n        port: 3001\n      }, {\n        id: 1,\n        host: 'localhost',\n        port: 3002\n      }, {\n        id: 2,\n        host: 'localhost',\n        port: 3003\n      }];\n      this.log(`Initializing connection manager with ${this.serverList.length} servers`);\n\n      // First try to connect to any server to find the leader\n      let leaderServer = null;\n      for (const server of this.serverList) {\n        const serverUrl = `http://${server.host}:${server.port}`;\n        try {\n          this.log(`Checking server ${serverUrl} for leader info`);\n          const socket = io(serverUrl, {\n            reconnection: false,\n            timeout: 5000\n          });\n\n          // Wait for connection or timeout\n          const isConnected = await new Promise(resolve => {\n            const timeout = setTimeout(() => {\n              socket.disconnect();\n              resolve(false);\n            }, 5000);\n            socket.on('connect', () => {\n              clearTimeout(timeout);\n              resolve(true);\n            });\n            socket.on('connect_error', () => {\n              clearTimeout(timeout);\n              socket.disconnect();\n              resolve(false);\n            });\n          });\n          if (isConnected) {\n            // Get leader info from this server\n            const leaderInfo = await new Promise(resolve => {\n              socket.emit('checkLeader', {}, response => {\n                if (response && response.isLeader) {\n                  // This server is the leader\n                  resolve({\n                    id: server.id,\n                    host: server.host,\n                    port: server.port,\n                    url: serverUrl\n                  });\n                } else if (response && response.leaderUrl) {\n                  // Get leader info from response\n                  const leaderParts = response.leaderUrl.split(':');\n                  const leaderPort = parseInt(leaderParts[leaderParts.length - 1]);\n                  const leaderHost = leaderParts[leaderParts.length - 2].replace(/\\/\\//g, '');\n                  resolve({\n                    id: response.leaderId || 0,\n                    host: leaderHost,\n                    port: leaderPort,\n                    url: response.leaderUrl\n                  });\n                } else {\n                  // No leader info, use this server temporarily\n                  resolve({\n                    id: server.id,\n                    host: server.host,\n                    port: server.port,\n                    url: serverUrl\n                  });\n                }\n              });\n\n              // If no response in 3 seconds, just use this server\n              setTimeout(() => {\n                resolve({\n                  id: server.id,\n                  host: server.host,\n                  port: server.port,\n                  url: serverUrl\n                });\n              }, 3000);\n            });\n            socket.disconnect();\n            leaderServer = leaderInfo;\n            break;\n          }\n        } catch (error) {\n          this.log(`Error checking server ${serverUrl}: ${error.message}`);\n          // Continue to next server\n        }\n      }\n\n      // Now connect to the leader server or first server if no leader found\n      if (leaderServer) {\n        this.log(`Connecting to leader server at ${leaderServer.url}`);\n        await this.connectToServer(leaderServer);\n      } else if (this.serverList.length > 0) {\n        // Try each server until one works\n        for (const server of this.serverList) {\n          const serverUrl = `http://${server.host}:${server.port}`;\n          try {\n            this.log(`Trying to connect to server ${serverUrl}`);\n            await this.connectToServer({\n              id: server.id,\n              host: server.host,\n              port: server.port,\n              url: serverUrl\n            });\n            if (this.activeSocket) break;\n          } catch (error) {\n            this.log(`Failed to connect to ${serverUrl}: ${error.message}`);\n          }\n        }\n      }\n      this.initialized = true;\n\n      // If we don't have a connection yet, schedule a retry\n      if (!this.activeSocket && this.autoReconnect) {\n        this.scheduleReconnect();\n      }\n    } catch (error) {\n      this.log(`Initialization error: ${error.message}`);\n      if (this.autoReconnect) {\n        this.scheduleReconnect();\n      }\n    }\n  }\n  async connectToServer(server) {\n    if (!server || !server.url) {\n      throw new Error('Invalid server configuration');\n    }\n    this.log(`Connecting to server at ${server.url}`);\n\n    // Connect to the server\n    const socket = io(server.url, {\n      reconnection: true,\n      reconnectionAttempts: 5,\n      reconnectionDelay: 1000,\n      reconnectionDelayMax: 5000,\n      timeout: 10000\n    });\n    return new Promise((resolve, reject) => {\n      // Set up connection timeout\n      const timeout = setTimeout(() => {\n        socket.disconnect();\n        reject(new Error(`Connection timeout to ${server.url}`));\n      }, 10000);\n\n      // Handle connection\n      socket.on('connect', () => {\n        clearTimeout(timeout);\n        this.log(`Connected to server at ${server.url}`);\n        this.setActiveServer(socket, server);\n        resolve(true);\n      });\n\n      // Handle connection error\n      socket.on('connect_error', error => {\n        clearTimeout(timeout);\n        this.log(`Connection error to ${server.url}: ${error.message}`);\n        reject(error);\n      });\n\n      // Handle disconnection\n      socket.on('disconnect', reason => {\n        this.log(`Disconnected from ${server.url}: ${reason}`);\n\n        // If this was our active socket, try to reconnect\n        if (this.activeSocket === socket) {\n          this.activeSocket = null;\n\n          // Notify about server change\n          if (this.onStateChangeCallback) {\n            this.onStateChangeCallback({\n              type: 'disconnected',\n              message: `Disconnected from server: ${reason}`\n            });\n          }\n          if (this.autoReconnect && reason !== 'io client disconnect') {\n            this.scheduleReconnect();\n          }\n        }\n      });\n    });\n  }\n  setActiveServer(socket, server) {\n    this.activeSocket = socket;\n    this.socketId = socket.id;\n\n    // Forward events from this socket\n    this.forwardEvents(socket);\n\n    // Try to rejoin a room if we have saved session\n    this.attemptRoomRejoin(socket);\n\n    // Call the connected callback if provided\n    if (this.onConnectedCallback) {\n      this.onConnectedCallback(socket);\n    }\n\n    // Notify about server change\n    if (this.onStateChangeCallback) {\n      this.onStateChangeCallback({\n        type: 'connected',\n        server: server.url\n      });\n    }\n  }\n  scheduleReconnect() {\n    if (this.reconnectTimer) {\n      clearTimeout(this.reconnectTimer);\n    }\n    this.reconnectTimer = setTimeout(async () => {\n      this.log('Attempting to reconnect...');\n      await this.initialize(this.onConnectedCallback, this.onStateChangeCallback);\n    }, this.reconnectInterval);\n  }\n  forwardEvents(socket) {\n    if (!socket) return;\n\n    // Forward common events from the socket to this event emitter\n    const eventsToForward = ['init', 'gameState', 'roomCreated', 'roomJoined', 'roomRejoined', 'roomLeft', 'playerJoined', 'playerLeft', 'playerReady', 'gameStarted', 'gameOver', 'error', 'disconnect'];\n    eventsToForward.forEach(eventName => {\n      socket.on(eventName, data => {\n        if (eventName === 'init' && typeof data === 'string') {\n          try {\n            const parsedData = JSON.parse(data);\n            this.log(`Converted string to object for init event`);\n            data = parsedData;\n          } catch (e) {\n            this.log(`Could not parse init string as JSON, creating default homescreen state`);\n            data = {\n              appPhase: 'homescreen',\n              socketId: socket.id,\n              players: {},\n              activePlayers: [],\n              readyPlayers: [],\n              gameInProgress: false\n            };\n          }\n        }\n        this.emit(eventName, data);\n      });\n    });\n  }\n  attemptRoomRejoin(socket) {\n    const session = getGameSession();\n    if (session && session.roomCode) {\n      this.log(`Attempting to rejoin room ${session.roomCode} as ${session.playerName}`);\n      socket.emit('rejoinRoom', {\n        roomCode: session.roomCode,\n        playerName: session.playerName,\n        previousSocketId: session.socketId || this.socketId\n      });\n    }\n  }\n  emit(eventName, data) {\n    // For non-EventEmitter events, send to server\n    if (eventName !== 'newListener' && eventName !== 'removeListener') {\n      if (this.activeSocket) {\n        this.activeSocket.emit(eventName, data);\n      } else {\n        this.log(`Cannot emit ${eventName}: no active socket`);\n      }\n    }\n\n    // Always forward all events to local listeners\n    return super.emit(eventName, data);\n  }\n  getSocket() {\n    return this.activeSocket;\n  }\n  getSocketId() {\n    return this.socketId;\n  }\n  disconnect() {\n    if (this.activeSocket) {\n      this.activeSocket.disconnect();\n    }\n    this.activeSocket = null;\n    this.initialized = false;\n    if (this.reconnectTimer) {\n      clearTimeout(this.reconnectTimer);\n      this.reconnectTimer = null;\n    }\n  }\n}\n\n// Create a singleton instance\nconst serverManager = new ServerConnectionManager();\nexport default serverManager;","map":{"version":3,"names":["io","EventEmitter","saveGameSession","getGameSession","clearGameSession","ServerConnectionManager","constructor","serverList","activeSocket","socketId","debug","autoReconnect","reconnectInterval","initialized","reconnectTimer","log","message","console","initialize","onConnectedCallback","onStateChangeCallback","id","host","port","length","leaderServer","server","serverUrl","socket","reconnection","timeout","isConnected","Promise","resolve","setTimeout","disconnect","on","clearTimeout","leaderInfo","emit","response","isLeader","url","leaderUrl","leaderParts","split","leaderPort","parseInt","leaderHost","replace","leaderId","error","connectToServer","scheduleReconnect","Error","reconnectionAttempts","reconnectionDelay","reconnectionDelayMax","reject","setActiveServer","reason","type","forwardEvents","attemptRoomRejoin","eventsToForward","forEach","eventName","data","parsedData","JSON","parse","e","appPhase","players","activePlayers","readyPlayers","gameInProgress","session","roomCode","playerName","previousSocketId","getSocket","getSocketId","serverManager"],"sources":["/Users/driesrooryck/Desktop/s25/new_try/distributed-systems/tetris/client/src/utils/serverConnection.js"],"sourcesContent":["import { io } from 'socket.io-client';\nimport { EventEmitter } from 'events';\nimport { saveGameSession, getGameSession, clearGameSession } from './sessionStorage';\n\nclass ServerConnectionManager extends EventEmitter {\n  constructor() {\n    super();\n    this.serverList = [];\n    this.activeSocket = null;\n    this.socketId = null;\n    \n    // Configuration\n    this.debug = true;\n    this.autoReconnect = true;\n    this.reconnectInterval = 2000;\n    \n    // Status tracking\n    this.initialized = false;\n    this.reconnectTimer = null;\n  }\n  \n  log(message) {\n    if (this.debug) {\n      console.log(`[ServerManager] ${message}`);\n    }\n  }\n  \n  async initialize(onConnectedCallback = null, onStateChangeCallback = null, serverList = null) {\n    if (this.initialized) {\n      return;\n    }\n    \n    this.onConnectedCallback = onConnectedCallback;\n    this.onStateChangeCallback = onStateChangeCallback;\n    \n    try {\n      // Use provided server list or default to localhost ports\n      this.serverList = serverList || [\n        { id: 0, host: 'localhost', port: 3001 },\n        { id: 1, host: 'localhost', port: 3002 },\n        { id: 2, host: 'localhost', port: 3003 }\n      ];\n      \n      this.log(`Initializing connection manager with ${this.serverList.length} servers`);\n      \n      // First try to connect to any server to find the leader\n      let leaderServer = null;\n      \n      for (const server of this.serverList) {\n        const serverUrl = `http://${server.host}:${server.port}`;\n        try {\n          this.log(`Checking server ${serverUrl} for leader info`);\n          const socket = io(serverUrl, {\n            reconnection: false,\n            timeout: 5000\n          });\n          \n          // Wait for connection or timeout\n          const isConnected = await new Promise((resolve) => {\n            const timeout = setTimeout(() => {\n              socket.disconnect();\n              resolve(false);\n            }, 5000);\n            \n            socket.on('connect', () => {\n              clearTimeout(timeout);\n              resolve(true);\n            });\n            \n            socket.on('connect_error', () => {\n              clearTimeout(timeout);\n              socket.disconnect();\n              resolve(false);\n            });\n          });\n          \n          if (isConnected) {\n            // Get leader info from this server\n            const leaderInfo = await new Promise((resolve) => {\n              socket.emit('checkLeader', {}, (response) => {\n                if (response && response.isLeader) {\n                  // This server is the leader\n                  resolve({\n                    id: server.id,\n                    host: server.host,\n                    port: server.port,\n                    url: serverUrl\n                  });\n                } else if (response && response.leaderUrl) {\n                  // Get leader info from response\n                  const leaderParts = response.leaderUrl.split(':');\n                  const leaderPort = parseInt(leaderParts[leaderParts.length - 1]);\n                  const leaderHost = leaderParts[leaderParts.length - 2].replace(/\\/\\//g, '');\n                  \n                  resolve({\n                    id: response.leaderId || 0,\n                    host: leaderHost,\n                    port: leaderPort,\n                    url: response.leaderUrl\n                  });\n                } else {\n                  // No leader info, use this server temporarily\n                  resolve({\n                    id: server.id,\n                    host: server.host,\n                    port: server.port,\n                    url: serverUrl\n                  });\n                }\n              });\n              \n              // If no response in 3 seconds, just use this server\n              setTimeout(() => {\n                resolve({\n                  id: server.id,\n                  host: server.host,\n                  port: server.port,\n                  url: serverUrl\n                });\n              }, 3000);\n            });\n            \n            socket.disconnect();\n            leaderServer = leaderInfo;\n            break;\n          }\n        } catch (error) {\n          this.log(`Error checking server ${serverUrl}: ${error.message}`);\n          // Continue to next server\n        }\n      }\n      \n      // Now connect to the leader server or first server if no leader found\n      if (leaderServer) {\n        this.log(`Connecting to leader server at ${leaderServer.url}`);\n        await this.connectToServer(leaderServer);\n      } else if (this.serverList.length > 0) {\n        // Try each server until one works\n        for (const server of this.serverList) {\n          const serverUrl = `http://${server.host}:${server.port}`;\n          try {\n            this.log(`Trying to connect to server ${serverUrl}`);\n            await this.connectToServer({ \n              id: server.id,\n              host: server.host,\n              port: server.port,\n              url: serverUrl\n            });\n            if (this.activeSocket) break;\n          } catch (error) {\n            this.log(`Failed to connect to ${serverUrl}: ${error.message}`);\n          }\n        }\n      }\n      \n      this.initialized = true;\n      \n      // If we don't have a connection yet, schedule a retry\n      if (!this.activeSocket && this.autoReconnect) {\n        this.scheduleReconnect();\n      }\n    } catch (error) {\n      this.log(`Initialization error: ${error.message}`);\n      if (this.autoReconnect) {\n        this.scheduleReconnect();\n      }\n    }\n  }\n  \n  async connectToServer(server) {\n    if (!server || !server.url) {\n      throw new Error('Invalid server configuration');\n    }\n    \n    this.log(`Connecting to server at ${server.url}`);\n    \n    // Connect to the server\n    const socket = io(server.url, {\n      reconnection: true,\n      reconnectionAttempts: 5,\n      reconnectionDelay: 1000,\n      reconnectionDelayMax: 5000,\n      timeout: 10000\n    });\n    \n    return new Promise((resolve, reject) => {\n      // Set up connection timeout\n      const timeout = setTimeout(() => {\n        socket.disconnect();\n        reject(new Error(`Connection timeout to ${server.url}`));\n      }, 10000);\n      \n      // Handle connection\n      socket.on('connect', () => {\n        clearTimeout(timeout);\n        this.log(`Connected to server at ${server.url}`);\n        this.setActiveServer(socket, server);\n        resolve(true);\n      });\n      \n      // Handle connection error\n      socket.on('connect_error', (error) => {\n        clearTimeout(timeout);\n        this.log(`Connection error to ${server.url}: ${error.message}`);\n        reject(error);\n      });\n      \n      // Handle disconnection\n      socket.on('disconnect', (reason) => {\n        this.log(`Disconnected from ${server.url}: ${reason}`);\n        \n        // If this was our active socket, try to reconnect\n        if (this.activeSocket === socket) {\n          this.activeSocket = null;\n          \n          // Notify about server change\n          if (this.onStateChangeCallback) {\n            this.onStateChangeCallback({\n              type: 'disconnected',\n              message: `Disconnected from server: ${reason}`\n            });\n          }\n          \n          if (this.autoReconnect && reason !== 'io client disconnect') {\n            this.scheduleReconnect();\n          }\n        }\n      });\n    });\n  }\n  \n  setActiveServer(socket, server) {\n    this.activeSocket = socket;\n    this.socketId = socket.id;\n    \n    // Forward events from this socket\n    this.forwardEvents(socket);\n    \n    // Try to rejoin a room if we have saved session\n    this.attemptRoomRejoin(socket);\n    \n    // Call the connected callback if provided\n    if (this.onConnectedCallback) {\n      this.onConnectedCallback(socket);\n    }\n    \n    // Notify about server change\n    if (this.onStateChangeCallback) {\n      this.onStateChangeCallback({\n        type: 'connected',\n        server: server.url\n      });\n    }\n  }\n  \n  scheduleReconnect() {\n    if (this.reconnectTimer) {\n      clearTimeout(this.reconnectTimer);\n    }\n    \n    this.reconnectTimer = setTimeout(async () => {\n      this.log('Attempting to reconnect...');\n      await this.initialize(this.onConnectedCallback, this.onStateChangeCallback);\n    }, this.reconnectInterval);\n  }\n  \n  forwardEvents(socket) {\n    if (!socket) return;\n    \n    // Forward common events from the socket to this event emitter\n    const eventsToForward = [\n      'init', 'gameState', 'roomCreated', 'roomJoined', 'roomRejoined',\n      'roomLeft', 'playerJoined', 'playerLeft', 'playerReady',\n      'gameStarted', 'gameOver', 'error', 'disconnect'\n    ];\n    \n    eventsToForward.forEach(eventName => {\n      socket.on(eventName, (data) => {\n        if (eventName === 'init' && typeof data === 'string') {\n          try {\n            const parsedData = JSON.parse(data);\n            this.log(`Converted string to object for init event`);\n            data = parsedData;\n          } catch (e) {\n            this.log(`Could not parse init string as JSON, creating default homescreen state`);\n            data = { \n              appPhase: 'homescreen',\n              socketId: socket.id,\n              players: {},\n              activePlayers: [],\n              readyPlayers: [],\n              gameInProgress: false\n            };\n          }\n        }\n        \n        this.emit(eventName, data);\n      });\n    });\n  }\n  \n  attemptRoomRejoin(socket) {\n    const session = getGameSession();\n    if (session && session.roomCode) {\n      this.log(`Attempting to rejoin room ${session.roomCode} as ${session.playerName}`);\n      \n      socket.emit('rejoinRoom', {\n        roomCode: session.roomCode,\n        playerName: session.playerName,\n        previousSocketId: session.socketId || this.socketId\n      });\n    }\n  }\n  \n  emit(eventName, data) {\n    // For non-EventEmitter events, send to server\n    if (eventName !== 'newListener' && eventName !== 'removeListener') {\n      if (this.activeSocket) {\n        this.activeSocket.emit(eventName, data);\n      } else {\n        this.log(`Cannot emit ${eventName}: no active socket`);\n      }\n    }\n    \n    // Always forward all events to local listeners\n    return super.emit(eventName, data);\n  }\n  \n  getSocket() {\n    return this.activeSocket;\n  }\n  \n  getSocketId() {\n    return this.socketId;\n  }\n  \n  disconnect() {\n    if (this.activeSocket) {\n      this.activeSocket.disconnect();\n    }\n    \n    this.activeSocket = null;\n    this.initialized = false;\n    \n    if (this.reconnectTimer) {\n      clearTimeout(this.reconnectTimer);\n      this.reconnectTimer = null;\n    }\n  }\n}\n\n// Create a singleton instance\nconst serverManager = new ServerConnectionManager();\nexport default serverManager;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}