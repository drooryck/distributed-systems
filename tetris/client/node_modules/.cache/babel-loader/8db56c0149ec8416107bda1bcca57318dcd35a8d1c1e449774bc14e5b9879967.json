{"ast":null,"code":"import{io}from'socket.io-client';import{saveGameSession,getGameSession,clearGameSession}from'./sessionStorage';class ServerConnectionManager{constructor(){this.servers=[];this.leaderServer=null;this.activeSocket=null;this.eventHandlers={};this.debugMode=true;}log(message,data){if(this.debugMode){console.log(`[ServerManager] ${message}`,data!==undefined?data:'');}}async initialize(onConnected,onStateChange){try{// Load server configuration\nconst response=await fetch('/config.json');const config=await response.json();if(!config.client||!config.client.serverAddresses||!config.client.serverAddresses.length){throw new Error(\"No server addresses configured\");}this.log(\"Initializing with server addresses:\",config.client.serverAddresses);// Connect to all servers simultaneously\nconst connections=[];for(const serverUrl of config.client.serverAddresses){this.log(`Connecting to ${serverUrl}...`);const socket=io(serverUrl,{reconnectionAttempts:3,reconnectionDelay:1000,timeout:3000});// Create a connection object to track this server\nconst connection={url:serverUrl,socket:socket,isConnected:false,isLeader:false,serverId:null};connections.push(connection);// Set up connection events\nsocket.on('connect',()=>{this.log(`Connected to ${serverUrl} with socket ID: ${socket.id}`);connection.isConnected=true;// Ask if this is the leader server\nsocket.emit('checkLeader',{},response=>{this.log(`Leader check response from ${serverUrl}:`,response);if(response.isLeader){this.log(`Server ${serverUrl} is leader with ID: ${response.leaderId}`);// Update connection info\nconnection.isLeader=true;connection.serverId=response.leaderId;// Set this as the active leader if we don't have one yet\nif(!this.leaderServer){this.setActiveLeader(connection);// Check for saved session and try to rejoin a room\nthis.attemptRoomRejoin(connection.socket);if(onConnected){onConnected(connection.socket);}}}else{this.log(`Server ${serverUrl} is NOT leader (leader is: ${response.leaderId})`);connection.isLeader=false;connection.serverId=response.leaderId;// If we have no connections, use this as a fallback\nif(!this.leaderServer&&!this.activeSocket){this.setActiveLeader(connection);if(onConnected){onConnected(connection.socket);}}}});});// Handle server status changes (leader election changes)\nsocket.on('server-status',status=>{this.log(`Server status from ${serverUrl}:`,status);connection.isLeader=status.isLeader;connection.serverId=status.serverId;// If this server just became leader, switch to it\nif(status.isLeader&&this.leaderServer!==connection){this.log(`Server ${serverUrl} became the new leader`);this.setActiveLeader(connection);if(onStateChange){onStateChange({type:'leaderChanged',server:connection});}// Try to rejoin existing room if we have session data\nthis.attemptRoomRejoin(connection.socket);}});// Handle disconnect\nsocket.on('disconnect',()=>{this.log(`Disconnected from ${serverUrl}`);connection.isConnected=false;// If this was the leader, try to find another leader\nif(this.leaderServer===connection){this.log('Leader server disconnected, looking for a new leader...');this.leaderServer=null;this.activeSocket=null;// Find a new leader among connected servers\nconst newLeader=this.servers.find(s=>s.isConnected&&s.isLeader);if(newLeader){this.log(`Found new leader: ${newLeader.url}`);this.setActiveLeader(newLeader);if(onStateChange){onStateChange({type:'leaderChanged',server:newLeader});}// Try to rejoin existing room\nthis.attemptRoomRejoin(newLeader.socket);}else{// Try any connected server if no leader is found\nconst anyServer=this.servers.find(s=>s.isConnected);if(anyServer){this.log(`No leader found, using connected server: ${anyServer.url}`);this.setActiveLeader(anyServer);if(onStateChange){onStateChange({type:'leaderChanged',server:anyServer});}// Try to rejoin existing room\nthis.attemptRoomRejoin(anyServer.socket);}else{this.log('No servers available. All servers are down.');if(onStateChange){onStateChange({type:'allServersDown'});}}}}});// Setup instance-specific error handler\nsocket.on('connect_error',error=>{this.log(`Connection error to ${serverUrl}: ${error.message}`);});}// Store all server connections\nthis.servers=connections;return true;}catch(error){this.log('Error initializing server connections:',error);throw error;}}setActiveLeader(connection){this.leaderServer=connection;this.activeSocket=connection.socket;this.log(`Active leader set to ${connection.url}`);// Set up event forwarding\nthis.forwardEvents(connection.socket);}forwardEvents(socket){// Remove handlers from previous socket\nfor(const[event,handlers]of Object.entries(this.eventHandlers)){for(const handler of handlers){if(this.previousSocket){this.previousSocket.off(event,handler);}}}// Add handlers to new socket\nfor(const[event,handlers]of Object.entries(this.eventHandlers)){for(const handler of handlers){socket.on(event,handler);}}this.previousSocket=socket;}attemptRoomRejoin(socket){const session=getGameSession();if(session&&session.roomCode){this.log(`Attempting to rejoin room ${session.roomCode}`);socket.emit('rejoinRoom',{roomCode:session.roomCode,playerName:session.playerName,previousSocketId:session.socketId});}}on(event,callback){if(!this.eventHandlers[event]){this.eventHandlers[event]=[];}this.eventHandlers[event].push(callback);// If we already have an active socket, register the handler immediately\nif(this.activeSocket){this.activeSocket.on(event,callback);}}emit(event){if(!this.activeSocket){this.log(`Warning: Tried to emit ${event} but no active socket`);return false;}for(var _len=arguments.length,args=new Array(_len>1?_len-1:0),_key=1;_key<_len;_key++){args[_key-1]=arguments[_key];}this.activeSocket.emit(event,...args);return true;}getActiveServer(){return this.leaderServer;}getSocketId(){return this.activeSocket?this.activeSocket.id:null;}disconnect(){for(const server of this.servers){if(server.socket){server.socket.disconnect();}}this.servers=[];this.leaderServer=null;this.activeSocket=null;}}// Create singleton instance\nconst serverManager=new ServerConnectionManager();export default serverManager;","map":{"version":3,"names":["io","saveGameSession","getGameSession","clearGameSession","ServerConnectionManager","constructor","servers","leaderServer","activeSocket","eventHandlers","debugMode","log","message","data","console","undefined","initialize","onConnected","onStateChange","response","fetch","config","json","client","serverAddresses","length","Error","connections","serverUrl","socket","reconnectionAttempts","reconnectionDelay","timeout","connection","url","isConnected","isLeader","serverId","push","on","id","emit","leaderId","setActiveLeader","attemptRoomRejoin","status","type","server","newLeader","find","s","anyServer","error","forwardEvents","event","handlers","Object","entries","handler","previousSocket","off","session","roomCode","playerName","previousSocketId","socketId","callback","_len","arguments","args","Array","_key","getActiveServer","getSocketId","disconnect","serverManager"],"sources":["/Users/driesrooryck/Desktop/s25/new_try/distributed-systems/tetris/client/src/utils/serverConnection.js"],"sourcesContent":["import { io } from 'socket.io-client';\nimport { saveGameSession, getGameSession, clearGameSession } from './sessionStorage';\n\nclass ServerConnectionManager {\n  constructor() {\n    this.servers = [];\n    this.leaderServer = null;\n    this.activeSocket = null;\n    this.eventHandlers = {};\n    this.debugMode = true;\n  }\n\n  log(message, data) {\n    if (this.debugMode) {\n      console.log(`[ServerManager] ${message}`, data !== undefined ? data : '');\n    }\n  }\n\n  async initialize(onConnected, onStateChange) {\n    try {\n      // Load server configuration\n      const response = await fetch('/config.json');\n      const config = await response.json();\n      \n      if (!config.client || !config.client.serverAddresses || !config.client.serverAddresses.length) {\n        throw new Error(\"No server addresses configured\");\n      }\n      \n      this.log(\"Initializing with server addresses:\", config.client.serverAddresses);\n      \n      // Connect to all servers simultaneously\n      const connections = [];\n      \n      for (const serverUrl of config.client.serverAddresses) {\n        this.log(`Connecting to ${serverUrl}...`);\n        \n        const socket = io(serverUrl, {\n          reconnectionAttempts: 3,\n          reconnectionDelay: 1000,\n          timeout: 3000\n        });\n        \n        // Create a connection object to track this server\n        const connection = {\n          url: serverUrl,\n          socket: socket,\n          isConnected: false,\n          isLeader: false,\n          serverId: null\n        };\n        \n        connections.push(connection);\n        \n        // Set up connection events\n        socket.on('connect', () => {\n          this.log(`Connected to ${serverUrl} with socket ID: ${socket.id}`);\n          connection.isConnected = true;\n          \n          // Ask if this is the leader server\n          socket.emit('checkLeader', {}, (response) => {\n            this.log(`Leader check response from ${serverUrl}:`, response);\n            \n            if (response.isLeader) {\n              this.log(`Server ${serverUrl} is leader with ID: ${response.leaderId}`);\n              \n              // Update connection info\n              connection.isLeader = true;\n              connection.serverId = response.leaderId;\n              \n              // Set this as the active leader if we don't have one yet\n              if (!this.leaderServer) {\n                this.setActiveLeader(connection);\n                \n                // Check for saved session and try to rejoin a room\n                this.attemptRoomRejoin(connection.socket);\n                \n                if (onConnected) {\n                  onConnected(connection.socket);\n                }\n              }\n            } else {\n              this.log(`Server ${serverUrl} is NOT leader (leader is: ${response.leaderId})`);\n              connection.isLeader = false;\n              connection.serverId = response.leaderId;\n              \n              // If we have no connections, use this as a fallback\n              if (!this.leaderServer && !this.activeSocket) {\n                this.setActiveLeader(connection);\n                \n                if (onConnected) {\n                  onConnected(connection.socket);\n                }\n              }\n            }\n          });\n        });\n        \n        // Handle server status changes (leader election changes)\n        socket.on('server-status', (status) => {\n          this.log(`Server status from ${serverUrl}:`, status);\n          connection.isLeader = status.isLeader;\n          connection.serverId = status.serverId;\n          \n          // If this server just became leader, switch to it\n          if (status.isLeader && this.leaderServer !== connection) {\n            this.log(`Server ${serverUrl} became the new leader`);\n            this.setActiveLeader(connection);\n            \n            if (onStateChange) {\n              onStateChange({type: 'leaderChanged', server: connection});\n            }\n            \n            // Try to rejoin existing room if we have session data\n            this.attemptRoomRejoin(connection.socket);\n          }\n        });\n        \n        // Handle disconnect\n        socket.on('disconnect', () => {\n          this.log(`Disconnected from ${serverUrl}`);\n          connection.isConnected = false;\n          \n          // If this was the leader, try to find another leader\n          if (this.leaderServer === connection) {\n            this.log('Leader server disconnected, looking for a new leader...');\n            this.leaderServer = null;\n            this.activeSocket = null;\n            \n            // Find a new leader among connected servers\n            const newLeader = this.servers.find(s => s.isConnected && s.isLeader);\n            if (newLeader) {\n              this.log(`Found new leader: ${newLeader.url}`);\n              this.setActiveLeader(newLeader);\n              \n              if (onStateChange) {\n                onStateChange({type: 'leaderChanged', server: newLeader});\n              }\n              \n              // Try to rejoin existing room\n              this.attemptRoomRejoin(newLeader.socket);\n            } else {\n              // Try any connected server if no leader is found\n              const anyServer = this.servers.find(s => s.isConnected);\n              if (anyServer) {\n                this.log(`No leader found, using connected server: ${anyServer.url}`);\n                this.setActiveLeader(anyServer);\n                \n                if (onStateChange) {\n                  onStateChange({type: 'leaderChanged', server: anyServer});\n                }\n                \n                // Try to rejoin existing room\n                this.attemptRoomRejoin(anyServer.socket);\n              } else {\n                this.log('No servers available. All servers are down.');\n                \n                if (onStateChange) {\n                  onStateChange({type: 'allServersDown'});\n                }\n              }\n            }\n          }\n        });\n        \n        // Setup instance-specific error handler\n        socket.on('connect_error', (error) => {\n          this.log(`Connection error to ${serverUrl}: ${error.message}`);\n        });\n      }\n      \n      // Store all server connections\n      this.servers = connections;\n      \n      return true;\n    } catch (error) {\n      this.log('Error initializing server connections:', error);\n      throw error;\n    }\n  }\n  \n  setActiveLeader(connection) {\n    this.leaderServer = connection;\n    this.activeSocket = connection.socket;\n    this.log(`Active leader set to ${connection.url}`);\n    \n    // Set up event forwarding\n    this.forwardEvents(connection.socket);\n  }\n  \n  forwardEvents(socket) {\n    // Remove handlers from previous socket\n    for (const [event, handlers] of Object.entries(this.eventHandlers)) {\n      for (const handler of handlers) {\n        if (this.previousSocket) {\n          this.previousSocket.off(event, handler);\n        }\n      }\n    }\n    \n    // Add handlers to new socket\n    for (const [event, handlers] of Object.entries(this.eventHandlers)) {\n      for (const handler of handlers) {\n        socket.on(event, handler);\n      }\n    }\n    \n    this.previousSocket = socket;\n  }\n  \n  attemptRoomRejoin(socket) {\n    const session = getGameSession();\n    if (session && session.roomCode) {\n      this.log(`Attempting to rejoin room ${session.roomCode}`);\n      \n      socket.emit('rejoinRoom', {\n        roomCode: session.roomCode,\n        playerName: session.playerName,\n        previousSocketId: session.socketId\n      });\n    }\n  }\n  \n  on(event, callback) {\n    if (!this.eventHandlers[event]) {\n      this.eventHandlers[event] = [];\n    }\n    \n    this.eventHandlers[event].push(callback);\n    \n    // If we already have an active socket, register the handler immediately\n    if (this.activeSocket) {\n      this.activeSocket.on(event, callback);\n    }\n  }\n  \n  emit(event, ...args) {\n    if (!this.activeSocket) {\n      this.log(`Warning: Tried to emit ${event} but no active socket`);\n      return false;\n    }\n    \n    this.activeSocket.emit(event, ...args);\n    return true;\n  }\n  \n  getActiveServer() {\n    return this.leaderServer;\n  }\n  \n  getSocketId() {\n    return this.activeSocket ? this.activeSocket.id : null;\n  }\n  \n  disconnect() {\n    for (const server of this.servers) {\n      if (server.socket) {\n        server.socket.disconnect();\n      }\n    }\n    this.servers = [];\n    this.leaderServer = null;\n    this.activeSocket = null;\n  }\n}\n\n// Create singleton instance\nconst serverManager = new ServerConnectionManager();\n\nexport default serverManager;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}