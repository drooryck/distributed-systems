{"ast":null,"code":"import { io } from 'socket.io-client';\nimport { EventEmitter } from 'events';\nimport { saveGameSession, getGameSession, clearGameSession } from './sessionStorage';\n\n// Add this function to load the config at the top of your file\nconst serverUrl = new URL(server.url);\nconst absoluteUrl = `http://${serverUrl.hostname}:${serverUrl.port}`;\nthis.log(`Connecting to server at ${absoluteUrl}`);\n\n// Connect using the absolute URL (not relative)\nconst socket = io(absoluteUrl, {\n  reconnection: true,\n  reconnectionAttempts: 5,\n  reconnectionDelay: 1000,\n  reconnectionDelayMax: 5000,\n  timeout: 10000,\n  transports: ['polling', 'websocket'] // Try polling first, then websocket\n});\nclass ServerConnectionManager extends EventEmitter {\n  constructor() {\n    super();\n    this.serverList = [];\n    this.activeSocket = null;\n    this.socketId = null;\n\n    // Configuration\n    this.debug = true;\n    this.autoReconnect = true;\n    this.reconnectInterval = 2000;\n\n    // Status tracking\n    this.initialized = false;\n    this.reconnectTimer = null;\n  }\n  log(message) {\n    if (this.debug) {\n      console.log(`[ServerManager] ${message}`);\n    }\n  }\n  async initialize(onConnectedCallback = null, onStateChangeCallback = null, serverList = null) {\n    if (this.initialized) {\n      return;\n    }\n    this.onConnectedCallback = onConnectedCallback;\n    this.onStateChangeCallback = onStateChangeCallback;\n\n    // Try to load server list from config.json first\n    let configServers = null;\n    try {\n      const config = await loadConfig();\n      if (config && config.client && Array.isArray(config.client.serverAddresses)) {\n        configServers = config.client.serverAddresses;\n        this.log(`Loaded ${configServers.length} servers from config.json`);\n      }\n    } catch (e) {\n      this.log(`Error loading config: ${e.message}`);\n    }\n    try {\n      // Use provided server list or default to localhost ports\n      this.serverList = serverList || [{\n        id: 0,\n        host: 'localhost',\n        port: 3001\n      }, {\n        id: 1,\n        host: 'localhost',\n        port: 3002\n      }, {\n        id: 2,\n        host: 'localhost',\n        port: 3003\n      }];\n      this.log(`Initializing connection manager with ${this.serverList.length} servers`);\n\n      // First try to connect to any server to find the leader\n      let leaderServer = null;\n      for (const server of this.serverList) {\n        const serverUrl = `http://${server.host}:${server.port}`;\n        try {\n          this.log(`Checking server ${serverUrl} for leader info`);\n          const socket = io(serverUrl, {\n            reconnection: false,\n            timeout: 5000\n          });\n\n          // Wait for connection or timeout\n          const isConnected = await new Promise(resolve => {\n            const timeout = setTimeout(() => {\n              socket.disconnect();\n              resolve(false);\n            }, 5000);\n            socket.on('connect', () => {\n              clearTimeout(timeout);\n              resolve(true);\n            });\n            socket.on('connect_error', () => {\n              clearTimeout(timeout);\n              socket.disconnect();\n              resolve(false);\n            });\n          });\n          if (isConnected) {\n            // Get leader info from this server\n            const leaderInfo = await new Promise(resolve => {\n              socket.emit('checkLeader', {}, response => {\n                if (response && response.isLeader) {\n                  // This server is the leader\n                  resolve({\n                    id: server.id,\n                    host: server.host,\n                    port: server.port,\n                    url: serverUrl\n                  });\n                } else if (response && response.leaderUrl) {\n                  // Get leader info from response\n                  const leaderParts = response.leaderUrl.split(':');\n                  const leaderPort = parseInt(leaderParts[leaderParts.length - 1]);\n                  const leaderHost = leaderParts[leaderParts.length - 2].replace(/\\/\\//g, '');\n                  resolve({\n                    id: response.leaderId || 0,\n                    host: leaderHost,\n                    port: leaderPort,\n                    url: response.leaderUrl\n                  });\n                } else {\n                  // No leader info, use this server temporarily\n                  resolve({\n                    id: server.id,\n                    host: server.host,\n                    port: server.port,\n                    url: serverUrl\n                  });\n                }\n              });\n\n              // If no response in 3 seconds, just use this server\n              setTimeout(() => {\n                resolve({\n                  id: server.id,\n                  host: server.host,\n                  port: server.port,\n                  url: serverUrl\n                });\n              }, 3000);\n            });\n            socket.disconnect();\n            leaderServer = leaderInfo;\n            break;\n          }\n        } catch (error) {\n          this.log(`Error checking server ${serverUrl}: ${error.message}`);\n          // Continue to next server\n        }\n      }\n\n      // Now connect to the leader server or first server if no leader found\n      if (leaderServer) {\n        this.log(`Connecting to leader server at ${leaderServer.url}`);\n        await this.connectToServer(leaderServer);\n      } else if (this.serverList.length > 0) {\n        // Try each server until one works\n        for (const server of this.serverList) {\n          const serverUrl = `http://${server.host}:${server.port}`;\n          try {\n            this.log(`Trying to connect to server ${serverUrl}`);\n            await this.connectToServer({\n              id: server.id,\n              host: server.host,\n              port: server.port,\n              url: serverUrl\n            });\n            if (this.activeSocket) break;\n          } catch (error) {\n            this.log(`Failed to connect to ${serverUrl}: ${error.message}`);\n          }\n        }\n      }\n      this.initialized = true;\n\n      // If we don't have a connection yet, schedule a retry\n      if (!this.activeSocket && this.autoReconnect) {\n        this.scheduleReconnect();\n      }\n    } catch (error) {\n      this.log(`Initialization error: ${error.message}`);\n      if (this.autoReconnect) {\n        this.scheduleReconnect();\n      }\n    }\n  }\n  async connectToServer(server) {\n    if (!server || !server.url) {\n      throw new Error('Invalid server configuration');\n    }\n    const serverUrl = new URL(server.url);\n    const absoluteUrl = `http://${serverUrl.hostname}:${serverUrl.port}`;\n    this.log(`Connecting to server at ${absoluteUrl}`);\n\n    // Connect using the absolute URL (not relative)\n    const socket = io(absoluteUrl, {\n      reconnection: true,\n      reconnectionAttempts: 5,\n      reconnectionDelay: 1000,\n      reconnectionDelayMax: 5000,\n      timeout: 10000,\n      transports: ['polling', 'websocket'] // Try polling first, then websocket\n    });\n    return new Promise((resolve, reject) => {\n      // Set up connection timeout\n      const timeout = setTimeout(() => {\n        socket.disconnect();\n        reject(new Error(`Connection timeout to ${server.url}`));\n      }, 10000);\n\n      // Handle connection\n      socket.on('connect', () => {\n        clearTimeout(timeout);\n        this.log(`Connected to server at ${server.url}`);\n        this.setActiveServer(socket, server);\n        resolve(true);\n      });\n\n      // Handle connection error\n      socket.on('connect_error', error => {\n        clearTimeout(timeout);\n        this.log(`Connection error to ${server.url}: ${error.message}`);\n        reject(error);\n      });\n\n      // Handle disconnection\n      socket.on('disconnect', reason => {\n        this.log(`Disconnected from ${server.url}: ${reason}`);\n\n        // If this was our active socket, try to reconnect\n        if (this.activeSocket === socket) {\n          this.activeSocket = null;\n\n          // Notify about server change\n          if (this.onStateChangeCallback) {\n            this.onStateChangeCallback({\n              type: 'disconnected',\n              message: `Disconnected from server: ${reason}`\n            });\n          }\n          if (this.autoReconnect && reason !== 'io client disconnect') {\n            this.scheduleReconnect();\n          }\n        }\n      });\n    });\n  }\n  setActiveServer(socket, server) {\n    this.activeSocket = socket;\n    this.socketId = socket.id;\n\n    // Forward events from this socket\n    this.forwardEvents(socket);\n\n    // Try to rejoin a room if we have saved session\n    this.attemptRoomRejoin(socket);\n\n    // Call the connected callback if provided\n    if (this.onConnectedCallback) {\n      this.onConnectedCallback(socket);\n    }\n\n    // Notify about server change\n    if (this.onStateChangeCallback) {\n      this.onStateChangeCallback({\n        type: 'connected',\n        server: server.url\n      });\n    }\n  }\n  scheduleReconnect() {\n    // First check if our origin server is different from active leader\n    const currentUrl = new URL(window.location.href);\n    const currentPort = currentUrl.port;\n\n    // Try to find a working server to redirect to\n    this.serverList.forEach(server => {\n      if (server.port.toString() !== currentPort) {\n        // Try a basic ping to see if this server is alive\n        fetch(`http://${server.host}:${server.port}/status`, {\n          timeout: 2000\n        }).then(response => {\n          if (response.ok) {\n            // Found a working server, redirect the browser\n            this.log(`Redirecting to working server: ${server.port}`);\n\n            // Save that we need to rejoin\n            localStorage.setItem('needs_browser_rejoin', 'true');\n\n            // Redirect the browser to the new server\n            window.location.href = window.location.href.replace(`:${currentPort}`, `:${server.port}`);\n            return;\n          }\n        }).catch(() => {\n          // This server is also down, try the next one\n        });\n      }\n    });\n\n    // Continue with normal reconnection if we didn't redirect\n    if (this.reconnectTimer) {\n      clearTimeout(this.reconnectTimer);\n    }\n    this.reconnectTimer = setTimeout(async () => {\n      this.log('Attempting to reconnect...');\n      await this.initialize(this.onConnectedCallback, this.onStateChangeCallback);\n    }, this.reconnectInterval);\n  }\n  forwardEvents(socket) {\n    if (!socket) return;\n\n    // Forward common events from the socket to this event emitter\n    const eventsToForward = ['init', 'gameState', 'roomCreated', 'roomJoined', 'roomRejoined', 'roomLeft', 'playerJoined', 'playerLeft', 'playerReady', 'gameStarted', 'gameOver', 'error', 'disconnect'];\n    eventsToForward.forEach(eventName => {\n      socket.on(eventName, data => {\n        if (eventName === 'init' && typeof data === 'string') {\n          try {\n            const parsedData = JSON.parse(data);\n            this.log(`Converted string to object for init event`);\n            data = parsedData;\n          } catch (e) {\n            this.log(`Could not parse init string as JSON, creating default homescreen state`);\n            data = {\n              appPhase: 'homescreen',\n              socketId: socket.id,\n              players: {},\n              activePlayers: [],\n              readyPlayers: [],\n              gameInProgress: false\n            };\n          }\n        }\n        this.emit(eventName, data);\n      });\n    });\n  }\n  attemptRoomRejoin(socket) {\n    const session = getGameSession();\n    if (session && session.roomCode) {\n      this.log(`Attempting to rejoin room ${session.roomCode} as ${session.playerName}`);\n\n      // Check if player was ready before disconnection\n      // This is determined by looking at the readyPlayers array in localStorage if available\n      let wasReady = false;\n      try {\n        // Try to determine if player was ready by checking local storage\n        const localReadyStatus = localStorage.getItem(`player_ready_${session.socketId}`);\n        if (localReadyStatus === 'true') {\n          wasReady = true;\n          this.log(`Player was previously ready, sending ready status in rejoin`);\n        }\n      } catch (e) {\n        this.log(`Could not determine previous ready status: ${e.message}`);\n      }\n      socket.emit('rejoinRoom', {\n        roomCode: session.roomCode,\n        playerName: session.playerName,\n        previousSocketId: session.socketId || this.socketId,\n        wasReady: wasReady // Include ready status in rejoin request\n      });\n    }\n  }\n  emit(eventName, data) {\n    // For non-EventEmitter events, send to server\n    if (eventName !== 'newListener' && eventName !== 'removeListener') {\n      if (this.activeSocket) {\n        this.activeSocket.emit(eventName, data);\n      } else {\n        this.log(`Cannot emit ${eventName}: no active socket`);\n      }\n    }\n\n    // Always forward all events to local listeners\n    return super.emit(eventName, data);\n  }\n  getSocket() {\n    return this.activeSocket;\n  }\n  getSocketId() {\n    return this.socketId;\n  }\n  disconnect() {\n    if (this.activeSocket) {\n      this.activeSocket.disconnect();\n    }\n    this.activeSocket = null;\n    this.initialized = false;\n    if (this.reconnectTimer) {\n      clearTimeout(this.reconnectTimer);\n      this.reconnectTimer = null;\n    }\n  }\n}\n\n// Create a singleton instance\nconst serverManager = new ServerConnectionManager();\nexport default serverManager;","map":{"version":3,"names":["io","EventEmitter","saveGameSession","getGameSession","clearGameSession","serverUrl","URL","server","url","absoluteUrl","hostname","port","log","socket","reconnection","reconnectionAttempts","reconnectionDelay","reconnectionDelayMax","timeout","transports","ServerConnectionManager","constructor","serverList","activeSocket","socketId","debug","autoReconnect","reconnectInterval","initialized","reconnectTimer","message","console","initialize","onConnectedCallback","onStateChangeCallback","configServers","config","loadConfig","client","Array","isArray","serverAddresses","length","e","id","host","leaderServer","isConnected","Promise","resolve","setTimeout","disconnect","on","clearTimeout","leaderInfo","emit","response","isLeader","leaderUrl","leaderParts","split","leaderPort","parseInt","leaderHost","replace","leaderId","error","connectToServer","scheduleReconnect","Error","reject","setActiveServer","reason","type","forwardEvents","attemptRoomRejoin","currentUrl","window","location","href","currentPort","forEach","toString","fetch","then","ok","localStorage","setItem","catch","eventsToForward","eventName","data","parsedData","JSON","parse","appPhase","players","activePlayers","readyPlayers","gameInProgress","session","roomCode","playerName","wasReady","localReadyStatus","getItem","previousSocketId","getSocket","getSocketId","serverManager"],"sources":["/Users/driesrooryck/Desktop/s25/new_try/distributed-systems/tetris/client/src/utils/serverConnection.js"],"sourcesContent":["import { io } from 'socket.io-client';\nimport { EventEmitter } from 'events';\nimport { saveGameSession, getGameSession, clearGameSession } from './sessionStorage';\n\n// Add this function to load the config at the top of your file\nconst serverUrl = new URL(server.url);\nconst absoluteUrl = `http://${serverUrl.hostname}:${serverUrl.port}`;\n\nthis.log(`Connecting to server at ${absoluteUrl}`);\n\n// Connect using the absolute URL (not relative)\nconst socket = io(absoluteUrl, {\n  reconnection: true,\n  reconnectionAttempts: 5,\n  reconnectionDelay: 1000,\n  reconnectionDelayMax: 5000,\n  timeout: 10000,\n  transports: ['polling', 'websocket'] // Try polling first, then websocket\n});\n\nclass ServerConnectionManager extends EventEmitter {\n  constructor() {\n    super();\n    this.serverList = [];\n    this.activeSocket = null;\n    this.socketId = null;\n    \n    // Configuration\n    this.debug = true;\n    this.autoReconnect = true;\n    this.reconnectInterval = 2000;\n    \n    // Status tracking\n    this.initialized = false;\n    this.reconnectTimer = null;\n  }\n  \n  log(message) {\n    if (this.debug) {\n      console.log(`[ServerManager] ${message}`);\n    }\n  }\n  \n  async initialize(onConnectedCallback = null, onStateChangeCallback = null, serverList = null) {\n    if (this.initialized) {\n      return;\n    }\n    \n    this.onConnectedCallback = onConnectedCallback;\n    this.onStateChangeCallback = onStateChangeCallback;\n\n\n    // Try to load server list from config.json first\n    let configServers = null;\n    try {\n      const config = await loadConfig();\n      if (config && config.client && Array.isArray(config.client.serverAddresses)) {\n        configServers = config.client.serverAddresses;\n        this.log(`Loaded ${configServers.length} servers from config.json`);\n      }\n    } catch (e) {\n      this.log(`Error loading config: ${e.message}`);\n    }\n  \n    try {\n      // Use provided server list or default to localhost ports\n      this.serverList = serverList || [\n        { id: 0, host: 'localhost', port: 3001 },\n        { id: 1, host: 'localhost', port: 3002 },\n        { id: 2, host: 'localhost', port: 3003 }\n      ];\n      \n      this.log(`Initializing connection manager with ${this.serverList.length} servers`);\n      \n      // First try to connect to any server to find the leader\n      let leaderServer = null;\n      \n      for (const server of this.serverList) {\n        const serverUrl = `http://${server.host}:${server.port}`;\n        try {\n          this.log(`Checking server ${serverUrl} for leader info`);\n          const socket = io(serverUrl, {\n            reconnection: false,\n            timeout: 5000\n          });\n          \n          // Wait for connection or timeout\n          const isConnected = await new Promise((resolve) => {\n            const timeout = setTimeout(() => {\n              socket.disconnect();\n              resolve(false);\n            }, 5000);\n            \n            socket.on('connect', () => {\n              clearTimeout(timeout);\n              resolve(true);\n            });\n            \n            socket.on('connect_error', () => {\n              clearTimeout(timeout);\n              socket.disconnect();\n              resolve(false);\n            });\n          });\n          \n          if (isConnected) {\n            // Get leader info from this server\n            const leaderInfo = await new Promise((resolve) => {\n              socket.emit('checkLeader', {}, (response) => {\n                if (response && response.isLeader) {\n                  // This server is the leader\n                  resolve({\n                    id: server.id,\n                    host: server.host,\n                    port: server.port,\n                    url: serverUrl\n                  });\n                } else if (response && response.leaderUrl) {\n                  // Get leader info from response\n                  const leaderParts = response.leaderUrl.split(':');\n                  const leaderPort = parseInt(leaderParts[leaderParts.length - 1]);\n                  const leaderHost = leaderParts[leaderParts.length - 2].replace(/\\/\\//g, '');\n                  \n                  resolve({\n                    id: response.leaderId || 0,\n                    host: leaderHost,\n                    port: leaderPort,\n                    url: response.leaderUrl\n                  });\n                } else {\n                  // No leader info, use this server temporarily\n                  resolve({\n                    id: server.id,\n                    host: server.host,\n                    port: server.port,\n                    url: serverUrl\n                  });\n                }\n              });\n              \n              // If no response in 3 seconds, just use this server\n              setTimeout(() => {\n                resolve({\n                  id: server.id,\n                  host: server.host,\n                  port: server.port,\n                  url: serverUrl\n                });\n              }, 3000);\n            });\n            \n            socket.disconnect();\n            leaderServer = leaderInfo;\n            break;\n          }\n        } catch (error) {\n          this.log(`Error checking server ${serverUrl}: ${error.message}`);\n          // Continue to next server\n        }\n      }\n      \n      // Now connect to the leader server or first server if no leader found\n      if (leaderServer) {\n        this.log(`Connecting to leader server at ${leaderServer.url}`);\n        await this.connectToServer(leaderServer);\n      } else if (this.serverList.length > 0) {\n        // Try each server until one works\n        for (const server of this.serverList) {\n          const serverUrl = `http://${server.host}:${server.port}`;\n          try {\n            this.log(`Trying to connect to server ${serverUrl}`);\n            await this.connectToServer({ \n              id: server.id,\n              host: server.host,\n              port: server.port,\n              url: serverUrl\n            });\n            if (this.activeSocket) break;\n          } catch (error) {\n            this.log(`Failed to connect to ${serverUrl}: ${error.message}`);\n          }\n        }\n      }\n      \n      this.initialized = true;\n      \n      // If we don't have a connection yet, schedule a retry\n      if (!this.activeSocket && this.autoReconnect) {\n        this.scheduleReconnect();\n      }\n    } catch (error) {\n      this.log(`Initialization error: ${error.message}`);\n      if (this.autoReconnect) {\n        this.scheduleReconnect();\n      }\n    }\n  }\n  \n  async connectToServer(server) {\n    if (!server || !server.url) {\n      throw new Error('Invalid server configuration');\n    }\n    \n    const serverUrl = new URL(server.url);\n    const absoluteUrl = `http://${serverUrl.hostname}:${serverUrl.port}`;\n    \n    this.log(`Connecting to server at ${absoluteUrl}`);\n    \n    // Connect using the absolute URL (not relative)\n    const socket = io(absoluteUrl, {\n      reconnection: true,\n      reconnectionAttempts: 5,\n      reconnectionDelay: 1000,\n      reconnectionDelayMax: 5000,\n      timeout: 10000,\n      transports: ['polling', 'websocket'] // Try polling first, then websocket\n    });\n    \n    return new Promise((resolve, reject) => {\n      \n      // Set up connection timeout\n      const timeout = setTimeout(() => {\n        socket.disconnect();\n        reject(new Error(`Connection timeout to ${server.url}`));\n      }, 10000);\n      \n      // Handle connection\n      socket.on('connect', () => {\n        clearTimeout(timeout);\n        this.log(`Connected to server at ${server.url}`);\n        this.setActiveServer(socket, server);\n        resolve(true);\n      });\n      \n      // Handle connection error\n      socket.on('connect_error', (error) => {\n        clearTimeout(timeout);\n        this.log(`Connection error to ${server.url}: ${error.message}`);\n        reject(error);\n      });\n      \n      // Handle disconnection\n      socket.on('disconnect', (reason) => {\n        this.log(`Disconnected from ${server.url}: ${reason}`);\n        \n        // If this was our active socket, try to reconnect\n        if (this.activeSocket === socket) {\n          this.activeSocket = null;\n          \n          // Notify about server change\n          if (this.onStateChangeCallback) {\n            this.onStateChangeCallback({\n              type: 'disconnected',\n              message: `Disconnected from server: ${reason}`\n            });\n          }\n          \n          if (this.autoReconnect && reason !== 'io client disconnect') {\n            this.scheduleReconnect();\n          }\n        }\n      });\n    });\n  }\n  \n  setActiveServer(socket, server) {\n    this.activeSocket = socket;\n    this.socketId = socket.id;\n    \n    // Forward events from this socket\n    this.forwardEvents(socket);\n    \n    // Try to rejoin a room if we have saved session\n    this.attemptRoomRejoin(socket);\n    \n    // Call the connected callback if provided\n    if (this.onConnectedCallback) {\n      this.onConnectedCallback(socket);\n    }\n    \n    // Notify about server change\n    if (this.onStateChangeCallback) {\n      this.onStateChangeCallback({\n        type: 'connected',\n        server: server.url,\n      });\n    }\n  }\n  \n  scheduleReconnect() {\n    // First check if our origin server is different from active leader\n    const currentUrl = new URL(window.location.href);\n    const currentPort = currentUrl.port;\n    \n    // Try to find a working server to redirect to\n    this.serverList.forEach(server => {\n      if (server.port.toString() !== currentPort) {\n        // Try a basic ping to see if this server is alive\n        fetch(`http://${server.host}:${server.port}/status`, { timeout: 2000 })\n          .then(response => {\n            if (response.ok) {\n              // Found a working server, redirect the browser\n              this.log(`Redirecting to working server: ${server.port}`);\n              \n              // Save that we need to rejoin\n              localStorage.setItem('needs_browser_rejoin', 'true');\n              \n              // Redirect the browser to the new server\n              window.location.href = window.location.href.replace(\n                `:${currentPort}`,\n                `:${server.port}`\n              );\n              return;\n            }\n          })\n          .catch(() => {\n            // This server is also down, try the next one\n          });\n      }\n    });\n    \n    // Continue with normal reconnection if we didn't redirect\n    if (this.reconnectTimer) {\n      clearTimeout(this.reconnectTimer);\n    }\n    \n    this.reconnectTimer = setTimeout(async () => {\n      this.log('Attempting to reconnect...');\n      await this.initialize(this.onConnectedCallback, this.onStateChangeCallback);\n    }, this.reconnectInterval);\n  }\n  \n  forwardEvents(socket) {\n    if (!socket) return;\n    \n    // Forward common events from the socket to this event emitter\n    const eventsToForward = [\n      'init', 'gameState', 'roomCreated', 'roomJoined', 'roomRejoined',\n      'roomLeft', 'playerJoined', 'playerLeft', 'playerReady',\n      'gameStarted', 'gameOver', 'error', 'disconnect'\n    ];\n    \n    eventsToForward.forEach(eventName => {\n      socket.on(eventName, (data) => {\n        if (eventName === 'init' && typeof data === 'string') {\n          try {\n            const parsedData = JSON.parse(data);\n            this.log(`Converted string to object for init event`);\n            data = parsedData;\n          } catch (e) {\n            this.log(`Could not parse init string as JSON, creating default homescreen state`);\n            data = { \n              appPhase: 'homescreen',\n              socketId: socket.id,\n              players: {},\n              activePlayers: [],\n              readyPlayers: [],\n              gameInProgress: false\n            };\n          }\n        }\n        \n        this.emit(eventName, data);\n      });\n    });\n  }\n  \n  attemptRoomRejoin(socket) {\n    const session = getGameSession();\n    if (session && session.roomCode) {\n      this.log(`Attempting to rejoin room ${session.roomCode} as ${session.playerName}`);\n      \n      // Check if player was ready before disconnection\n      // This is determined by looking at the readyPlayers array in localStorage if available\n      let wasReady = false;\n      try {\n        // Try to determine if player was ready by checking local storage\n        const localReadyStatus = localStorage.getItem(`player_ready_${session.socketId}`);\n        if (localReadyStatus === 'true') {\n          wasReady = true;\n          this.log(`Player was previously ready, sending ready status in rejoin`);\n        }\n      } catch (e) {\n        this.log(`Could not determine previous ready status: ${e.message}`);\n      }\n      \n      socket.emit('rejoinRoom', {\n        roomCode: session.roomCode,\n        playerName: session.playerName,\n        previousSocketId: session.socketId || this.socketId,\n        wasReady: wasReady // Include ready status in rejoin request\n      });\n    }\n  }\n  \n  emit(eventName, data) {\n    // For non-EventEmitter events, send to server\n    if (eventName !== 'newListener' && eventName !== 'removeListener') {\n      if (this.activeSocket) {\n        this.activeSocket.emit(eventName, data);\n      } else {\n        this.log(`Cannot emit ${eventName}: no active socket`);\n      }\n    }\n    \n    // Always forward all events to local listeners\n    return super.emit(eventName, data);\n  }\n  \n  getSocket() {\n    return this.activeSocket;\n  }\n  \n  getSocketId() {\n    return this.socketId;\n  }\n  \n  disconnect() {\n    if (this.activeSocket) {\n      this.activeSocket.disconnect();\n    }\n    \n    this.activeSocket = null;\n    this.initialized = false;\n    \n    if (this.reconnectTimer) {\n      clearTimeout(this.reconnectTimer);\n      this.reconnectTimer = null;\n    }\n  }\n}\n\n// Create a singleton instance\nconst serverManager = new ServerConnectionManager();\nexport default serverManager;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}