{"ast":null,"code":"var _jsxFileName = \"/Users/driesrooryck/Desktop/s25/distributed-systems/tetris/client/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { io } from 'socket.io-client';\nimport GameBoard from './GameBoard';\n\n// Add debugging to see connection attempts\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconsole.log('Attempting to connect to server at http://localhost:3001');\nconst socket = io('http://localhost:3001'); // server endpoint\n\nfunction App() {\n  _s();\n  const [gameState, setGameState] = useState(null);\n  const [connectionStatus, setConnectionStatus] = useState('connecting');\n  useEffect(() => {\n    socket.on('connect', () => {\n      console.log('Connected to server! My socket ID is:', socket.id);\n      setConnectionStatus('connected');\n    });\n    socket.on('connect_error', error => {\n      console.log('Connection error:', error);\n      setConnectionStatus('error: ' + error.message);\n    });\n    socket.on('init', data => {\n      console.log('Received init data:', data);\n      setGameState(data);\n    });\n    socket.on('gameState', data => {\n      console.log('Received gameState update:', data);\n      setGameState(data);\n    });\n\n    // Cleanup event listeners when component unmounts\n    return () => {\n      socket.off('connect');\n      socket.off('connect_error');\n      socket.off('init');\n      socket.off('gameState');\n    };\n  }, []);\n\n  // Example input handlers\n  const handleKeyDown = e => {\n    let action = null;\n    if (e.key === 'ArrowLeft') action = {\n      type: 'moveLeft'\n    };\n    if (e.key === 'ArrowRight') action = {\n      type: 'moveRight'\n    };\n    if (e.key === 'ArrowUp') action = {\n      type: 'rotate'\n    };\n    if (e.key === 'ArrowDown') action = {\n      type: 'drop'\n    };\n    if (action) {\n      socket.emit('playerAction', action);\n    }\n  };\n  if (!gameState) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Tetristributed\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Connection status: \", connectionStatus]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Waiting for game state from server...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onKeyDown: handleKeyDown,\n    tabIndex: \"0\",\n    style: {\n      outline: 'none'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Tetristributed\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Connected as player: \", socket.id]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(GameBoard, {\n      board: gameState.board\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"ThpGNN3UUZqC4m/0F49gNbPQKUo=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","io","GameBoard","jsxDEV","_jsxDEV","console","log","socket","App","_s","gameState","setGameState","connectionStatus","setConnectionStatus","on","id","error","message","data","off","handleKeyDown","e","action","key","type","emit","children","fileName","_jsxFileName","lineNumber","columnNumber","onKeyDown","tabIndex","style","outline","board","_c","$RefreshReg$"],"sources":["/Users/driesrooryck/Desktop/s25/distributed-systems/tetris/client/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { io } from 'socket.io-client';\nimport GameBoard from './GameBoard';\n\n// Add debugging to see connection attempts\nconsole.log('Attempting to connect to server at http://localhost:3001');\nconst socket = io('http://localhost:3001'); // server endpoint\n\nfunction App() {\n  const [gameState, setGameState] = useState(null);\n  const [connectionStatus, setConnectionStatus] = useState('connecting');\n\n  useEffect(() => {\n    socket.on('connect', () => {\n      console.log('Connected to server! My socket ID is:', socket.id);\n      setConnectionStatus('connected');\n    });\n  \n    socket.on('connect_error', (error) => {\n      console.log('Connection error:', error);\n      setConnectionStatus('error: ' + error.message);\n    });\n\n    socket.on('init', (data) => {\n      console.log('Received init data:', data);\n      setGameState(data);\n    });\n  \n    socket.on('gameState', (data) => {\n      console.log('Received gameState update:', data);\n      setGameState(data);\n    });\n  \n    // Cleanup event listeners when component unmounts\n    return () => {\n      socket.off('connect');\n      socket.off('connect_error');\n      socket.off('init');\n      socket.off('gameState');\n    };\n  }, []);\n  \n  // Example input handlers\n  const handleKeyDown = (e) => {\n    let action = null;\n    if (e.key === 'ArrowLeft') action = { type: 'moveLeft' };\n    if (e.key === 'ArrowRight') action = { type: 'moveRight' };\n    if (e.key === 'ArrowUp') action = { type: 'rotate' };\n    if (e.key === 'ArrowDown') action = { type: 'drop' };\n\n    if (action) {\n      socket.emit('playerAction', action);\n    }\n  };\n\n  if (!gameState) {\n    return (\n      <div>\n        <h1>Tetristributed</h1>\n        <p>Connection status: {connectionStatus}</p>\n        <p>Waiting for game state from server...</p>\n      </div>\n    );\n  }\n\n  return (\n    <div onKeyDown={handleKeyDown} tabIndex=\"0\" style={{ outline: 'none' }}>\n      <h1>Tetristributed</h1>\n      <p>Connected as player: {socket.id}</p>\n      <GameBoard board={gameState.board} />\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}