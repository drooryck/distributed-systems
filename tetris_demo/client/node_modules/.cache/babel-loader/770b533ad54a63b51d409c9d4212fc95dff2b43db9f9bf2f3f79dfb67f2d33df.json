{"ast":null,"code":"// Session storage utilities for game persistence across server failovers\n\nconst GAME_SESSION_KEY = 'tetris_game_session';\n\n/**\n * Save the current game session data to localStorage\n * This allows clients to rejoin their game after server failover\n */\nexport const saveGameSession = data => {\n  try {\n    // Add timestamp and ensure all required fields are present\n    const sessionData = {\n      ...data,\n      timestamp: Date.now(),\n      // Make sure we have playerName and roomCode\n      playerName: data.playerName || 'Player',\n      roomCode: data.roomCode\n    };\n    localStorage.setItem(GAME_SESSION_KEY, JSON.stringify(sessionData));\n    console.log('Game session saved:', sessionData);\n  } catch (error) {\n    console.error('Failed to save game session:', error);\n  }\n};\n\n/**\n * Retrieve saved game session data from localStorage\n */\nexport const getGameSession = () => {\n  try {\n    const data = localStorage.getItem(GAME_SESSION_KEY);\n    if (!data) return null;\n    const sessionData = JSON.parse(data);\n\n    // Check if session is too old (over 30 minutes)\n    const MAX_SESSION_AGE = 30 * 60 * 1000; // 30 minutes\n    if (sessionData.timestamp && Date.now() - sessionData.timestamp > MAX_SESSION_AGE) {\n      clearGameSession();\n      return null;\n    }\n    return sessionData;\n  } catch (error) {\n    console.error('Failed to retrieve game session:', error);\n    return null;\n  }\n};\n\n/**\n * Clear the saved game session data\n */\nexport const clearGameSession = () => {\n  try {\n    localStorage.removeItem(GAME_SESSION_KEY);\n    console.log('Game session cleared');\n  } catch (error) {\n    console.error('Failed to clear game session:', error);\n  }\n};\n\n/**\n * Update only specific fields in the session without changing others\n */\nexport const updateGameSession = updates => {\n  try {\n    const currentSession = getGameSession();\n    if (!currentSession) return false;\n    const updatedSession = {\n      ...currentSession,\n      ...updates,\n      timestamp: Date.now() // Reset timestamp on updates\n    };\n    localStorage.setItem(GAME_SESSION_KEY, JSON.stringify(updatedSession));\n    return true;\n  } catch (error) {\n    console.error('Failed to update game session:', error);\n    return false;\n  }\n};","map":{"version":3,"names":["GAME_SESSION_KEY","saveGameSession","data","sessionData","timestamp","Date","now","playerName","roomCode","localStorage","setItem","JSON","stringify","console","log","error","getGameSession","getItem","parse","MAX_SESSION_AGE","clearGameSession","removeItem","updateGameSession","updates","currentSession","updatedSession"],"sources":["/Users/driesrooryck/Desktop/s25/new_try/distributed-systems/tetris/client/src/utils/sessionStorage.js"],"sourcesContent":["// Session storage utilities for game persistence across server failovers\n\nconst GAME_SESSION_KEY = 'tetris_game_session';\n\n/**\n * Save the current game session data to localStorage\n * This allows clients to rejoin their game after server failover\n */\nexport const saveGameSession = (data) => {\n  try {\n    // Add timestamp and ensure all required fields are present\n    const sessionData = {\n      ...data,\n      timestamp: Date.now(),\n      // Make sure we have playerName and roomCode\n      playerName: data.playerName || 'Player',\n      roomCode: data.roomCode\n    };\n    \n    localStorage.setItem(GAME_SESSION_KEY, JSON.stringify(sessionData));\n    console.log('Game session saved:', sessionData);\n  } catch (error) {\n    console.error('Failed to save game session:', error);\n  }\n};\n\n/**\n * Retrieve saved game session data from localStorage\n */\nexport const getGameSession = () => {\n  try {\n    const data = localStorage.getItem(GAME_SESSION_KEY);\n    if (!data) return null;\n    \n    const sessionData = JSON.parse(data);\n    \n    // Check if session is too old (over 30 minutes)\n    const MAX_SESSION_AGE = 30 * 60 * 1000; // 30 minutes\n    if (sessionData.timestamp && Date.now() - sessionData.timestamp > MAX_SESSION_AGE) {\n      clearGameSession();\n      return null;\n    }\n    \n    return sessionData;\n  } catch (error) {\n    console.error('Failed to retrieve game session:', error);\n    return null;\n  }\n};\n\n/**\n * Clear the saved game session data\n */\nexport const clearGameSession = () => {\n  try {\n    localStorage.removeItem(GAME_SESSION_KEY);\n    console.log('Game session cleared');\n  } catch (error) {\n    console.error('Failed to clear game session:', error);\n  }\n};\n\n/**\n * Update only specific fields in the session without changing others\n */\nexport const updateGameSession = (updates) => {\n  try {\n    const currentSession = getGameSession();\n    if (!currentSession) return false;\n    \n    const updatedSession = {\n      ...currentSession,\n      ...updates,\n      timestamp: Date.now() // Reset timestamp on updates\n    };\n    \n    localStorage.setItem(GAME_SESSION_KEY, JSON.stringify(updatedSession));\n    return true;\n  } catch (error) {\n    console.error('Failed to update game session:', error);\n    return false;\n  }\n};"],"mappings":"AAAA;;AAEA,MAAMA,gBAAgB,GAAG,qBAAqB;;AAE9C;AACA;AACA;AACA;AACA,OAAO,MAAMC,eAAe,GAAIC,IAAI,IAAK;EACvC,IAAI;IACF;IACA,MAAMC,WAAW,GAAG;MAClB,GAAGD,IAAI;MACPE,SAAS,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC;MACrB;MACAC,UAAU,EAAEL,IAAI,CAACK,UAAU,IAAI,QAAQ;MACvCC,QAAQ,EAAEN,IAAI,CAACM;IACjB,CAAC;IAEDC,YAAY,CAACC,OAAO,CAACV,gBAAgB,EAAEW,IAAI,CAACC,SAAS,CAACT,WAAW,CAAC,CAAC;IACnEU,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEX,WAAW,CAAC;EACjD,CAAC,CAAC,OAAOY,KAAK,EAAE;IACdF,OAAO,CAACE,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;EACtD;AACF,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAClC,IAAI;IACF,MAAMd,IAAI,GAAGO,YAAY,CAACQ,OAAO,CAACjB,gBAAgB,CAAC;IACnD,IAAI,CAACE,IAAI,EAAE,OAAO,IAAI;IAEtB,MAAMC,WAAW,GAAGQ,IAAI,CAACO,KAAK,CAAChB,IAAI,CAAC;;IAEpC;IACA,MAAMiB,eAAe,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC;IACxC,IAAIhB,WAAW,CAACC,SAAS,IAAIC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGH,WAAW,CAACC,SAAS,GAAGe,eAAe,EAAE;MACjFC,gBAAgB,CAAC,CAAC;MAClB,OAAO,IAAI;IACb;IAEA,OAAOjB,WAAW;EACpB,CAAC,CAAC,OAAOY,KAAK,EAAE;IACdF,OAAO,CAACE,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;IACxD,OAAO,IAAI;EACb;AACF,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMK,gBAAgB,GAAGA,CAAA,KAAM;EACpC,IAAI;IACFX,YAAY,CAACY,UAAU,CAACrB,gBAAgB,CAAC;IACzCa,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;EACrC,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdF,OAAO,CAACE,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;EACvD;AACF,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMO,iBAAiB,GAAIC,OAAO,IAAK;EAC5C,IAAI;IACF,MAAMC,cAAc,GAAGR,cAAc,CAAC,CAAC;IACvC,IAAI,CAACQ,cAAc,EAAE,OAAO,KAAK;IAEjC,MAAMC,cAAc,GAAG;MACrB,GAAGD,cAAc;MACjB,GAAGD,OAAO;MACVnB,SAAS,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC,CAAC;IACxB,CAAC;IAEDG,YAAY,CAACC,OAAO,CAACV,gBAAgB,EAAEW,IAAI,CAACC,SAAS,CAACa,cAAc,CAAC,CAAC;IACtE,OAAO,IAAI;EACb,CAAC,CAAC,OAAOV,KAAK,EAAE;IACdF,OAAO,CAACE,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;IACtD,OAAO,KAAK;EACd;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}