{"ast":null,"code":"import{io}from'socket.io-client';import{EventEmitter}from'events';import{saveGameSession,getGameSession,clearGameSession}from'./sessionStorage';// Add this function to load the config at the top of your file\nasync function loadConfig(){try{// Get the current hostname - this lets it work from any address\nconst currentUrl=new URL(window.location.href);const configPath=`${currentUrl.protocol}//${currentUrl.host}/config.json`;console.log(`Loading config from ${configPath}`);const response=await fetch(configPath);if(!response.ok){console.warn(`Failed to load config.json: ${response.status}`);return null;}const config=await response.json();console.log('Successfully loaded config:',config);return config;}catch(error){console.warn('Error loading config.json:',error);return null;}}class ServerConnectionManager extends EventEmitter{constructor(){super();this.serverList=[];this.activeSocket=null;this.socketId=null;// Configuration\nthis.debug=true;this.autoReconnect=true;this.reconnectInterval=2000;// Status tracking\nthis.initialized=false;this.reconnectTimer=null;}log(message){if(this.debug){console.log(`[ServerManager] ${message}`);}}async initialize(){let onConnectedCallback=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;let onStateChangeCallback=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;let serverList=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;if(this.initialized){return;}this.onConnectedCallback=onConnectedCallback;this.onStateChangeCallback=onStateChangeCallback;// Try to load server list from config.json first\nlet configServers=null;try{const config=await loadConfig();if(config&&config.client&&Array.isArray(config.client.serverAddresses)){configServers=config.client.serverAddresses;this.log(`Loaded ${configServers.length} servers from config.json`);// log the whole addresses\n// configServers.forEach((server, index) => {\n//   this.log(`Server ${index}: ${JSON.stringify(server)}`);\n// });\n}}catch(e){this.log(`Error loading config: ${e.message}`);}try{// Use provided server list or default to localhost ports\nthis.serverList=configServers||[{id:0,host:'localhost',port:3001},{id:1,host:'localhost',port:3002},{id:2,host:'localhost',port:3003}];this.log(`Initializing connection manager with ${this.serverList.length} servers`);// log the whole server list\nthis.serverList.forEach((server,index)=>{this.log(`Server ${index}: ${JSON.stringify(server)}`);});// First try to connect to any server to find the leader\nlet leaderServer=null;for(const server of this.serverList){const serverUrl=`http://${server.host}:${server.port}`;try{this.log(`Checking server ${serverUrl} for leader info`);const socket=io(serverUrl,{reconnection:false,timeout:5000});// Wait for connection or timeout\nconst isConnected=await new Promise(resolve=>{const timeout=setTimeout(()=>{socket.disconnect();resolve(false);},5000);socket.on('connect',()=>{clearTimeout(timeout);resolve(true);});socket.on('connect_error',()=>{clearTimeout(timeout);socket.disconnect();resolve(false);});});if(isConnected){// Get leader info from this server\nconst leaderInfo=await new Promise(resolve=>{socket.emit('checkLeader',{},response=>{if(response&&response.isLeader){// This server is the leader\nresolve({id:server.id,host:server.host,port:server.port,url:serverUrl});}else if(response&&response.leaderUrl){// Get leader info from response\nconst leaderParts=response.leaderUrl.split(':');const leaderPort=parseInt(leaderParts[leaderParts.length-1]);const leaderHost=leaderParts[leaderParts.length-2].replace(/\\/\\//g,'');resolve({id:response.leaderId||0,host:leaderHost,port:leaderPort,url:response.leaderUrl});}else{// No leader info, use this server temporarily\nresolve({id:server.id,host:server.host,port:server.port,url:serverUrl});}});// If no response in 3 seconds, just use this server\nsetTimeout(()=>{resolve({id:server.id,host:server.host,port:server.port,url:serverUrl});},3000);});socket.disconnect();leaderServer=leaderInfo;break;}}catch(error){this.log(`Error checking server ${serverUrl}: ${error.message}`);// Continue to next server\n}}// Now connect to the leader server or first server if no leader found\nif(leaderServer){this.log(`Connecting to leader server at ${leaderServer.url}`);await this.connectToServer(leaderServer);}else if(this.serverList.length>0){// Try each server until one works\nfor(const server of this.serverList){const serverUrl=`http://${server.host}:${server.port}`;try{this.log(`Trying to connect to server ${serverUrl}`);await this.connectToServer({id:server.id,host:server.host,port:server.port,url:serverUrl});if(this.activeSocket)break;}catch(error){this.log(`Failed to connect to ${serverUrl}: ${error.message}`);}}}this.initialized=true;// If we don't have a connection yet, schedule a retry\nif(!this.activeSocket&&this.autoReconnect){this.scheduleReconnect();}}catch(error){this.log(`Initialization error: ${error.message}`);if(this.autoReconnect){this.scheduleReconnect();}}}async connectToServer(server){if(!server||!server.url){throw new Error('Invalid server configuration');}const serverUrl=new URL(server.url);const absoluteUrl=`http://${serverUrl.hostname}:${serverUrl.port}`;this.log(`Connecting to server at ${absoluteUrl}`);// Connect using the absolute URL (not relative)\nconst socket=io(absoluteUrl,{reconnection:true,reconnectionAttempts:5,reconnectionDelay:1000,reconnectionDelayMax:5000,timeout:10000,transports:['polling','websocket']// Try polling first, then websocket\n});return new Promise((resolve,reject)=>{// Set up connection timeout\nconst timeout=setTimeout(()=>{socket.disconnect();reject(new Error(`Connection timeout to ${server.url}`));},10000);// Handle connection\nsocket.on('connect',()=>{clearTimeout(timeout);this.log(`Connected to server at ${server.url}`);this.setActiveServer(socket,server);resolve(true);});// Handle connection error\nsocket.on('connect_error',error=>{clearTimeout(timeout);this.log(`Connection error to ${server.url}: ${error.message}`);reject(error);});// Handle disconnection\nsocket.on('disconnect',reason=>{this.log(`Disconnected from ${server.url}: ${reason}`);// If this was our active socket, try to reconnect\nif(this.activeSocket===socket){this.activeSocket=null;// Notify about server change\nif(this.onStateChangeCallback){this.onStateChangeCallback({type:'disconnected',message:`Disconnected from server: ${reason}`});}if(this.autoReconnect&&reason!=='io client disconnect'){this.scheduleReconnect();}}});});}setActiveServer(socket,server){this.activeSocket=socket;this.socketId=socket.id;// Forward events from this socket\nthis.forwardEvents(socket);// Check if this is a post-redirect reconnection\nconst needsRejoin=localStorage.getItem('needs_browser_rejoin');if(needsRejoin==='true'){console.log('RECONNECT DEBUG: Detected post-redirect reconnection');// Wait for the socket to be fully established before attempting rejoin\nsetTimeout(()=>{console.log('RECONNECT DEBUG: Executing delayed room rejoin after redirect');localStorage.removeItem('needs_browser_rejoin');this.attemptRoomRejoin(socket);},500);// 500ms delay to ensure socket is ready\n}else{// Normal connection - attempt rejoin immediately\nthis.attemptRoomRejoin(socket);}// Call the connected callback if provided\nif(this.onConnectedCallback){this.onConnectedCallback(socket);}// Notify about server change\nif(this.onStateChangeCallback){this.onStateChangeCallback({type:'connected',server:server.url});}}scheduleReconnect(){// First check if our origin server is different from active leader\nconst currentUrl=new URL(window.location.href);const currentPort=currentUrl.port;// Try to find a working server to redirect to\nthis.serverList.forEach(server=>{if(server.port.toString()!==currentPort){// Try a basic ping to see if this server is alive\nfetch(`http://${server.host}:${server.port}/status`,{timeout:2000}).then(response=>{if(response.ok){// Found a working server, redirect the browser\nthis.log(`Redirecting to working server: ${server.port}`);// Save that we need to rejoin\nlocalStorage.setItem('needs_browser_rejoin','true');// Redirect the browser to the new server\nwindow.location.href=window.location.href.replace(`:${currentPort}`,`:${server.port}`);return;}}).catch(()=>{// This server is also down, try the next one\n});}});// Continue with normal reconnection if we didn't redirect\nif(this.reconnectTimer){clearTimeout(this.reconnectTimer);}this.reconnectTimer=setTimeout(async()=>{this.log('Attempting to reconnect...');await this.initialize(this.onConnectedCallback,this.onStateChangeCallback);},this.reconnectInterval);}forwardEvents(socket){if(!socket)return;// Forward common events from the socket to this event emitter\nconst eventsToForward=['init','gameState','roomCreated','roomJoined','roomRejoined','roomLeft','playerJoined','playerLeft','playerReady','gameStarted','gameOver','error','disconnect'];eventsToForward.forEach(eventName=>{socket.on(eventName,data=>{if(eventName==='init'&&typeof data==='string'){try{const parsedData=JSON.parse(data);this.log(`Converted string to object for init event`);data=parsedData;}catch(e){this.log(`Could not parse init string as JSON, creating default homescreen state`);data={appPhase:'homescreen',socketId:socket.id,players:{},activePlayers:[],readyPlayers:[],gameInProgress:false};}}this.emit(eventName,data);});});}attemptRoomRejoin(socket){const session=getGameSession();this.log('negerballen');if(session&&session.roomCode){this.log(`Attempting to rejoin room ${session.roomCode} as ${session.playerName}`);// Check if player was ready before disconnection\n// This is determined by looking at the readyPlayers array in localStorage if available\nlet wasReady=false;try{// Try to determine if player was ready by checking local storage\nconst localReadyStatus=localStorage.getItem(`player_ready_${session.socketId}`);if(localReadyStatus==='true'){wasReady=true;this.log(`Player was previously ready, sending ready status in rejoin`);}}catch(e){this.log(`Could not determine previous ready status: ${e.message}`);}socket.emit('rejoinRoom',{roomCode:session.roomCode,playerName:session.playerName,previousSocketId:session.socketId||this.socketId,wasReady:wasReady// Include ready status in rejoin request\n});}}emit(eventName,data){// For non-EventEmitter events, send to server\nif(eventName!=='newListener'&&eventName!=='removeListener'){if(this.activeSocket){this.activeSocket.emit(eventName,data);}else{this.log(`Cannot emit ${eventName}: no active socket`);}}// Always forward all events to local listeners\nreturn super.emit(eventName,data);}getSocket(){return this.activeSocket;}getSocketId(){return this.socketId;}disconnect(){if(this.activeSocket){this.activeSocket.disconnect();}this.activeSocket=null;this.initialized=false;if(this.reconnectTimer){clearTimeout(this.reconnectTimer);this.reconnectTimer=null;}}}// Create a singleton instance\nconst serverManager=new ServerConnectionManager();export default serverManager;","map":{"version":3,"names":["io","EventEmitter","saveGameSession","getGameSession","clearGameSession","loadConfig","currentUrl","URL","window","location","href","configPath","protocol","host","console","log","response","fetch","ok","warn","status","config","json","error","ServerConnectionManager","constructor","serverList","activeSocket","socketId","debug","autoReconnect","reconnectInterval","initialized","reconnectTimer","message","initialize","onConnectedCallback","arguments","length","undefined","onStateChangeCallback","configServers","client","Array","isArray","serverAddresses","e","id","port","forEach","server","index","JSON","stringify","leaderServer","serverUrl","socket","reconnection","timeout","isConnected","Promise","resolve","setTimeout","disconnect","on","clearTimeout","leaderInfo","emit","isLeader","url","leaderUrl","leaderParts","split","leaderPort","parseInt","leaderHost","replace","leaderId","connectToServer","scheduleReconnect","Error","absoluteUrl","hostname","reconnectionAttempts","reconnectionDelay","reconnectionDelayMax","transports","reject","setActiveServer","reason","type","forwardEvents","needsRejoin","localStorage","getItem","removeItem","attemptRoomRejoin","currentPort","toString","then","setItem","catch","eventsToForward","eventName","data","parsedData","parse","appPhase","players","activePlayers","readyPlayers","gameInProgress","session","roomCode","playerName","wasReady","localReadyStatus","previousSocketId","getSocket","getSocketId","serverManager"],"sources":["/Users/driesrooryck/Desktop/s25/new_try/distributed-systems/tetris/client/src/utils/serverConnection.js"],"sourcesContent":["import { io } from 'socket.io-client';\nimport { EventEmitter } from 'events';\nimport { saveGameSession, getGameSession, clearGameSession } from './sessionStorage';\n\n// Add this function to load the config at the top of your file\nasync function loadConfig() {\n  try {\n    // Get the current hostname - this lets it work from any address\n    const currentUrl = new URL(window.location.href);\n    const configPath = `${currentUrl.protocol}//${currentUrl.host}/config.json`;\n    \n    console.log(`Loading config from ${configPath}`);\n    const response = await fetch(configPath);\n    \n    if (!response.ok) {\n      console.warn(`Failed to load config.json: ${response.status}`);\n      return null;\n    }\n    \n    const config = await response.json();\n    console.log('Successfully loaded config:', config);\n    return config;\n  } catch (error) {\n    console.warn('Error loading config.json:', error);\n    return null;\n  }\n}\n\nclass ServerConnectionManager extends EventEmitter {\n  constructor() {\n    super();\n    this.serverList = [];\n    this.activeSocket = null;\n    this.socketId = null;\n    \n    // Configuration\n    this.debug = true;\n    this.autoReconnect = true;\n    this.reconnectInterval = 2000;\n    \n    // Status tracking\n    this.initialized = false;\n    this.reconnectTimer = null;\n  }\n  \n  log(message) {\n    if (this.debug) {\n      console.log(`[ServerManager] ${message}`);\n    }\n  }\n  \n  async initialize(onConnectedCallback = null, onStateChangeCallback = null, serverList = null) {\n    if (this.initialized) {\n      return;\n    }\n    \n    this.onConnectedCallback = onConnectedCallback;\n    this.onStateChangeCallback = onStateChangeCallback;\n\n\n    // Try to load server list from config.json first\n    let configServers = null;\n    try {\n      const config = await loadConfig();\n      if (config && config.client && Array.isArray(config.client.serverAddresses)) {\n        configServers = config.client.serverAddresses;\n\n        this.log(`Loaded ${configServers.length} servers from config.json`);\n        // log the whole addresses\n\n        // configServers.forEach((server, index) => {\n        //   this.log(`Server ${index}: ${JSON.stringify(server)}`);\n        // });\n\n      }\n    } catch (e) {\n      this.log(`Error loading config: ${e.message}`);\n    }\n  \n    try {\n      // Use provided server list or default to localhost ports\n      this.serverList = configServers || [\n        { id: 0, host: 'localhost', port: 3001 },\n        { id: 1, host: 'localhost', port: 3002 }, \n        { id: 2, host: 'localhost', port: 3003 }\n      ];\n      \n      this.log(`Initializing connection manager with ${this.serverList.length} servers`);\n      // log the whole server list\n      this.serverList.forEach((server, index) => {\n        this.log(`Server ${index}: ${JSON.stringify(server)}`);\n      });\n      \n      // First try to connect to any server to find the leader\n      let leaderServer = null;\n      \n      for (const server of this.serverList) {\n        const serverUrl = `http://${server.host}:${server.port}`;\n        try {\n          this.log(`Checking server ${serverUrl} for leader info`);\n          const socket = io(serverUrl, {\n            reconnection: false,\n            timeout: 5000\n          });\n          \n          // Wait for connection or timeout\n          const isConnected = await new Promise((resolve) => {\n            const timeout = setTimeout(() => {\n              socket.disconnect();\n              resolve(false);\n            }, 5000);\n            \n            socket.on('connect', () => {\n              clearTimeout(timeout);\n              resolve(true);\n            });\n            \n            socket.on('connect_error', () => {\n              clearTimeout(timeout);\n              socket.disconnect();\n              resolve(false);\n            });\n          });\n          \n          if (isConnected) {\n            // Get leader info from this server\n            const leaderInfo = await new Promise((resolve) => {\n              socket.emit('checkLeader', {}, (response) => {\n                if (response && response.isLeader) {\n                  // This server is the leader\n                  resolve({\n                    id: server.id,\n                    host: server.host,\n                    port: server.port,\n                    url: serverUrl\n                  });\n                } else if (response && response.leaderUrl) {\n                  // Get leader info from response\n                  const leaderParts = response.leaderUrl.split(':');\n                  const leaderPort = parseInt(leaderParts[leaderParts.length - 1]);\n                  const leaderHost = leaderParts[leaderParts.length - 2].replace(/\\/\\//g, '');\n                  \n                  resolve({\n                    id: response.leaderId || 0,\n                    host: leaderHost,\n                    port: leaderPort,\n                    url: response.leaderUrl\n                  });\n                } else {\n                  // No leader info, use this server temporarily\n                  resolve({\n                    id: server.id,\n                    host: server.host,\n                    port: server.port,\n                    url: serverUrl\n                  });\n                }\n              });\n              \n              // If no response in 3 seconds, just use this server\n              setTimeout(() => {\n                resolve({\n                  id: server.id,\n                  host: server.host,\n                  port: server.port,\n                  url: serverUrl\n                });\n              }, 3000);\n            });\n            \n            socket.disconnect();\n            leaderServer = leaderInfo;\n            break;\n          }\n        } catch (error) {\n          this.log(`Error checking server ${serverUrl}: ${error.message}`);\n          // Continue to next server\n        }\n      }\n      \n      // Now connect to the leader server or first server if no leader found\n      if (leaderServer) {\n        this.log(`Connecting to leader server at ${leaderServer.url}`);\n        await this.connectToServer(leaderServer);\n      } else if (this.serverList.length > 0) {\n        // Try each server until one works\n        for (const server of this.serverList) {\n          const serverUrl = `http://${server.host}:${server.port}`;\n          try {\n            this.log(`Trying to connect to server ${serverUrl}`);\n            await this.connectToServer({ \n              id: server.id,\n              host: server.host,\n              port: server.port,\n              url: serverUrl\n            });\n            if (this.activeSocket) break;\n          } catch (error) {\n            this.log(`Failed to connect to ${serverUrl}: ${error.message}`);\n          }\n        }\n      }\n      \n      this.initialized = true;\n      \n      // If we don't have a connection yet, schedule a retry\n      if (!this.activeSocket && this.autoReconnect) {\n        this.scheduleReconnect();\n      }\n    } catch (error) {\n      this.log(`Initialization error: ${error.message}`);\n      if (this.autoReconnect) {\n        this.scheduleReconnect();\n      }\n    }\n  }\n  \n  async connectToServer(server) {\n    if (!server || !server.url) {\n      throw new Error('Invalid server configuration');\n    }\n    \n    const serverUrl = new URL(server.url);\n    const absoluteUrl = `http://${serverUrl.hostname}:${serverUrl.port}`;\n    \n    this.log(`Connecting to server at ${absoluteUrl}`);\n    \n    // Connect using the absolute URL (not relative)\n    const socket = io(absoluteUrl, {\n      reconnection: true,\n      reconnectionAttempts: 5,\n      reconnectionDelay: 1000,\n      reconnectionDelayMax: 5000,\n      timeout: 10000,\n      transports: ['polling', 'websocket'] // Try polling first, then websocket\n    });\n    \n    return new Promise((resolve, reject) => {\n      \n      // Set up connection timeout\n      const timeout = setTimeout(() => {\n        socket.disconnect();\n        reject(new Error(`Connection timeout to ${server.url}`));\n      }, 10000);\n      \n      // Handle connection\n      socket.on('connect', () => {\n        clearTimeout(timeout);\n        this.log(`Connected to server at ${server.url}`);\n        this.setActiveServer(socket, server);\n        resolve(true);\n      });\n      \n      // Handle connection error\n      socket.on('connect_error', (error) => {\n        clearTimeout(timeout);\n        this.log(`Connection error to ${server.url}: ${error.message}`);\n        reject(error);\n      });\n      \n      // Handle disconnection\n      socket.on('disconnect', (reason) => {\n        this.log(`Disconnected from ${server.url}: ${reason}`);\n        \n        // If this was our active socket, try to reconnect\n        if (this.activeSocket === socket) {\n          this.activeSocket = null;\n          \n          // Notify about server change\n          if (this.onStateChangeCallback) {\n            this.onStateChangeCallback({\n              type: 'disconnected',\n              message: `Disconnected from server: ${reason}`\n            });\n          }\n          \n          if (this.autoReconnect && reason !== 'io client disconnect') {\n            this.scheduleReconnect();\n          }\n        }\n      });\n    });\n  }\n  \n  setActiveServer(socket, server) {\n    this.activeSocket = socket;\n    this.socketId = socket.id;\n    \n\n\n    // Forward events from this socket\n    this.forwardEvents(socket);\n    \n    // Check if this is a post-redirect reconnection\n    const needsRejoin = localStorage.getItem('needs_browser_rejoin');\n    \n    if (needsRejoin === 'true') {\n      console.log('RECONNECT DEBUG: Detected post-redirect reconnection');\n      \n      // Wait for the socket to be fully established before attempting rejoin\n      setTimeout(() => {\n        console.log('RECONNECT DEBUG: Executing delayed room rejoin after redirect');\n        localStorage.removeItem('needs_browser_rejoin');\n        this.attemptRoomRejoin(socket);\n      }, 500); // 500ms delay to ensure socket is ready\n    } else {\n      // Normal connection - attempt rejoin immediately\n      this.attemptRoomRejoin(socket);\n    }\n  \n    \n    \n    // Call the connected callback if provided\n    if (this.onConnectedCallback) {\n      this.onConnectedCallback(socket);\n    }\n    \n    // Notify about server change\n    if (this.onStateChangeCallback) {\n      this.onStateChangeCallback({\n        type: 'connected',\n        server: server.url,\n      });\n    }\n  }\n  \n  scheduleReconnect() {\n    // First check if our origin server is different from active leader\n    const currentUrl = new URL(window.location.href);\n    const currentPort = currentUrl.port;\n    \n    // Try to find a working server to redirect to\n    this.serverList.forEach(server => {\n      if (server.port.toString() !== currentPort) {\n        // Try a basic ping to see if this server is alive\n        fetch(`http://${server.host}:${server.port}/status`, { timeout: 2000 })\n          .then(response => {\n            if (response.ok) {\n              // Found a working server, redirect the browser\n              this.log(`Redirecting to working server: ${server.port}`);\n              \n              // Save that we need to rejoin\n              localStorage.setItem('needs_browser_rejoin', 'true');\n              \n              // Redirect the browser to the new server\n              window.location.href = window.location.href.replace(\n                `:${currentPort}`,\n                `:${server.port}`\n              );\n              return;\n            }\n          })\n          .catch(() => {\n            // This server is also down, try the next one\n          });\n      }\n    });\n    \n    // Continue with normal reconnection if we didn't redirect\n    if (this.reconnectTimer) {\n      clearTimeout(this.reconnectTimer);\n    }\n    \n    this.reconnectTimer = setTimeout(async () => {\n      this.log('Attempting to reconnect...');\n      await this.initialize(this.onConnectedCallback, this.onStateChangeCallback);\n    }, this.reconnectInterval);\n  }\n  \n  forwardEvents(socket) {\n    if (!socket) return;\n    \n    // Forward common events from the socket to this event emitter\n    const eventsToForward = [\n      'init', 'gameState', 'roomCreated', 'roomJoined', 'roomRejoined',\n      'roomLeft', 'playerJoined', 'playerLeft', 'playerReady',\n      'gameStarted', 'gameOver', 'error', 'disconnect'\n    ];\n    \n    eventsToForward.forEach(eventName => {\n      socket.on(eventName, (data) => {\n        if (eventName === 'init' && typeof data === 'string') {\n          try {\n            const parsedData = JSON.parse(data);\n            this.log(`Converted string to object for init event`);\n            data = parsedData;\n          } catch (e) {\n            this.log(`Could not parse init string as JSON, creating default homescreen state`);\n            data = { \n              appPhase: 'homescreen',\n              socketId: socket.id,\n              players: {},\n              activePlayers: [],\n              readyPlayers: [],\n              gameInProgress: false\n            };\n          }\n        }\n        \n        this.emit(eventName, data);\n      });\n    });\n  }\n  \n  attemptRoomRejoin(socket) {\n    const session = getGameSession();\n    this.log('negerballen');\n    if (session && session.roomCode) {\n      this.log(`Attempting to rejoin room ${session.roomCode} as ${session.playerName}`);\n      \n      // Check if player was ready before disconnection\n      // This is determined by looking at the readyPlayers array in localStorage if available\n      let wasReady = false;\n      try {\n        // Try to determine if player was ready by checking local storage\n        const localReadyStatus = localStorage.getItem(`player_ready_${session.socketId}`);\n        if (localReadyStatus === 'true') {\n          wasReady = true;\n          this.log(`Player was previously ready, sending ready status in rejoin`);\n        }\n      } catch (e) {\n        this.log(`Could not determine previous ready status: ${e.message}`);\n      }\n      \n      socket.emit('rejoinRoom', {\n        roomCode: session.roomCode,\n        playerName: session.playerName,\n        previousSocketId: session.socketId || this.socketId,\n        wasReady: wasReady // Include ready status in rejoin request\n      });\n    }\n  }\n  \n  emit(eventName, data) {\n    // For non-EventEmitter events, send to server\n    if (eventName !== 'newListener' && eventName !== 'removeListener') {\n      if (this.activeSocket) {\n        this.activeSocket.emit(eventName, data);\n      } else {\n        this.log(`Cannot emit ${eventName}: no active socket`);\n      }\n    }\n    \n    // Always forward all events to local listeners\n    return super.emit(eventName, data);\n  }\n  \n  getSocket() {\n    return this.activeSocket;\n  }\n  \n  getSocketId() {\n    return this.socketId;\n  }\n  \n  disconnect() {\n    if (this.activeSocket) {\n      this.activeSocket.disconnect();\n    }\n    \n    this.activeSocket = null;\n    this.initialized = false;\n    \n    if (this.reconnectTimer) {\n      clearTimeout(this.reconnectTimer);\n      this.reconnectTimer = null;\n    }\n  }\n}\n\n// Create a singleton instance\nconst serverManager = new ServerConnectionManager();\nexport default serverManager;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}