{"ast":null,"code":"// Session storage utilities for game persistence across server failovers\nconst GAME_SESSION_KEY='tetris_game_session';/**\n * Save the current game session data to localStorage\n * This allows clients to rejoin their game after server failover\n */export const saveGameSession=data=>{try{// Add timestamp and ensure all required fields are present\nconst sessionData={...data,timestamp:Date.now(),// Make sure we have playerName and roomCode\nplayerName:data.playerName||'Player',roomCode:data.roomCode};localStorage.setItem(GAME_SESSION_KEY,JSON.stringify(sessionData));console.log('Game session saved:',sessionData);}catch(error){console.error('Failed to save game session:',error);}};/**\n * Retrieve saved game session data from localStorage\n */export const getGameSession=()=>{try{const data=localStorage.getItem(GAME_SESSION_KEY);if(!data)return null;const sessionData=JSON.parse(data);// Check if session is too old (over 30 minutes)\nconst MAX_SESSION_AGE=30*60*1000;// 30 minutes\nif(sessionData.timestamp&&Date.now()-sessionData.timestamp>MAX_SESSION_AGE){clearGameSession();return null;}return sessionData;}catch(error){console.error('Failed to retrieve game session:',error);return null;}};/**\n * Clear the saved game session data\n */export const clearGameSession=()=>{try{localStorage.removeItem(GAME_SESSION_KEY);console.log('Game session cleared');}catch(error){console.error('Failed to clear game session:',error);}};/**\n * Update only specific fields in the session without changing others\n */export const updateGameSession=updates=>{try{const currentSession=getGameSession();if(!currentSession)return false;const updatedSession={...currentSession,...updates,timestamp:Date.now()// Reset timestamp on updates\n};localStorage.setItem(GAME_SESSION_KEY,JSON.stringify(updatedSession));return true;}catch(error){console.error('Failed to update game session:',error);return false;}};","map":{"version":3,"names":["GAME_SESSION_KEY","saveGameSession","data","sessionData","timestamp","Date","now","playerName","roomCode","localStorage","setItem","JSON","stringify","console","log","error","getGameSession","getItem","parse","MAX_SESSION_AGE","clearGameSession","removeItem","updateGameSession","updates","currentSession","updatedSession"],"sources":["/Users/driesrooryck/Desktop/s25/new_try/distributed-systems/tetris/client/src/utils/sessionStorage.js"],"sourcesContent":["// Session storage utilities for game persistence across server failovers\n\nconst GAME_SESSION_KEY = 'tetris_game_session';\n\n/**\n * Save the current game session data to localStorage\n * This allows clients to rejoin their game after server failover\n */\nexport const saveGameSession = (data) => {\n  try {\n    // Add timestamp and ensure all required fields are present\n    const sessionData = {\n      ...data,\n      timestamp: Date.now(),\n      // Make sure we have playerName and roomCode\n      playerName: data.playerName || 'Player',\n      roomCode: data.roomCode\n    };\n    \n    localStorage.setItem(GAME_SESSION_KEY, JSON.stringify(sessionData));\n    console.log('Game session saved:', sessionData);\n  } catch (error) {\n    console.error('Failed to save game session:', error);\n  }\n};\n\n/**\n * Retrieve saved game session data from localStorage\n */\nexport const getGameSession = () => {\n  try {\n    const data = localStorage.getItem(GAME_SESSION_KEY);\n    if (!data) return null;\n    \n    const sessionData = JSON.parse(data);\n    \n    // Check if session is too old (over 30 minutes)\n    const MAX_SESSION_AGE = 30 * 60 * 1000; // 30 minutes\n    if (sessionData.timestamp && Date.now() - sessionData.timestamp > MAX_SESSION_AGE) {\n      clearGameSession();\n      return null;\n    }\n    \n    return sessionData;\n  } catch (error) {\n    console.error('Failed to retrieve game session:', error);\n    return null;\n  }\n};\n\n/**\n * Clear the saved game session data\n */\nexport const clearGameSession = () => {\n  try {\n    localStorage.removeItem(GAME_SESSION_KEY);\n    console.log('Game session cleared');\n  } catch (error) {\n    console.error('Failed to clear game session:', error);\n  }\n};\n\n/**\n * Update only specific fields in the session without changing others\n */\nexport const updateGameSession = (updates) => {\n  try {\n    const currentSession = getGameSession();\n    if (!currentSession) return false;\n    \n    const updatedSession = {\n      ...currentSession,\n      ...updates,\n      timestamp: Date.now() // Reset timestamp on updates\n    };\n    \n    localStorage.setItem(GAME_SESSION_KEY, JSON.stringify(updatedSession));\n    return true;\n  } catch (error) {\n    console.error('Failed to update game session:', error);\n    return false;\n  }\n};"],"mappings":"AAAA;AAEA,KAAM,CAAAA,gBAAgB,CAAG,qBAAqB,CAE9C;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAC,eAAe,CAAIC,IAAI,EAAK,CACvC,GAAI,CACF;AACA,KAAM,CAAAC,WAAW,CAAG,CAClB,GAAGD,IAAI,CACPE,SAAS,CAAEC,IAAI,CAACC,GAAG,CAAC,CAAC,CACrB;AACAC,UAAU,CAAEL,IAAI,CAACK,UAAU,EAAI,QAAQ,CACvCC,QAAQ,CAAEN,IAAI,CAACM,QACjB,CAAC,CAEDC,YAAY,CAACC,OAAO,CAACV,gBAAgB,CAAEW,IAAI,CAACC,SAAS,CAACT,WAAW,CAAC,CAAC,CACnEU,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAEX,WAAW,CAAC,CACjD,CAAE,MAAOY,KAAK,CAAE,CACdF,OAAO,CAACE,KAAK,CAAC,8BAA8B,CAAEA,KAAK,CAAC,CACtD,CACF,CAAC,CAED;AACA;AACA,GACA,MAAO,MAAM,CAAAC,cAAc,CAAGA,CAAA,GAAM,CAClC,GAAI,CACF,KAAM,CAAAd,IAAI,CAAGO,YAAY,CAACQ,OAAO,CAACjB,gBAAgB,CAAC,CACnD,GAAI,CAACE,IAAI,CAAE,MAAO,KAAI,CAEtB,KAAM,CAAAC,WAAW,CAAGQ,IAAI,CAACO,KAAK,CAAChB,IAAI,CAAC,CAEpC;AACA,KAAM,CAAAiB,eAAe,CAAG,EAAE,CAAG,EAAE,CAAG,IAAI,CAAE;AACxC,GAAIhB,WAAW,CAACC,SAAS,EAAIC,IAAI,CAACC,GAAG,CAAC,CAAC,CAAGH,WAAW,CAACC,SAAS,CAAGe,eAAe,CAAE,CACjFC,gBAAgB,CAAC,CAAC,CAClB,MAAO,KAAI,CACb,CAEA,MAAO,CAAAjB,WAAW,CACpB,CAAE,MAAOY,KAAK,CAAE,CACdF,OAAO,CAACE,KAAK,CAAC,kCAAkC,CAAEA,KAAK,CAAC,CACxD,MAAO,KAAI,CACb,CACF,CAAC,CAED;AACA;AACA,GACA,MAAO,MAAM,CAAAK,gBAAgB,CAAGA,CAAA,GAAM,CACpC,GAAI,CACFX,YAAY,CAACY,UAAU,CAACrB,gBAAgB,CAAC,CACzCa,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC,CACrC,CAAE,MAAOC,KAAK,CAAE,CACdF,OAAO,CAACE,KAAK,CAAC,+BAA+B,CAAEA,KAAK,CAAC,CACvD,CACF,CAAC,CAED;AACA;AACA,GACA,MAAO,MAAM,CAAAO,iBAAiB,CAAIC,OAAO,EAAK,CAC5C,GAAI,CACF,KAAM,CAAAC,cAAc,CAAGR,cAAc,CAAC,CAAC,CACvC,GAAI,CAACQ,cAAc,CAAE,MAAO,MAAK,CAEjC,KAAM,CAAAC,cAAc,CAAG,CACrB,GAAGD,cAAc,CACjB,GAAGD,OAAO,CACVnB,SAAS,CAAEC,IAAI,CAACC,GAAG,CAAC,CAAE;AACxB,CAAC,CAEDG,YAAY,CAACC,OAAO,CAACV,gBAAgB,CAAEW,IAAI,CAACC,SAAS,CAACa,cAAc,CAAC,CAAC,CACtE,MAAO,KAAI,CACb,CAAE,MAAOV,KAAK,CAAE,CACdF,OAAO,CAACE,KAAK,CAAC,gCAAgC,CAAEA,KAAK,CAAC,CACtD,MAAO,MAAK,CACd,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}