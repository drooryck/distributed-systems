{"ast":null,"code":"import React,{useEffect,useState,useCallback,useRef}from'react';import BoardStage from'./BoardStage';import NewHomeScreen from'./NewHomeScreen';import ReadyScreen from'./ReadyScreen';import GameOverScreen from'./GameOverScreen';import ScorePanel from'./ScorePanel';import'./App.css';// Import server connection manager instead of direct socket.io\nimport serverManager from'./utils/serverConnection';import{saveGameSession,getGameSession,clearGameSession}from'./utils/sessionStorage';// Background image configuration\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const BACKGROUND_IMAGES=['deep-tetris-color.jpg','tetris-1920-x-1080-background-hyihqau5t3lalo4e.png','tetris-2560-x-1600-background-3bjbi7nyulqbller.jpg'];const BACKGROUND_CHANGE_INTERVAL=30000;// 30 seconds\n// Load config file to get server address\nconst loadConfig=async()=>{try{const response=await fetch('/config.json');if(!response.ok){throw new Error(`Failed to load config: ${response.status}`);}return await response.json();}catch(error){console.warn('Error loading config, using default server address:',error);return{client:{serverAddresses:[\"http://localhost:3001\"]}};}};// Add debug logger at the top of the file\nconst DEBUG={events:true,state:true,render:true};function debugLog(type,message,data){if(DEBUG[type]){console.log(`[DEBUG:${type}] ${message}`,data!==undefined?data:'');}}function App(){var _gameState$players,_gameState$players$so;const[socketId,setSocketId]=useState(null);const[gameState,setGameState]=useState(null);const[isGameOver,setIsGameOver]=useState(false);const[gameOverData,setGameOverData]=useState(null);const[isConnecting,setIsConnecting]=useState(true);const[error,setError]=useState(null);const[socketError,setSocketError]=useState(null);const[serverStatus,setServerStatus]=useState('connecting');const[connectedServer,setConnectedServer]=useState(null);// Hard‐drop guard so holding space won't repeat\nconst hardDropActiveRef=useRef(false);// Add state for background rotation\nconst[currentBackgroundIndex,setCurrentBackgroundIndex]=useState(0);const backgroundIntervalRef=useRef(null);// Add state for timer and scoring\nconst[elapsedTime,setElapsedTime]=useState(0);const[currentScore,setCurrentScore]=useState(0);const[lastScoreChange,setLastScoreChange]=useState(0);const[level,setLevel]=useState(1);const timerIntervalRef=useRef(null);// Connect to servers on component mount\nuseEffect(()=>{const connectToServers=async()=>{try{setIsConnecting(true);setServerStatus('connecting');// Initialize server manager\nawait serverManager.initialize(// onConnected callback\nactiveSocket=>{debugLog('events','Connected to leader server with ID:',activeSocket.id);setSocketId(activeSocket.id);setIsConnecting(false);setServerStatus('connected');setSocketError(null);// Get the server URL and update the state\nconst serverUrl=activeSocket.io.uri;const parsedUrl=new URL(serverUrl);setConnectedServer(`${parsedUrl.hostname}:${parsedUrl.port}`);// Explicitly request initial state after connection\nserverManager.emit('requestInitialState');},// onStateChange callback\nchange=>{if(change.type==='connected'){try{// Parse the URL but preserve the hostname from config\nconst configUrl=new URL(change.server);setConnectedServer(`${configUrl.hostname}:${configUrl.port}`);}catch(e){setConnectedServer(change.server);}}else if(change.type==='leaderChanged'){debugLog('events','Leader server changed to:',change.server.url);setSocketId(change.server.socket.id);// Update server URL info\ntry{const serverUrl=change.server.url;const parsedUrl=new URL(serverUrl);setConnectedServer(`${parsedUrl.hostname}:${parsedUrl.port}`);}catch(e){setConnectedServer(change.server.url||'unknown');}// Server change notification\nsetServerStatus('switchedServer');setTimeout(()=>setServerStatus('connected'),3000);// Re-request initial state after server change\nserverManager.emit('requestInitialState');}else if(change.type==='disconnected'){setConnectedServer(null);}else if(change.type==='allServersDown'){setSocketError('All servers are down. Please try again later.');setServerStatus('disconnected');setConnectedServer(null);}});// Set up event handlers\n// Handle initial state\nserverManager.on('init',initialState=>{debugLog('events','Received init event with state:',initialState);setGameState(initialState);});// Handle room rejoined - when reconnecting to existing session\nserverManager.on('roomRejoined',data=>{var _data$gameState$playe;debugLog('events','Received roomRejoined event with data:',data);// Save the new session data with updated socket ID\nsaveGameSession({roomCode:data.roomCode,playerName:((_data$gameState$playe=data.gameState.players[serverManager.getSocketId()])===null||_data$gameState$playe===void 0?void 0:_data$gameState$playe.name)||'Player',socketId:serverManager.getSocketId()});// Track successful reconnection to avoid fallback attempts\nserverManager.hasRejoinedRoom=true;// Update game state for player\nsetGameState(data.gameState);setError(null);});// Handle room creation - save session\nserverManager.on('roomCreated',data=>{var _data$gameState$playe2;debugLog('events','Received roomCreated event with data:',data);// Save session data for automatic reconnection\nsaveGameSession({roomCode:data.roomCode,playerName:((_data$gameState$playe2=data.gameState.players[serverManager.getSocketId()])===null||_data$gameState$playe2===void 0?void 0:_data$gameState$playe2.name)||'Player',socketId:serverManager.getSocketId()});debugLog('state','Setting appPhase to readyscreen from:',gameState===null||gameState===void 0?void 0:gameState.appPhase);setGameState(prevState=>{const newState={...data.gameState,appPhase:'readyscreen'};debugLog('state','New gameState after roomCreated:',newState);return newState;});setError(null);});// Handle room join - save session\nserverManager.on('roomJoined',data=>{var _data$gameState$playe3;debugLog('events','Received roomJoined event with data:',data);// Save session data for automatic reconnection\nsaveGameSession({roomCode:data.roomCode,playerName:((_data$gameState$playe3=data.gameState.players[serverManager.getSocketId()])===null||_data$gameState$playe3===void 0?void 0:_data$gameState$playe3.name)||'Player',socketId:serverManager.getSocketId()});setGameState(prevState=>{const newState={...data.gameState,appPhase:'readyscreen'};debugLog('state','New gameState after roomJoined:',newState);return newState;});setError(null);});// Handle leaving room - clear session\nserverManager.on('roomLeft',data=>{debugLog('events','Received roomLeft event with data:',data);// Clear session data when leaving room\nclearGameSession();// Set app phase to homescreen\nsetGameState({appPhase:'homescreen',players:{},roomCode:null,activePlayers:[],readyPlayers:[]});});// Handle game state updates\nserverManager.on('gameState',newState=>{// Improve debug logging to show what we receive\ndebugLog('events','Received gameState update with appPhase:',newState===null||newState===void 0?void 0:newState.appPhase);debugLog('events','Game state type:',typeof newState);// Log when we're receiving the init state\nif(gameState===null){console.log('Game state received:',newState);console.log('Current app phase:',gameState===null||gameState===void 0?void 0:gameState.appPhase);// If newState is valid, use it\nif(newState&&typeof newState==='object'&&newState.appPhase){debugLog('state','Setting initial game state with appPhase:',newState.appPhase);setGameState(newState);}else{// Create a default homescreen state if the received state is invalid\nconsole.warn('Received invalid game state, using default homescreen state');setGameState({appPhase:'homescreen',socketId:serverManager.getSocketId(),players:{},activePlayers:[],readyPlayers:[],gameInProgress:false});}}else{setGameState(prevState=>{// If we're showing a readyscreen from a room we just created or joined,\n// don't let a gameState event with homescreen override it\nif((prevState===null||prevState===void 0?void 0:prevState.appPhase)==='readyscreen'&&(newState===null||newState===void 0?void 0:newState.appPhase)==='homescreen'){debugLog('state','Ignoring homescreen gameState while in readyscreen');return prevState;}debugLog('state','Updating gameState from:',prevState===null||prevState===void 0?void 0:prevState.appPhase,'to:',newState===null||newState===void 0?void 0:newState.appPhase);return newState;});}});// Handle errors\nserverManager.on('error',_ref=>{let{message}=_ref;debugLog('events','Received server error:',message);setError(message);});// Handle game over - clear session\nserverManager.on('gameOver',data=>{console.log('Game over with data:',data);// Clear session on game over\nclearGameSession();setIsGameOver(true);setGameOverData(data);});// Handle player joined notification\nserverManager.on('playerJoined',_ref2=>{let{playerId,player,gameState}=_ref2;console.log(`Player joined: ${playerId}`);setGameState(gameState);});// Handle player left notification\nserverManager.on('playerLeft',_ref3=>{let{playerId,gameState}=_ref3;console.log(`Player left: ${playerId}`);setGameState(gameState);});// Handle host assignment (when previous host leaves)\nserverManager.on('hostAssigned',_ref4=>{let{gameState}=_ref4;console.log('You are now the host');setGameState(gameState);});}catch(err){console.error('Error connecting to servers:',err);setSocketError(`Error connecting to servers: ${err.message}`);setIsConnecting(false);setServerStatus('error');}};connectToServers();// Cleanup on component unmount\nreturn()=>{serverManager.disconnect();};},[]);// Background rotation effect - only active during gameplay\nuseEffect(()=>{// Clear any existing background rotation interval\nif(backgroundIntervalRef.current){clearInterval(backgroundIntervalRef.current);backgroundIntervalRef.current=null;}// Start background rotation when game is playing\nif(gameState&&gameState.appPhase==='playing'){// Randomize starting background\nsetCurrentBackgroundIndex(Math.floor(Math.random()*BACKGROUND_IMAGES.length));// Set interval to rotate backgrounds\nbackgroundIntervalRef.current=setInterval(()=>{setCurrentBackgroundIndex(prevIndex=>(prevIndex+1)%BACKGROUND_IMAGES.length);},BACKGROUND_CHANGE_INTERVAL);}// Cleanup on unmount or phase change\nreturn()=>{if(backgroundIntervalRef.current){clearInterval(backgroundIntervalRef.current);backgroundIntervalRef.current=null;}};},[gameState===null||gameState===void 0?void 0:gameState.appPhase]);// Timer management based on game phase\nuseEffect(()=>{// Clean up the previous interval if it exists\nif(timerIntervalRef.current){clearInterval(timerIntervalRef.current);timerIntervalRef.current=null;}if(gameState&&gameState.appPhase==='playing'){// Reset the timer when game starts\nsetElapsedTime(0);setCurrentScore(0);setLastScoreChange(0);setLevel(1);// Start a new timer that updates every 10ms for centisecond precision\ntimerIntervalRef.current=setInterval(()=>{setElapsedTime(prevTime=>prevTime+10);},10);console.log('Timer started');}// Cleanup on unmount or phase change\nreturn()=>{if(timerIntervalRef.current){clearInterval(timerIntervalRef.current);timerIntervalRef.current=null;}};},[gameState===null||gameState===void 0?void 0:gameState.appPhase]);// Update the player list for display and track current player's score\nconst updatePlayerList=useCallback(players=>{if(!players||typeof players!=='object')return;// Map player data to what we need\nconst playerEntries=Object.entries(players);const currentSocketId=serverManager.getSocketId();// Update current player score state for the score panel\nif(currentSocketId){const currentPlayerEntry=playerEntries.find(_ref5=>{let[id]=_ref5;return id===currentSocketId;});if(currentPlayerEntry){const[,currentPlayer]=currentPlayerEntry;// Update score if changed\nif(currentPlayer.score!==currentScore){const scoreChange=Math.max(0,currentPlayer.score-currentScore);if(scoreChange>0){setLastScoreChange(scoreChange);// Reset the score change highlight after 1 second\nsetTimeout(()=>setLastScoreChange(0),1000);}setCurrentScore(currentPlayer.score);}// Update level if changed\nif(currentPlayer.level&&currentPlayer.level!==level){setLevel(currentPlayer.level);}}}},[currentScore,level]);// Keyboard control handlers\nuseEffect(()=>{if(!socketId||!gameState)return;const handleKeyDown=e=>{// Only process key events if game is in progress\nif(gameState.appPhase==='playing'){switch(e.code){case'ArrowLeft':// First send immediate move, then start DAS\nserverManager.emit('playerAction',{type:'moveLeft'});serverManager.emit('playerAction',{type:'startDAS',direction:'left'});break;case'ArrowRight':// First send immediate move, then start DAS\nserverManager.emit('playerAction',{type:'moveRight'});serverManager.emit('playerAction',{type:'startDAS',direction:'right'});break;case'ArrowUp':case'KeyZ':serverManager.emit('playerAction',{type:'rotate'});break;case'ArrowDown':serverManager.emit('playerAction',{type:'softDrop'});break;case'Space':// guard against auto‑repeat when holding space\nif(!hardDropActiveRef.current){serverManager.emit('playerAction',{type:'hardDrop'});hardDropActiveRef.current=true;}break;default:break;}}else if(gameState.appPhase==='readyscreen'){// Handle ready toggle on X key press\nif(e.code==='KeyX'){const isCurrentlyReady=gameState.readyPlayers&&gameState.readyPlayers.includes(socketId);console.log('X key pressed, toggling ready state:',!isCurrentlyReady);serverManager.emit('ready');}}};const handleKeyUp=e=>{// Only process key events if game is in progress\nif(gameState.appPhase==='playing'){switch(e.code){case'ArrowLeft':case'ArrowRight':serverManager.emit('playerAction',{type:'endDAS'});break;case'ArrowDown':serverManager.emit('playerAction',{type:'endSoftDrop'});break;case'Space':// re‑enable hardDrop once key is released\nhardDropActiveRef.current=false;break;default:break;}}};window.addEventListener('keydown',handleKeyDown);window.addEventListener('keyup',handleKeyUp);return()=>{window.removeEventListener('keydown',handleKeyDown);window.removeEventListener('keyup',handleKeyUp);};},[socketId,gameState]);// Room management handlers\nconst handleCreateRoom=useCallback(playerName=>{serverManager.emit('createRoom',playerName);},[]);const handleJoinRoom=useCallback((roomCode,playerName)=>{serverManager.emit('joinRoom',{roomCode,playerName});},[]);const handleLeaveRoom=useCallback(()=>{serverManager.emit('leaveRoom');},[]);// Handle player ready state\nconst handlePlayerReady=useCallback(isReady=>{serverManager.emit('ready');// Server expects no parameters\n},[]);// Handle game start\nconst handleStartGame=useCallback(()=>{serverManager.emit('startGame');},[]);// Handle game mode change\nconst handleSetGameMode=useCallback(mode=>{serverManager.emit('setGameMode',mode);},[]);// Handle game over timeout\nconst handleGameOverTimeout=useCallback(()=>{setIsGameOver(false);setGameOverData(null);},[]);// Get the current background image URL\nconst getCurrentBackgroundUrl=()=>{if(!BACKGROUND_IMAGES.length)return null;return`${process.env.PUBLIC_URL}/backgrounds/${BACKGROUND_IMAGES[currentBackgroundIndex]}`;};// Show loading or error screen\nif(isConnecting){return/*#__PURE__*/_jsx(\"div\",{className:\"App\",children:/*#__PURE__*/_jsx(\"h1\",{children:\"Connecting to server...\"})});}if(socketError){return/*#__PURE__*/_jsxs(\"div\",{className:\"App\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Connection Error\"}),/*#__PURE__*/_jsx(\"p\",{children:socketError}),/*#__PURE__*/_jsx(\"p\",{children:\"Please check that the server is running and the configuration is correct.\"}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>window.location.reload(),style:{padding:'10px 20px',backgroundColor:'#FF5733',border:'none',borderRadius:'4px',color:'white',cursor:'pointer',marginTop:'20px'},children:\"Retry Connection\"})]});}// Show loading screen if no game state\nif(!gameState){console.log('No game state yet, showing loading screen');return/*#__PURE__*/_jsx(\"div\",{className:\"App\",children:/*#__PURE__*/_jsx(\"h1\",{children:\"Waiting for game state...\"})});}console.log('Game state received:',gameState);console.log('Current app phase:',gameState.appPhase);// Render appropriate screen based on app phase\nreturn/*#__PURE__*/_jsxs(\"div\",{className:\"App\",style:{...(gameState.appPhase==='playing'&&{backgroundImage:`url(${getCurrentBackgroundUrl()})`,backgroundSize:'cover',backgroundPosition:'center',transition:'background-image 1s ease-in-out',minHeight:'100vh'})},tabIndex:\"0\",children:[/*#__PURE__*/_jsxs(\"div\",{style:{position:'fixed',top:'10px',right:'10px',background:'rgba(0,0,0,0.7)',color:serverStatus==='connected'?'#00ff00':serverStatus==='disconnected'?'#ff0000':'#ffcc00',padding:'8px 12px',borderRadius:'4px',fontSize:'12px',zIndex:1000,fontFamily:'monospace',display:'flex',flexDirection:'column',backdropFilter:'blur(3px)'},children:[/*#__PURE__*/_jsxs(\"span\",{children:[\"Server: \",connectedServer||'None']}),/*#__PURE__*/_jsxs(\"span\",{style:{fontSize:'10px',marginTop:'3px',color:serverStatus==='disconnected'?'#ff6666':'#aaa'},children:[\"Status: \",serverStatus,serverStatus==='disconnected'&&' - Reconnecting...']})]}),serverStatus==='switchedServer'&&/*#__PURE__*/_jsxs(\"div\",{style:{position:'fixed',top:'10px',left:'50%',transform:'translateX(-50%)',backgroundColor:'rgba(50, 50, 50, 0.9)',color:'#fff',padding:'10px 20px',borderRadius:'4px',boxShadow:'0 2px 10px rgba(0,0,0,0.3)',zIndex:1000,display:'flex',alignItems:'center',transition:'opacity 0.3s ease',opacity:1},children:[/*#__PURE__*/_jsx(\"span\",{style:{marginRight:'10px'},children:\"\\u26A0\\uFE0F\"}),\"Reconnected to new server. Game continuing...\"]}),gameState.appPhase==='homescreen'&&/*#__PURE__*/_jsx(NewHomeScreen,{onCreateRoom:handleCreateRoom,onJoinRoom:handleJoinRoom,error:error}),gameState.appPhase==='readyscreen'&&/*#__PURE__*/_jsx(ReadyScreen,{roomCode:gameState.roomCode,players:gameState.players||{},currentPlayerId:socketId,readyPlayers:gameState.readyPlayers||[],onReady:handlePlayerReady,onStartGame:handleStartGame,onLeaveRoom:handleLeaveRoom,onSetGameMode:handleSetGameMode,gameMode:gameState.gameMode,gameInProgress:gameState.gameInProgress,isHost:(_gameState$players=gameState.players)===null||_gameState$players===void 0?void 0:(_gameState$players$so=_gameState$players[socketId])===null||_gameState$players$so===void 0?void 0:_gameState$players$so.isHost}),gameState.appPhase==='playing'&&/*#__PURE__*/_jsxs(\"div\",{style:{backgroundColor:'rgba(0, 0, 0, 0.8)',backdropFilter:'blur(5px)',padding:'20px',borderRadius:'10px',margin:'10px auto',maxWidth:'900px'},children:[/*#__PURE__*/_jsxs(\"div\",{style:{display:'flex',justifyContent:'space-between',alignItems:'center',marginBottom:'15px'},children:[/*#__PURE__*/_jsx(\"h1\",{style:{margin:0,fontSize:'28px',color:'#fff'},children:\"Tetristributed\"}),/*#__PURE__*/_jsxs(\"div\",{style:{display:'flex',alignItems:'center',gap:'15px'},children:[/*#__PURE__*/_jsxs(\"div\",{style:{fontSize:'14px',backgroundColor:'#444',padding:'5px 10px',borderRadius:'4px',display:'flex',flexDirection:'column',alignItems:'center'},children:[/*#__PURE__*/_jsx(\"span\",{style:{fontSize:'10px',color:'#aaa'},children:\"ROOM\"}),/*#__PURE__*/_jsx(\"span\",{style:{fontWeight:'bold'},children:gameState.roomCode})]}),/*#__PURE__*/_jsxs(\"div\",{style:{fontSize:'14px',backgroundColor:'#333',padding:'5px 10px',borderRadius:'4px'},children:[\"Player: \",socketId&&socketId.substring(0,4)]})]})]}),/*#__PURE__*/_jsxs(\"div\",{style:{display:'flex',gap:'20px'},children:[/*#__PURE__*/_jsx(\"div\",{style:{display:'flex',flexDirection:'column',alignItems:'center'},children:/*#__PURE__*/_jsx(BoardStage,{board:gameState.board||[],players:gameState.players||{},linesToClear:gameState.linesToClear||[]})}),/*#__PURE__*/_jsxs(\"div\",{style:{display:'flex',flexDirection:'column',minWidth:'220px'},children:[/*#__PURE__*/_jsx(ScorePanel,{score:currentScore,level:level,lastScoreChange:lastScoreChange,elapsedTime:elapsedTime}),/*#__PURE__*/_jsxs(\"div\",{style:{backgroundColor:'rgba(40, 40, 40, 0.9)',padding:'12px',borderRadius:'8px',marginTop:'15px'},children:[/*#__PURE__*/_jsx(\"h2\",{style:{margin:'0 0 10px 0',fontSize:'18px',color:'#ccc'},children:\"Players\"}),/*#__PURE__*/_jsx(\"ul\",{style:{listStyle:'none',padding:0,margin:0},children:Object.entries(gameState.players||{}).map(_ref6=>{let[id,player]=_ref6;const isCurrentPlayer=id===socketId;const shortId=id.substring(0,4);return/*#__PURE__*/_jsx(\"li\",{style:{margin:'6px 0',padding:'8px',backgroundColor:isCurrentPlayer?'#444':'#333',borderLeft:`4px solid ${player.color||'#ccc'}`,borderRadius:'4px',transition:'background-color 0.3s'},children:/*#__PURE__*/_jsxs(\"div\",{style:{display:'flex',alignItems:'center',justifyContent:'space-between'},children:[/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"span\",{style:{fontWeight:isCurrentPlayer?'bold':'normal',color:isCurrentPlayer?'#fff':'#ccc'},children:player.name||`Player ${player.playerNumber||shortId}`}),isCurrentPlayer&&/*#__PURE__*/_jsx(\"span\",{style:{fontSize:'12px',marginLeft:'5px',color:'#ffcc00'},children:\"(You)\"})]}),/*#__PURE__*/_jsx(\"div\",{style:{backgroundColor:'#222',padding:'2px 6px',borderRadius:'3px',fontSize:'14px',fontWeight:'bold'},children:player.score||0})]})},id);})}),/*#__PURE__*/_jsxs(\"div\",{style:{marginTop:'15px',padding:'8px',backgroundColor:'#222',borderRadius:'4px',textAlign:'center'},children:[/*#__PURE__*/_jsx(\"div\",{style:{fontSize:'12px',color:'#aaa'},children:\"GAME MODE\"}),/*#__PURE__*/_jsx(\"div\",{style:{fontSize:'16px',fontWeight:'bold',marginTop:'4px'},children:gameState.gameMode||'Classic'})]})]}),/*#__PURE__*/_jsxs(\"div\",{style:{backgroundColor:'rgba(40, 40, 40, 0.7)',padding:'12px',borderRadius:'8px',marginTop:'15px',fontSize:'12px',color:'#aaa'},children:[/*#__PURE__*/_jsx(\"div\",{style:{marginBottom:'5px',fontWeight:'bold',color:'#ccc'},children:\"Controls:\"}),/*#__PURE__*/_jsx(\"div\",{children:\"\\u2190 \\u2192 : Move\"}),/*#__PURE__*/_jsx(\"div\",{children:\"\\u2193 : Soft Drop\"}),/*#__PURE__*/_jsx(\"div\",{children:\"\\u2191 / Z : Rotate\"}),/*#__PURE__*/_jsx(\"div\",{children:\"Space : Hard Drop\"})]})]})]})]}),isGameOver&&gameOverData&&/*#__PURE__*/_jsx(GameOverScreen,{gameOverData:gameOverData,currentPlayerId:socketId,onTimeout:handleGameOverTimeout})]});}export default App;","map":{"version":3,"names":["React","useEffect","useState","useCallback","useRef","BoardStage","NewHomeScreen","ReadyScreen","GameOverScreen","ScorePanel","serverManager","saveGameSession","getGameSession","clearGameSession","jsx","_jsx","jsxs","_jsxs","BACKGROUND_IMAGES","BACKGROUND_CHANGE_INTERVAL","loadConfig","response","fetch","ok","Error","status","json","error","console","warn","client","serverAddresses","DEBUG","events","state","render","debugLog","type","message","data","log","undefined","App","_gameState$players","_gameState$players$so","socketId","setSocketId","gameState","setGameState","isGameOver","setIsGameOver","gameOverData","setGameOverData","isConnecting","setIsConnecting","setError","socketError","setSocketError","serverStatus","setServerStatus","connectedServer","setConnectedServer","hardDropActiveRef","currentBackgroundIndex","setCurrentBackgroundIndex","backgroundIntervalRef","elapsedTime","setElapsedTime","currentScore","setCurrentScore","lastScoreChange","setLastScoreChange","level","setLevel","timerIntervalRef","connectToServers","initialize","activeSocket","id","serverUrl","io","uri","parsedUrl","URL","hostname","port","emit","change","configUrl","server","e","url","socket","setTimeout","on","initialState","_data$gameState$playe","roomCode","playerName","players","getSocketId","name","hasRejoinedRoom","_data$gameState$playe2","appPhase","prevState","newState","_data$gameState$playe3","activePlayers","readyPlayers","gameInProgress","_ref","_ref2","playerId","player","_ref3","_ref4","err","disconnect","current","clearInterval","Math","floor","random","length","setInterval","prevIndex","prevTime","updatePlayerList","playerEntries","Object","entries","currentSocketId","currentPlayerEntry","find","_ref5","currentPlayer","score","scoreChange","max","handleKeyDown","code","direction","isCurrentlyReady","includes","handleKeyUp","window","addEventListener","removeEventListener","handleCreateRoom","handleJoinRoom","handleLeaveRoom","handlePlayerReady","isReady","handleStartGame","handleSetGameMode","mode","handleGameOverTimeout","getCurrentBackgroundUrl","process","env","PUBLIC_URL","className","children","onClick","location","reload","style","padding","backgroundColor","border","borderRadius","color","cursor","marginTop","backgroundImage","backgroundSize","backgroundPosition","transition","minHeight","tabIndex","position","top","right","background","fontSize","zIndex","fontFamily","display","flexDirection","backdropFilter","left","transform","boxShadow","alignItems","opacity","marginRight","onCreateRoom","onJoinRoom","currentPlayerId","onReady","onStartGame","onLeaveRoom","onSetGameMode","gameMode","isHost","margin","maxWidth","justifyContent","marginBottom","gap","fontWeight","substring","board","linesToClear","minWidth","listStyle","map","_ref6","isCurrentPlayer","shortId","borderLeft","playerNumber","marginLeft","textAlign","onTimeout"],"sources":["/Users/driesrooryck/Desktop/s25/new_try/distributed-systems/tetris/client/src/App.js"],"sourcesContent":["import React, { useEffect, useState, useCallback, useRef } from 'react';\nimport BoardStage from './BoardStage';\nimport NewHomeScreen from './NewHomeScreen';\nimport ReadyScreen from './ReadyScreen';\nimport GameOverScreen from './GameOverScreen';\nimport ScorePanel from './ScorePanel';\nimport './App.css';\n\n// Import server connection manager instead of direct socket.io\nimport serverManager from './utils/serverConnection';\nimport { saveGameSession, getGameSession, clearGameSession } from './utils/sessionStorage';\n\n// Background image configuration\nconst BACKGROUND_IMAGES = [\n  'deep-tetris-color.jpg',\n  'tetris-1920-x-1080-background-hyihqau5t3lalo4e.png',\n  'tetris-2560-x-1600-background-3bjbi7nyulqbller.jpg',\n];\nconst BACKGROUND_CHANGE_INTERVAL = 30000; // 30 seconds\n\n// Load config file to get server address\nconst loadConfig = async () => {\n  try {\n    const response = await fetch('/config.json');\n    if (!response.ok) {\n      throw new Error(`Failed to load config: ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.warn('Error loading config, using default server address:', error);\n    return { client: { serverAddresses: [\"http://localhost:3001\"] } };\n  }\n};\n\n// Add debug logger at the top of the file\nconst DEBUG = {\n  events: true,\n  state: true,\n  render: true\n};\n\nfunction debugLog(type, message, data) {\n  if (DEBUG[type]) {\n    console.log(`[DEBUG:${type}] ${message}`, data !== undefined ? data : '');\n  }\n}\n\nfunction App() {\n  const [socketId, setSocketId] = useState(null);\n  const [gameState, setGameState] = useState(null);\n  const [isGameOver, setIsGameOver] = useState(false);\n  const [gameOverData, setGameOverData] = useState(null);\n  const [isConnecting, setIsConnecting] = useState(true);\n  const [error, setError] = useState(null);\n  const [socketError, setSocketError] = useState(null);\n  const [serverStatus, setServerStatus] = useState('connecting');\n  const [connectedServer, setConnectedServer] = useState(null);\n\n  // Hard‐drop guard so holding space won't repeat\n  const hardDropActiveRef = useRef(false);\n\n  // Add state for background rotation\n  const [currentBackgroundIndex, setCurrentBackgroundIndex] = useState(0);\n  const backgroundIntervalRef = useRef(null);\n\n  // Add state for timer and scoring\n  const [elapsedTime, setElapsedTime] = useState(0);\n  const [currentScore, setCurrentScore] = useState(0);\n  const [lastScoreChange, setLastScoreChange] = useState(0);\n  const [level, setLevel] = useState(1);\n  const timerIntervalRef = useRef(null);\n\n  // Connect to servers on component mount\n  useEffect(() => {\n    const connectToServers = async () => {\n      try {\n        setIsConnecting(true);\n        setServerStatus('connecting');\n        \n        // Initialize server manager\n        await serverManager.initialize(\n          // onConnected callback\n          (activeSocket) => {\n            debugLog('events', 'Connected to leader server with ID:', activeSocket.id);\n            setSocketId(activeSocket.id);\n            setIsConnecting(false);\n            setServerStatus('connected');\n            setSocketError(null);\n            \n            // Get the server URL and update the state\n            const serverUrl = activeSocket.io.uri;\n            const parsedUrl = new URL(serverUrl);\n            setConnectedServer(`${parsedUrl.hostname}:${parsedUrl.port}`);\n            \n            // Explicitly request initial state after connection\n            serverManager.emit('requestInitialState');\n          },\n          \n          // onStateChange callback\n          (change) => {\n            if (change.type === 'connected') {\n              try {\n                // Parse the URL but preserve the hostname from config\n                const configUrl = new URL(change.server);\n                setConnectedServer(`${configUrl.hostname}:${configUrl.port}`);\n              } catch (e) {\n                setConnectedServer(change.server);\n              }\n            }\n            else if (change.type === 'leaderChanged') {\n              debugLog('events', 'Leader server changed to:', change.server.url);\n              setSocketId(change.server.socket.id);\n              \n              // Update server URL info\n              try {\n                const serverUrl = change.server.url;\n                const parsedUrl = new URL(serverUrl);\n                setConnectedServer(`${parsedUrl.hostname}:${parsedUrl.port}`);\n              } catch (e) {\n                setConnectedServer(change.server.url || 'unknown');\n              }\n              \n              // Server change notification\n              setServerStatus('switchedServer');\n              setTimeout(() => setServerStatus('connected'), 3000);\n              \n              // Re-request initial state after server change\n              serverManager.emit('requestInitialState');\n            }\n            else if (change.type === 'disconnected') {\n              setConnectedServer(null);\n            }\n            else if (change.type === 'allServersDown') {\n              setSocketError('All servers are down. Please try again later.');\n              setServerStatus('disconnected');\n              setConnectedServer(null);\n            }\n          }\n        );\n        \n        // Set up event handlers\n        \n        // Handle initial state\n        serverManager.on('init', (initialState) => {\n          debugLog('events', 'Received init event with state:', initialState);\n          setGameState(initialState);\n        });\n        \n        // Handle room rejoined - when reconnecting to existing session\n        serverManager.on('roomRejoined', (data) => {\n          debugLog('events', 'Received roomRejoined event with data:', data);\n          \n          // Save the new session data with updated socket ID\n          saveGameSession({\n            roomCode: data.roomCode,\n            playerName: data.gameState.players[serverManager.getSocketId()]?.name || 'Player',\n            socketId: serverManager.getSocketId()\n          });\n          \n          // Track successful reconnection to avoid fallback attempts\n          serverManager.hasRejoinedRoom = true;\n          \n          // Update game state for player\n          setGameState(data.gameState);\n          setError(null);\n        });\n        \n        // Handle room creation - save session\n        serverManager.on('roomCreated', (data) => {\n          debugLog('events', 'Received roomCreated event with data:', data);\n          \n          // Save session data for automatic reconnection\n          saveGameSession({\n            roomCode: data.roomCode,\n            playerName: data.gameState.players[serverManager.getSocketId()]?.name || 'Player',\n            socketId: serverManager.getSocketId()\n          });\n          \n          debugLog('state', 'Setting appPhase to readyscreen from:', gameState?.appPhase);\n          setGameState(prevState => {\n            const newState = {\n              ...data.gameState,\n              appPhase: 'readyscreen'\n            };\n            debugLog('state', 'New gameState after roomCreated:', newState);\n            return newState;\n          });\n          setError(null);\n        });\n        \n        // Handle room join - save session\n        serverManager.on('roomJoined', (data) => {\n          debugLog('events', 'Received roomJoined event with data:', data);\n          \n          // Save session data for automatic reconnection\n          saveGameSession({\n            roomCode: data.roomCode,\n            playerName: data.gameState.players[serverManager.getSocketId()]?.name || 'Player',\n            socketId: serverManager.getSocketId()\n          });\n          \n          setGameState(prevState => {\n            const newState = {\n              ...data.gameState,\n              appPhase: 'readyscreen'\n            };\n            debugLog('state', 'New gameState after roomJoined:', newState);\n            return newState;\n          });\n          setError(null);\n        });\n        \n        // Handle leaving room - clear session\n        serverManager.on('roomLeft', (data) => {\n          debugLog('events', 'Received roomLeft event with data:', data);\n          \n          // Clear session data when leaving room\n          clearGameSession();\n          \n          // Set app phase to homescreen\n          setGameState({\n            appPhase: 'homescreen',\n            players: {},\n            roomCode: null,\n            activePlayers: [],\n            readyPlayers: []\n          });\n        });\n        \n        // Handle game state updates\n        serverManager.on('gameState', (newState) => {\n          // Improve debug logging to show what we receive\n          debugLog('events', 'Received gameState update with appPhase:', newState?.appPhase);\n          debugLog('events', 'Game state type:', typeof newState);\n\n          // Log when we're receiving the init state\n          if (gameState === null) {\n            console.log('Game state received:', newState);\n            console.log('Current app phase:', gameState?.appPhase);\n            \n            // If newState is valid, use it\n            if (newState && typeof newState === 'object' && newState.appPhase) {\n              debugLog('state', 'Setting initial game state with appPhase:', newState.appPhase);\n              setGameState(newState);\n            } else {\n              // Create a default homescreen state if the received state is invalid\n              console.warn('Received invalid game state, using default homescreen state');\n              setGameState({\n                appPhase: 'homescreen',\n                socketId: serverManager.getSocketId(),\n                players: {},\n                activePlayers: [],\n                readyPlayers: [],\n                gameInProgress: false\n              });\n            }\n          } else {\n            setGameState(prevState => {\n              // If we're showing a readyscreen from a room we just created or joined,\n              // don't let a gameState event with homescreen override it\n              if (prevState?.appPhase === 'readyscreen' && newState?.appPhase === 'homescreen') {\n                debugLog('state', 'Ignoring homescreen gameState while in readyscreen');\n                return prevState;\n              }\n              debugLog('state', 'Updating gameState from:', prevState?.appPhase, 'to:', newState?.appPhase);\n              return newState;\n            });\n          }\n        });\n\n        // Handle errors\n        serverManager.on('error', ({ message }) => {\n          debugLog('events', 'Received server error:', message);\n          setError(message);\n        });\n        \n        // Handle game over - clear session\n        serverManager.on('gameOver', (data) => {\n          console.log('Game over with data:', data);\n          \n          // Clear session on game over\n          clearGameSession();\n          \n          setIsGameOver(true);\n          setGameOverData(data);\n        });\n        \n        // Handle player joined notification\n        serverManager.on('playerJoined', ({ playerId, player, gameState }) => {\n          console.log(`Player joined: ${playerId}`);\n          setGameState(gameState);\n        });\n        \n        // Handle player left notification\n        serverManager.on('playerLeft', ({ playerId, gameState }) => {\n          console.log(`Player left: ${playerId}`);\n          setGameState(gameState);\n        });\n        \n        // Handle host assignment (when previous host leaves)\n        serverManager.on('hostAssigned', ({ gameState }) => {\n          console.log('You are now the host');\n          setGameState(gameState);\n        });\n      } catch (err) {\n        console.error('Error connecting to servers:', err);\n        setSocketError(`Error connecting to servers: ${err.message}`);\n        setIsConnecting(false);\n        setServerStatus('error');\n      }\n    };\n    \n    connectToServers();\n    \n    // Cleanup on component unmount\n    return () => {\n      serverManager.disconnect();\n    };\n  }, []);\n\n  // Background rotation effect - only active during gameplay\n  useEffect(() => {\n    // Clear any existing background rotation interval\n    if (backgroundIntervalRef.current) {\n      clearInterval(backgroundIntervalRef.current);\n      backgroundIntervalRef.current = null;\n    }\n\n    // Start background rotation when game is playing\n    if (gameState && gameState.appPhase === 'playing') {\n      // Randomize starting background\n      setCurrentBackgroundIndex(Math.floor(Math.random() * BACKGROUND_IMAGES.length));\n\n      // Set interval to rotate backgrounds\n      backgroundIntervalRef.current = setInterval(() => {\n        setCurrentBackgroundIndex(prevIndex =>\n          (prevIndex + 1) % BACKGROUND_IMAGES.length\n        );\n      }, BACKGROUND_CHANGE_INTERVAL);\n    }\n\n    // Cleanup on unmount or phase change\n    return () => {\n      if (backgroundIntervalRef.current) {\n        clearInterval(backgroundIntervalRef.current);\n        backgroundIntervalRef.current = null;\n      }\n    };\n  }, [gameState?.appPhase]);\n\n  // Timer management based on game phase\n  useEffect(() => {\n    // Clean up the previous interval if it exists\n    if (timerIntervalRef.current) {\n      clearInterval(timerIntervalRef.current);\n      timerIntervalRef.current = null;\n    }\n\n    if (gameState && gameState.appPhase === 'playing') {\n      // Reset the timer when game starts\n      setElapsedTime(0);\n      setCurrentScore(0);\n      setLastScoreChange(0);\n      setLevel(1);\n\n      // Start a new timer that updates every 10ms for centisecond precision\n      timerIntervalRef.current = setInterval(() => {\n        setElapsedTime(prevTime => prevTime + 10);\n      }, 10);\n\n      console.log('Timer started');\n    }\n\n    // Cleanup on unmount or phase change\n    return () => {\n      if (timerIntervalRef.current) {\n        clearInterval(timerIntervalRef.current);\n        timerIntervalRef.current = null;\n      }\n    };\n  }, [gameState?.appPhase]);\n\n  // Update the player list for display and track current player's score\n  const updatePlayerList = useCallback((players) => {\n    if (!players || typeof players !== 'object') return;\n\n    // Map player data to what we need\n    const playerEntries = Object.entries(players);\n    const currentSocketId = serverManager.getSocketId();\n\n    // Update current player score state for the score panel\n    if (currentSocketId) {\n      const currentPlayerEntry = playerEntries.find(([id]) => id === currentSocketId);\n      if (currentPlayerEntry) {\n        const [, currentPlayer] = currentPlayerEntry;\n\n        // Update score if changed\n        if (currentPlayer.score !== currentScore) {\n          const scoreChange = Math.max(0, currentPlayer.score - currentScore);\n          if (scoreChange > 0) {\n            setLastScoreChange(scoreChange);\n            // Reset the score change highlight after 1 second\n            setTimeout(() => setLastScoreChange(0), 1000);\n          }\n          setCurrentScore(currentPlayer.score);\n        }\n\n        // Update level if changed\n        if (currentPlayer.level && currentPlayer.level !== level) {\n          setLevel(currentPlayer.level);\n        }\n      }\n    }\n  }, [currentScore, level]);\n\n  // Keyboard control handlers\n  useEffect(() => {\n    if (!socketId || !gameState) return;\n\n    const handleKeyDown = (e) => {\n      // Only process key events if game is in progress\n      if (gameState.appPhase === 'playing') {\n        switch (e.code) {\n          case 'ArrowLeft':\n            // First send immediate move, then start DAS\n            serverManager.emit('playerAction', { type: 'moveLeft' });\n            serverManager.emit('playerAction', { type: 'startDAS', direction: 'left' });\n            break;\n          case 'ArrowRight':\n            // First send immediate move, then start DAS\n            serverManager.emit('playerAction', { type: 'moveRight' });\n            serverManager.emit('playerAction', { type: 'startDAS', direction: 'right' });\n            break;\n          case 'ArrowUp':\n          case 'KeyZ':\n            serverManager.emit('playerAction', { type: 'rotate' });\n            break;\n          case 'ArrowDown':\n            serverManager.emit('playerAction', { type: 'softDrop' });\n            break;\n          case 'Space':\n            // guard against auto‑repeat when holding space\n            if (!hardDropActiveRef.current) {\n              serverManager.emit('playerAction', { type: 'hardDrop' });\n              hardDropActiveRef.current = true;\n            }\n            break;\n          default:\n            break;\n        }\n      } else if (gameState.appPhase === 'readyscreen') {\n        // Handle ready toggle on X key press\n        if (e.code === 'KeyX') {\n          const isCurrentlyReady = gameState.readyPlayers && \n            gameState.readyPlayers.includes(socketId);\n          console.log('X key pressed, toggling ready state:', !isCurrentlyReady);\n          serverManager.emit('ready');\n        }\n      }\n    };\n\n    const handleKeyUp = (e) => {\n      // Only process key events if game is in progress\n      if (gameState.appPhase === 'playing') {\n        switch (e.code) {\n          case 'ArrowLeft':\n          case 'ArrowRight':\n            serverManager.emit('playerAction', { type: 'endDAS' });\n            break;\n          case 'ArrowDown':\n            serverManager.emit('playerAction', { type: 'endSoftDrop' });\n            break;\n          case 'Space':\n            // re‑enable hardDrop once key is released\n            hardDropActiveRef.current = false;\n            break;\n          default:\n            break;\n        }\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyDown);\n    window.addEventListener('keyup', handleKeyUp);\n\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n      window.removeEventListener('keyup', handleKeyUp);\n    };\n  }, [socketId, gameState]);\n\n  // Room management handlers\n  const handleCreateRoom = useCallback((playerName) => {\n    serverManager.emit('createRoom', playerName);\n  }, []);\n  \n  const handleJoinRoom = useCallback((roomCode, playerName) => {\n    serverManager.emit('joinRoom', { roomCode, playerName });\n  }, []);\n  \n  const handleLeaveRoom = useCallback(() => {\n    serverManager.emit('leaveRoom');\n  }, []);\n\n  // Handle player ready state\n  const handlePlayerReady = useCallback((isReady) => {\n    serverManager.emit('ready');  // Server expects no parameters\n  }, []);\n\n  // Handle game start\n  const handleStartGame = useCallback(() => {\n    serverManager.emit('startGame');\n  }, []);\n\n  // Handle game mode change\n  const handleSetGameMode = useCallback((mode) => {\n    serverManager.emit('setGameMode', mode);\n  }, []);\n\n  // Handle game over timeout\n  const handleGameOverTimeout = useCallback(() => {\n    setIsGameOver(false);\n    setGameOverData(null);\n  }, []);\n\n  // Get the current background image URL\n  const getCurrentBackgroundUrl = () => {\n    if (!BACKGROUND_IMAGES.length) return null;\n    return `${process.env.PUBLIC_URL}/backgrounds/${BACKGROUND_IMAGES[currentBackgroundIndex]}`;\n  };\n\n  // Show loading or error screen\n  if (isConnecting) {\n    return <div className=\"App\"><h1>Connecting to server...</h1></div>;\n  }\n\n  if (socketError) {\n    return (\n      <div className=\"App\">\n        <h1>Connection Error</h1>\n        <p>{socketError}</p>\n        <p>Please check that the server is running and the configuration is correct.</p>\n        <button\n          onClick={() => window.location.reload()}\n          style={{\n            padding: '10px 20px',\n            backgroundColor: '#FF5733',\n            border: 'none',\n            borderRadius: '4px',\n            color: 'white',\n            cursor: 'pointer',\n            marginTop: '20px'\n          }}\n        >\n          Retry Connection\n        </button>\n      </div>\n    );\n  }\n\n  // Show loading screen if no game state\n  if (!gameState) {\n    console.log('No game state yet, showing loading screen');\n    return <div className=\"App\"><h1>Waiting for game state...</h1></div>;\n  }\n  console.log('Game state received:', gameState);\n  console.log('Current app phase:', gameState.appPhase);\n\n  // Render appropriate screen based on app phase\n  return (\n    <div\n      className=\"App\"\n      style={{\n        ...(gameState.appPhase === 'playing' && {\n          backgroundImage: `url(${getCurrentBackgroundUrl()})`,\n          backgroundSize: 'cover',\n          backgroundPosition: 'center',\n          transition: 'background-image 1s ease-in-out',\n          minHeight: '100vh'\n        })\n      }}\n      tabIndex=\"0\"\n    >\n\n  {/* Server Connection Indicator - Always visible */}\n  <div \n    style={{\n      position: 'fixed',\n      top: '10px',\n      right: '10px',\n      background: 'rgba(0,0,0,0.7)',\n      color: serverStatus === 'connected' ? '#00ff00' : \n            serverStatus === 'disconnected' ? '#ff0000' : \n            '#ffcc00',\n      padding: '8px 12px',\n      borderRadius: '4px',\n      fontSize: '12px',\n      zIndex: 1000,\n      fontFamily: 'monospace',\n      display: 'flex',\n      flexDirection: 'column',\n      backdropFilter: 'blur(3px)'\n    }}\n  >\n    <span>Server: {connectedServer || 'None'}</span>\n    <span style={{ \n      fontSize: '10px', \n      marginTop: '3px', \n      color: serverStatus === 'disconnected' ? '#ff6666' : '#aaa'\n    }}>\n      Status: {serverStatus}\n      {serverStatus === 'disconnected' && ' - Reconnecting...'}\n    </span>\n  </div>\n\n      {/* Server Status Notification */}\n      {serverStatus === 'switchedServer' && (\n        <div style={{\n          position: 'fixed',\n          top: '10px',\n          left: '50%',\n          transform: 'translateX(-50%)',\n          backgroundColor: 'rgba(50, 50, 50, 0.9)',\n          color: '#fff',\n          padding: '10px 20px',\n          borderRadius: '4px',\n          boxShadow: '0 2px 10px rgba(0,0,0,0.3)',\n          zIndex: 1000,\n          display: 'flex',\n          alignItems: 'center',\n          transition: 'opacity 0.3s ease',\n          opacity: 1\n        }}>\n          <span style={{ marginRight: '10px' }}>⚠️</span>\n          Reconnected to new server. Game continuing...\n        </div>\n      )}\n      \n      {gameState.appPhase === 'homescreen' && (\n        <NewHomeScreen\n          onCreateRoom={handleCreateRoom}\n          onJoinRoom={handleJoinRoom}\n          error={error}\n        />\n      )}\n      \n      {gameState.appPhase === 'readyscreen' && (\n        <ReadyScreen\n          roomCode={gameState.roomCode}\n          players={gameState.players || {}}\n          currentPlayerId={socketId}\n          readyPlayers={gameState.readyPlayers || []}\n          onReady={handlePlayerReady}\n          onStartGame={handleStartGame}\n          onLeaveRoom={handleLeaveRoom}\n          onSetGameMode={handleSetGameMode}\n          gameMode={gameState.gameMode}\n          gameInProgress={gameState.gameInProgress}\n          isHost={gameState.players?.[socketId]?.isHost}\n        />\n      )}\n\n      {gameState.appPhase === 'playing' && (\n        <div style={{\n          backgroundColor: 'rgba(0, 0, 0, 0.8)',\n          backdropFilter: 'blur(5px)',\n          padding: '20px',\n          borderRadius: '10px',\n          margin: '10px auto',\n          maxWidth: '900px'\n        }}>\n          <div style={{\n            display: 'flex',\n            justifyContent: 'space-between',\n            alignItems: 'center',\n            marginBottom: '15px'\n          }}>\n            <h1 style={{ margin: 0, fontSize: '28px', color: '#fff' }}>Tetristributed</h1>\n            <div style={{\n              display: 'flex',\n              alignItems: 'center',\n              gap: '15px'\n            }}>\n              <div style={{\n                fontSize: '14px',\n                backgroundColor: '#444',\n                padding: '5px 10px',\n                borderRadius: '4px',\n                display: 'flex',\n                flexDirection: 'column',\n                alignItems: 'center'\n              }}>\n                <span style={{fontSize: '10px', color: '#aaa'}}>ROOM</span>\n                <span style={{fontWeight: 'bold'}}>{gameState.roomCode}</span>\n              </div>\n              <div style={{\n                fontSize: '14px',\n                backgroundColor: '#333',\n                padding: '5px 10px',\n                borderRadius: '4px'\n              }}>\n                Player: {socketId && socketId.substring(0, 4)}\n              </div>\n            </div>\n          </div>\n\n          <div style={{ display: 'flex', gap: '20px' }}>\n            <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n              <BoardStage\n                board={gameState.board || []}\n                players={gameState.players || {}}\n                linesToClear={gameState.linesToClear || []}\n              />\n            </div>\n\n            <div style={{\n              display: 'flex',\n              flexDirection: 'column',\n              minWidth: '220px'\n            }}>\n              {/* Integrated Score Panel with Timer */}\n              <ScorePanel\n                score={currentScore}\n                level={level}\n                lastScoreChange={lastScoreChange}\n                elapsedTime={elapsedTime}\n              />\n\n              {/* Players List */}\n              <div style={{\n                backgroundColor: 'rgba(40, 40, 40, 0.9)',\n                padding: '12px',\n                borderRadius: '8px',\n                marginTop: '15px'\n              }}>\n                <h2 style={{ margin: '0 0 10px 0', fontSize: '18px', color: '#ccc' }}>Players</h2>\n                <ul style={{ listStyle: 'none', padding: 0, margin: 0 }}>\n                  {Object.entries(gameState.players || {}).map(([id, player]) => {\n                    const isCurrentPlayer = id === socketId;\n                    const shortId = id.substring(0, 4);\n\n                    return (\n                      <li\n                        key={id}\n                        style={{\n                          margin: '6px 0',\n                          padding: '8px',\n                          backgroundColor: isCurrentPlayer ? '#444' : '#333',\n                          borderLeft: `4px solid ${player.color || '#ccc'}`,\n                          borderRadius: '4px',\n                          transition: 'background-color 0.3s'\n                        }}\n                      >\n                        <div style={{\n                          display: 'flex',\n                          alignItems: 'center',\n                          justifyContent: 'space-between'\n                        }}>\n                          <div>\n                            <span style={{\n                              fontWeight: isCurrentPlayer ? 'bold' : 'normal',\n                              color: isCurrentPlayer ? '#fff' : '#ccc'\n                            }}>\n                              {player.name || `Player ${player.playerNumber || shortId}`}\n                            </span>\n                            {isCurrentPlayer && <span style={{\n                              fontSize: '12px',\n                              marginLeft: '5px',\n                              color: '#ffcc00'\n                            }}>\n                              (You)\n                            </span>}\n                          </div>\n                          <div style={{\n                            backgroundColor: '#222',\n                            padding: '2px 6px',\n                            borderRadius: '3px',\n                            fontSize: '14px',\n                            fontWeight: 'bold'\n                          }}>\n                            {player.score || 0}\n                          </div>\n                        </div>\n                      </li>\n                    );\n                  })}\n                </ul>\n\n                <div style={{\n                  marginTop: '15px',\n                  padding: '8px',\n                  backgroundColor: '#222',\n                  borderRadius: '4px',\n                  textAlign: 'center'\n                }}>\n                  <div style={{ fontSize: '12px', color: '#aaa' }}>GAME MODE</div>\n                  <div style={{ fontSize: '16px', fontWeight: 'bold', marginTop: '4px' }}>\n                    {gameState.gameMode || 'Classic'}\n                  </div>\n                </div>\n              </div>\n\n              {/* Controls Help */}\n              <div style={{\n                backgroundColor: 'rgba(40, 40, 40, 0.7)',\n                padding: '12px',\n                borderRadius: '8px',\n                marginTop: '15px',\n                fontSize: '12px',\n                color: '#aaa'\n              }}>\n                <div style={{ marginBottom: '5px', fontWeight: 'bold', color: '#ccc' }}>Controls:</div>\n                <div>← → : Move</div>\n                <div>↓ : Soft Drop</div>\n                <div>↑ / Z : Rotate</div>\n                <div>Space : Hard Drop</div>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {isGameOver && gameOverData && (\n        <GameOverScreen\n          gameOverData={gameOverData}\n          currentPlayerId={socketId}\n          onTimeout={handleGameOverTimeout}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}