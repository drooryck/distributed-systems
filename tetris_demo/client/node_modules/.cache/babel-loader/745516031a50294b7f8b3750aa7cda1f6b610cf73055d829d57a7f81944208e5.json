{"ast":null,"code":"var _jsxFileName = \"/Users/driesrooryck/Desktop/s25/new_try/distributed-systems/tetris/client/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useCallback, useRef } from 'react';\nimport BoardStage from './BoardStage';\nimport NewHomeScreen from './NewHomeScreen';\nimport ReadyScreen from './ReadyScreen';\nimport GameOverScreen from './GameOverScreen';\nimport ScorePanel from './ScorePanel';\nimport './App.css';\n\n// Import server connection manager instead of direct socket.io\nimport serverManager from './utils/serverConnection';\nimport { saveGameSession, getGameSession, clearGameSession } from './utils/sessionStorage';\n\n// Background image configuration\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BACKGROUND_IMAGES = ['deep-tetris-color.jpg', 'tetris-1920-x-1080-background-hyihqau5t3lalo4e.png', 'tetris-2560-x-1600-background-3bjbi7nyulqbller.jpg'];\nconst BACKGROUND_CHANGE_INTERVAL = 30000; // 30 seconds\n\n// Load config file to get server address\nconst loadConfig = async () => {\n  try {\n    const response = await fetch('/config.json');\n    if (!response.ok) {\n      throw new Error(`Failed to load config: ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.warn('Error loading config, using default server address:', error);\n    return {\n      client: {\n        serverAddresses: [\"http://localhost:3001\"]\n      }\n    };\n  }\n};\n\n// Add debug logger at the top of the file\nconst DEBUG = {\n  events: true,\n  state: true,\n  render: true\n};\nfunction debugLog(type, message, data) {\n  if (DEBUG[type]) {\n    console.log(`[DEBUG:${type}] ${message}`, data !== undefined ? data : '');\n  }\n}\nfunction App() {\n  _s();\n  var _gameState$players, _gameState$players$so;\n  const [socketId, setSocketId] = useState(null);\n  const [gameState, setGameState] = useState(null);\n  const [isGameOver, setIsGameOver] = useState(false);\n  const [gameOverData, setGameOverData] = useState(null);\n  const [isConnecting, setIsConnecting] = useState(true);\n  const [error, setError] = useState(null);\n  const [socketError, setSocketError] = useState(null);\n  const [serverStatus, setServerStatus] = useState('connecting');\n\n  // Hard‐drop guard so holding space won't repeat\n  const hardDropActiveRef = useRef(false);\n\n  // Add state for background rotation\n  const [currentBackgroundIndex, setCurrentBackgroundIndex] = useState(0);\n  const backgroundIntervalRef = useRef(null);\n\n  // Add state for timer and scoring\n  const [elapsedTime, setElapsedTime] = useState(0);\n  const [currentScore, setCurrentScore] = useState(0);\n  const [lastScoreChange, setLastScoreChange] = useState(0);\n  const [level, setLevel] = useState(1);\n  const timerIntervalRef = useRef(null);\n\n  // Connect to servers on component mount\n  useEffect(() => {\n    const connectToServers = async () => {\n      try {\n        setIsConnecting(true);\n        setServerStatus('connecting');\n\n        // Initialize server manager\n        await serverManager.initialize(\n        // onConnected callback\n        activeSocket => {\n          debugLog('events', 'Connected to leader server with ID:', activeSocket.id);\n          setSocketId(activeSocket.id);\n          setIsConnecting(false);\n          setServerStatus('connected');\n          setSocketError(null);\n\n          // Explicitly request initial state after connection\n          serverManager.emit('requestInitialState');\n        },\n        // onStateChange callback\n        change => {\n          if (change.type === 'leaderChanged') {\n            debugLog('events', 'Leader server changed to:', change.server.url);\n            setSocketId(change.server.socket.id);\n\n            // Server change notification\n            setServerStatus('switchedServer');\n            setTimeout(() => setServerStatus('connected'), 3000);\n\n            // Re-request initial state after server change\n            serverManager.emit('requestInitialState');\n          } else if (change.type === 'allServersDown') {\n            setSocketError('All servers are down. Please try again later.');\n            setServerStatus('disconnected');\n          }\n        });\n\n        // Set up event handlers\n\n        // Handle initial state\n        serverManager.on('init', initialState => {\n          debugLog('events', 'Received init event with state:', initialState);\n          setGameState(initialState);\n        });\n\n        // Handle room rejoined - when reconnecting to existing session\n        serverManager.on('roomRejoined', data => {\n          var _data$gameState$playe;\n          debugLog('events', 'Received roomRejoined event with data:', data);\n\n          // Save the new session data with updated socket ID\n          saveGameSession({\n            roomCode: data.roomCode,\n            playerName: ((_data$gameState$playe = data.gameState.players[serverManager.getSocketId()]) === null || _data$gameState$playe === void 0 ? void 0 : _data$gameState$playe.name) || 'Player',\n            socketId: serverManager.getSocketId()\n          });\n\n          // Track successful reconnection to avoid fallback attempts\n          serverManager.hasRejoinedRoom = true;\n\n          // Update game state for player\n          setGameState(data.gameState);\n          setError(null);\n        });\n\n        // Handle room creation - save session\n        serverManager.on('roomCreated', data => {\n          var _data$gameState$playe2;\n          debugLog('events', 'Received roomCreated event with data:', data);\n\n          // Save session data for automatic reconnection\n          saveGameSession({\n            roomCode: data.roomCode,\n            playerName: ((_data$gameState$playe2 = data.gameState.players[serverManager.getSocketId()]) === null || _data$gameState$playe2 === void 0 ? void 0 : _data$gameState$playe2.name) || 'Player',\n            socketId: serverManager.getSocketId()\n          });\n          debugLog('state', 'Setting appPhase to readyscreen from:', gameState === null || gameState === void 0 ? void 0 : gameState.appPhase);\n          setGameState(prevState => {\n            const newState = {\n              ...data.gameState,\n              appPhase: 'readyscreen'\n            };\n            debugLog('state', 'New gameState after roomCreated:', newState);\n            return newState;\n          });\n          setError(null);\n        });\n\n        // Handle room join - save session\n        serverManager.on('roomJoined', data => {\n          var _data$gameState$playe3;\n          debugLog('events', 'Received roomJoined event with data:', data);\n\n          // Save session data for automatic reconnection\n          saveGameSession({\n            roomCode: data.roomCode,\n            playerName: ((_data$gameState$playe3 = data.gameState.players[serverManager.getSocketId()]) === null || _data$gameState$playe3 === void 0 ? void 0 : _data$gameState$playe3.name) || 'Player',\n            socketId: serverManager.getSocketId()\n          });\n          setGameState(prevState => {\n            const newState = {\n              ...data.gameState,\n              appPhase: 'readyscreen'\n            };\n            debugLog('state', 'New gameState after roomJoined:', newState);\n            return newState;\n          });\n          setError(null);\n        });\n\n        // Handle leaving room - clear session\n        serverManager.on('roomLeft', data => {\n          debugLog('events', 'Received roomLeft event with data:', data);\n\n          // Clear session data when leaving room\n          clearGameSession();\n          debugLog('state', 'Setting appPhase to homescreen from:', gameState === null || gameState === void 0 ? void 0 : gameState.appPhase);\n          setGameState(prevState => {\n            const newState = {\n              appPhase: 'homescreen',\n              socketId: serverManager.getSocketId()\n            };\n            debugLog('state', 'New gameState after roomLeft:', newState);\n            return newState;\n          });\n        });\n\n        // Handle game state updates\n        serverManager.on('gameState', newState => {\n          debugLog('events', 'Received gameState update with appPhase:', newState === null || newState === void 0 ? void 0 : newState.appPhase);\n          setGameState(prevState => {\n            // If we're showing a readyscreen from a room we just created or joined,\n            // don't let a gameState event with homescreen override it\n            if ((prevState === null || prevState === void 0 ? void 0 : prevState.appPhase) === 'readyscreen' && (newState === null || newState === void 0 ? void 0 : newState.appPhase) === 'homescreen') {\n              debugLog('state', 'Ignoring homescreen gameState while in readyscreen');\n              return prevState;\n            }\n            debugLog('state', 'Updating gameState from:', prevState === null || prevState === void 0 ? void 0 : prevState.appPhase, 'to:', newState === null || newState === void 0 ? void 0 : newState.appPhase);\n            return newState;\n          });\n        });\n\n        // Handle errors\n        serverManager.on('error', ({\n          message\n        }) => {\n          debugLog('events', 'Received server error:', message);\n          setError(message);\n        });\n\n        // Handle game over - clear session\n        serverManager.on('gameOver', data => {\n          console.log('Game over with data:', data);\n\n          // Clear session on game over\n          clearGameSession();\n          setIsGameOver(true);\n          setGameOverData(data);\n        });\n\n        // Handle player joined notification\n        serverManager.on('playerJoined', ({\n          playerId,\n          player,\n          gameState\n        }) => {\n          console.log(`Player joined: ${playerId}`);\n          setGameState(gameState);\n        });\n\n        // Handle player left notification\n        serverManager.on('playerLeft', ({\n          playerId,\n          gameState\n        }) => {\n          console.log(`Player left: ${playerId}`);\n          setGameState(gameState);\n        });\n\n        // Handle host assignment (when previous host leaves)\n        serverManager.on('hostAssigned', ({\n          gameState\n        }) => {\n          console.log('You are now the host');\n          setGameState(gameState);\n        });\n      } catch (err) {\n        console.error('Error connecting to servers:', err);\n        setSocketError(`Error connecting to servers: ${err.message}`);\n        setIsConnecting(false);\n        setServerStatus('error');\n      }\n    };\n    connectToServers();\n\n    // Cleanup on component unmount\n    return () => {\n      serverManager.disconnect();\n    };\n  }, []);\n\n  // Background rotation effect - only active during gameplay\n  useEffect(() => {\n    // Clear any existing background rotation interval\n    if (backgroundIntervalRef.current) {\n      clearInterval(backgroundIntervalRef.current);\n      backgroundIntervalRef.current = null;\n    }\n\n    // Start background rotation when game is playing\n    if (gameState && gameState.appPhase === 'playing') {\n      // Randomize starting background\n      setCurrentBackgroundIndex(Math.floor(Math.random() * BACKGROUND_IMAGES.length));\n\n      // Set interval to rotate backgrounds\n      backgroundIntervalRef.current = setInterval(() => {\n        setCurrentBackgroundIndex(prevIndex => (prevIndex + 1) % BACKGROUND_IMAGES.length);\n      }, BACKGROUND_CHANGE_INTERVAL);\n    }\n\n    // Cleanup on unmount or phase change\n    return () => {\n      if (backgroundIntervalRef.current) {\n        clearInterval(backgroundIntervalRef.current);\n        backgroundIntervalRef.current = null;\n      }\n    };\n  }, [gameState === null || gameState === void 0 ? void 0 : gameState.appPhase]);\n\n  // Timer management based on game phase\n  useEffect(() => {\n    // Clean up the previous interval if it exists\n    if (timerIntervalRef.current) {\n      clearInterval(timerIntervalRef.current);\n      timerIntervalRef.current = null;\n    }\n    if (gameState && gameState.appPhase === 'playing') {\n      // Reset the timer when game starts\n      setElapsedTime(0);\n      setCurrentScore(0);\n      setLastScoreChange(0);\n      setLevel(1);\n\n      // Start a new timer that updates every 10ms for centisecond precision\n      timerIntervalRef.current = setInterval(() => {\n        setElapsedTime(prevTime => prevTime + 10);\n      }, 10);\n      console.log('Timer started');\n    }\n\n    // Cleanup on unmount or phase change\n    return () => {\n      if (timerIntervalRef.current) {\n        clearInterval(timerIntervalRef.current);\n        timerIntervalRef.current = null;\n      }\n    };\n  }, [gameState === null || gameState === void 0 ? void 0 : gameState.appPhase]);\n\n  // Update the player list for display and track current player's score\n  const updatePlayerList = useCallback(players => {\n    if (!players || typeof players !== 'object') return;\n\n    // Map player data to what we need\n    const playerEntries = Object.entries(players);\n    const currentSocketId = serverManager.getSocketId();\n\n    // Update current player score state for the score panel\n    if (currentSocketId) {\n      const currentPlayerEntry = playerEntries.find(([id]) => id === currentSocketId);\n      if (currentPlayerEntry) {\n        const [, currentPlayer] = currentPlayerEntry;\n\n        // Update score if changed\n        if (currentPlayer.score !== currentScore) {\n          const scoreChange = Math.max(0, currentPlayer.score - currentScore);\n          if (scoreChange > 0) {\n            setLastScoreChange(scoreChange);\n            // Reset the score change highlight after 1 second\n            setTimeout(() => setLastScoreChange(0), 1000);\n          }\n          setCurrentScore(currentPlayer.score);\n        }\n\n        // Update level if changed\n        if (currentPlayer.level && currentPlayer.level !== level) {\n          setLevel(currentPlayer.level);\n        }\n      }\n    }\n  }, [currentScore, level]);\n\n  // Keyboard control handlers\n  useEffect(() => {\n    if (!socketId || !gameState) return;\n    const handleKeyDown = e => {\n      // Only process key events if game is in progress\n      if (gameState.appPhase === 'playing') {\n        switch (e.code) {\n          case 'ArrowLeft':\n            // First send immediate move, then start DAS\n            serverManager.emit('playerAction', {\n              type: 'moveLeft'\n            });\n            serverManager.emit('playerAction', {\n              type: 'startDAS',\n              direction: 'left'\n            });\n            break;\n          case 'ArrowRight':\n            // First send immediate move, then start DAS\n            serverManager.emit('playerAction', {\n              type: 'moveRight'\n            });\n            serverManager.emit('playerAction', {\n              type: 'startDAS',\n              direction: 'right'\n            });\n            break;\n          case 'ArrowUp':\n          case 'KeyZ':\n            serverManager.emit('playerAction', {\n              type: 'rotate'\n            });\n            break;\n          case 'ArrowDown':\n            serverManager.emit('playerAction', {\n              type: 'softDrop'\n            });\n            break;\n          case 'Space':\n            // guard against auto‑repeat when holding space\n            if (!hardDropActiveRef.current) {\n              serverManager.emit('playerAction', {\n                type: 'hardDrop'\n              });\n              hardDropActiveRef.current = true;\n            }\n            break;\n          default:\n            break;\n        }\n      } else if (gameState.appPhase === 'readyscreen') {\n        // Handle ready toggle on X key press\n        if (e.code === 'KeyX') {\n          const isCurrentlyReady = gameState.readyPlayers && gameState.readyPlayers.includes(socketId);\n          console.log('X key pressed, toggling ready state:', !isCurrentlyReady);\n          serverManager.emit('playerReady', !isCurrentlyReady);\n        }\n      }\n    };\n    const handleKeyUp = e => {\n      // Only process key events if game is in progress\n      if (gameState.appPhase === 'playing') {\n        switch (e.code) {\n          case 'ArrowLeft':\n          case 'ArrowRight':\n            serverManager.emit('playerAction', {\n              type: 'endDAS'\n            });\n            break;\n          case 'ArrowDown':\n            serverManager.emit('playerAction', {\n              type: 'endSoftDrop'\n            });\n            break;\n          case 'Space':\n            // re‑enable hardDrop once key is released\n            hardDropActiveRef.current = false;\n            break;\n          default:\n            break;\n        }\n      }\n    };\n    window.addEventListener('keydown', handleKeyDown);\n    window.addEventListener('keyup', handleKeyUp);\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n      window.removeEventListener('keyup', handleKeyUp);\n    };\n  }, [socketId, gameState]);\n\n  // Room management handlers\n  const handleCreateRoom = useCallback(playerName => {\n    serverManager.emit('createRoom', playerName);\n  }, []);\n  const handleJoinRoom = useCallback((roomCode, playerName) => {\n    serverManager.emit('joinRoom', {\n      roomCode,\n      playerName\n    });\n  }, []);\n  const handleLeaveRoom = useCallback(() => {\n    serverManager.emit('leaveRoom');\n  }, []);\n\n  // Handle player ready state\n  const handlePlayerReady = useCallback(isReady => {\n    serverManager.emit('playerReady', isReady);\n  }, []);\n\n  // Handle game start\n  const handleStartGame = useCallback(() => {\n    serverManager.emit('startGame');\n  }, []);\n\n  // Handle game mode change\n  const handleSetGameMode = useCallback(mode => {\n    serverManager.emit('setGameMode', mode);\n  }, []);\n\n  // Handle game over timeout\n  const handleGameOverTimeout = useCallback(() => {\n    setIsGameOver(false);\n    setGameOverData(null);\n  }, []);\n\n  // Get the current background image URL\n  const getCurrentBackgroundUrl = () => {\n    if (!BACKGROUND_IMAGES.length) return null;\n    return `${process.env.PUBLIC_URL}/backgrounds/${BACKGROUND_IMAGES[currentBackgroundIndex]}`;\n  };\n\n  // Show loading or error screen\n  if (isConnecting) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Connecting to server...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 481,\n        columnNumber: 33\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 481,\n      columnNumber: 12\n    }, this);\n  }\n  if (socketError) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Connection Error\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 487,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: socketError\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 488,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Please check that the server is running and the configuration is correct.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 489,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => window.location.reload(),\n        style: {\n          padding: '10px 20px',\n          backgroundColor: '#FF5733',\n          border: 'none',\n          borderRadius: '4px',\n          color: 'white',\n          cursor: 'pointer',\n          marginTop: '20px'\n        },\n        children: \"Retry Connection\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 490,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 486,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Show loading screen if no game state\n  if (!gameState) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Waiting for game state...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 510,\n        columnNumber: 33\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 510,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Render appropriate screen based on app phase\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    style: {\n      ...(gameState.appPhase === 'playing' && {\n        backgroundImage: `url(${getCurrentBackgroundUrl()})`,\n        backgroundSize: 'cover',\n        backgroundPosition: 'center',\n        transition: 'background-image 1s ease-in-out',\n        minHeight: '100vh'\n      })\n    },\n    tabIndex: \"0\",\n    children: [serverStatus === 'switchedServer' && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'fixed',\n        top: '10px',\n        left: '50%',\n        transform: 'translateX(-50%)',\n        backgroundColor: 'rgba(50, 50, 50, 0.9)',\n        color: '#fff',\n        padding: '10px 20px',\n        borderRadius: '4px',\n        boxShadow: '0 2px 10px rgba(0,0,0,0.3)',\n        zIndex: 1000,\n        display: 'flex',\n        alignItems: 'center',\n        transition: 'opacity 0.3s ease',\n        opacity: 1\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          marginRight: '10px'\n        },\n        children: \"\\u26A0\\uFE0F\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 546,\n        columnNumber: 11\n      }, this), \"Reconnected to new server. Game continuing...\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 530,\n      columnNumber: 9\n    }, this), gameState.appPhase === 'homescreen' && /*#__PURE__*/_jsxDEV(NewHomeScreen, {\n      onCreateRoom: handleCreateRoom,\n      onJoinRoom: handleJoinRoom,\n      error: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 552,\n      columnNumber: 9\n    }, this), gameState.appPhase === 'readyscreen' && /*#__PURE__*/_jsxDEV(ReadyScreen, {\n      roomCode: gameState.roomCode,\n      players: gameState.players || {},\n      currentPlayerId: socketId,\n      readyPlayers: gameState.readyPlayers || [],\n      onReady: handlePlayerReady,\n      onStartGame: handleStartGame,\n      onLeaveRoom: handleLeaveRoom,\n      onSetGameMode: handleSetGameMode,\n      gameMode: gameState.gameMode,\n      gameInProgress: gameState.gameInProgress,\n      isHost: (_gameState$players = gameState.players) === null || _gameState$players === void 0 ? void 0 : (_gameState$players$so = _gameState$players[socketId]) === null || _gameState$players$so === void 0 ? void 0 : _gameState$players$so.isHost\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 560,\n      columnNumber: 9\n    }, this), gameState.appPhase === 'playing' && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        backgroundColor: 'rgba(0, 0, 0, 0.8)',\n        backdropFilter: 'blur(5px)',\n        padding: '20px',\n        borderRadius: '10px',\n        margin: '10px auto',\n        maxWidth: '900px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          justifyContent: 'space-between',\n          alignItems: 'center',\n          marginBottom: '15px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          style: {\n            margin: 0,\n            fontSize: '28px',\n            color: '#fff'\n          },\n          children: \"Tetristributed\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 590,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            alignItems: 'center',\n            gap: '15px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              fontSize: '14px',\n              backgroundColor: '#444',\n              padding: '5px 10px',\n              borderRadius: '4px',\n              display: 'flex',\n              flexDirection: 'column',\n              alignItems: 'center'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                fontSize: '10px',\n                color: '#aaa'\n              },\n              children: \"ROOM\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 605,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                fontWeight: 'bold'\n              },\n              children: gameState.roomCode\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 606,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 596,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              fontSize: '14px',\n              backgroundColor: '#333',\n              padding: '5px 10px',\n              borderRadius: '4px'\n            },\n            children: [\"Player: \", socketId && socketId.substring(0, 4)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 608,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 591,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 584,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          gap: '20px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center'\n          },\n          children: /*#__PURE__*/_jsxDEV(BoardStage, {\n            board: gameState.board || [],\n            players: gameState.players || {},\n            linesToClear: gameState.linesToClear || []\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 621,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 620,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            flexDirection: 'column',\n            minWidth: '220px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(ScorePanel, {\n            score: currentScore,\n            level: level,\n            lastScoreChange: lastScoreChange,\n            elapsedTime: elapsedTime\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 634,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              backgroundColor: 'rgba(40, 40, 40, 0.9)',\n              padding: '12px',\n              borderRadius: '8px',\n              marginTop: '15px'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              style: {\n                margin: '0 0 10px 0',\n                fontSize: '18px',\n                color: '#ccc'\n              },\n              children: \"Players\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 648,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n              style: {\n                listStyle: 'none',\n                padding: 0,\n                margin: 0\n              },\n              children: Object.entries(gameState.players || {}).map(([id, player]) => {\n                const isCurrentPlayer = id === socketId;\n                const shortId = id.substring(0, 4);\n                return /*#__PURE__*/_jsxDEV(\"li\", {\n                  style: {\n                    margin: '6px 0',\n                    padding: '8px',\n                    backgroundColor: isCurrentPlayer ? '#444' : '#333',\n                    borderLeft: `4px solid ${player.color || '#ccc'}`,\n                    borderRadius: '4px',\n                    transition: 'background-color 0.3s'\n                  },\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    style: {\n                      display: 'flex',\n                      alignItems: 'center',\n                      justifyContent: 'space-between'\n                    },\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                        style: {\n                          fontWeight: isCurrentPlayer ? 'bold' : 'normal',\n                          color: isCurrentPlayer ? '#fff' : '#ccc'\n                        },\n                        children: player.name || `Player ${player.playerNumber || shortId}`\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 672,\n                        columnNumber: 29\n                      }, this), isCurrentPlayer && /*#__PURE__*/_jsxDEV(\"span\", {\n                        style: {\n                          fontSize: '12px',\n                          marginLeft: '5px',\n                          color: '#ffcc00'\n                        },\n                        children: \"(You)\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 678,\n                        columnNumber: 49\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 671,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      style: {\n                        backgroundColor: '#222',\n                        padding: '2px 6px',\n                        borderRadius: '3px',\n                        fontSize: '14px',\n                        fontWeight: 'bold'\n                      },\n                      children: player.score || 0\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 686,\n                      columnNumber: 27\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 666,\n                    columnNumber: 25\n                  }, this)\n                }, id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 655,\n                  columnNumber: 23\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 649,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                marginTop: '15px',\n                padding: '8px',\n                backgroundColor: '#222',\n                borderRadius: '4px',\n                textAlign: 'center'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  fontSize: '12px',\n                  color: '#aaa'\n                },\n                children: \"GAME MODE\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 708,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  fontSize: '16px',\n                  fontWeight: 'bold',\n                  marginTop: '4px'\n                },\n                children: gameState.gameMode || 'Classic'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 709,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 701,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 642,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              backgroundColor: 'rgba(40, 40, 40, 0.7)',\n              padding: '12px',\n              borderRadius: '8px',\n              marginTop: '15px',\n              fontSize: '12px',\n              color: '#aaa'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                marginBottom: '5px',\n                fontWeight: 'bold',\n                color: '#ccc'\n              },\n              children: \"Controls:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 724,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: \"\\u2190 \\u2192 : Move\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 725,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: \"\\u2193 : Soft Drop\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 726,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: \"\\u2191 / Z : Rotate\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 727,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: \"Space : Hard Drop\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 728,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 716,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 628,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 619,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 576,\n      columnNumber: 9\n    }, this), isGameOver && gameOverData && /*#__PURE__*/_jsxDEV(GameOverScreen, {\n      gameOverData: gameOverData,\n      currentPlayerId: socketId,\n      onTimeout: handleGameOverTimeout\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 736,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 515,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"WrhPFgF9STzaP/yRpOMVbXt/tg0=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","useCallback","useRef","BoardStage","NewHomeScreen","ReadyScreen","GameOverScreen","ScorePanel","serverManager","saveGameSession","getGameSession","clearGameSession","jsxDEV","_jsxDEV","BACKGROUND_IMAGES","BACKGROUND_CHANGE_INTERVAL","loadConfig","response","fetch","ok","Error","status","json","error","console","warn","client","serverAddresses","DEBUG","events","state","render","debugLog","type","message","data","log","undefined","App","_s","_gameState$players","_gameState$players$so","socketId","setSocketId","gameState","setGameState","isGameOver","setIsGameOver","gameOverData","setGameOverData","isConnecting","setIsConnecting","setError","socketError","setSocketError","serverStatus","setServerStatus","hardDropActiveRef","currentBackgroundIndex","setCurrentBackgroundIndex","backgroundIntervalRef","elapsedTime","setElapsedTime","currentScore","setCurrentScore","lastScoreChange","setLastScoreChange","level","setLevel","timerIntervalRef","connectToServers","initialize","activeSocket","id","emit","change","server","url","socket","setTimeout","on","initialState","_data$gameState$playe","roomCode","playerName","players","getSocketId","name","hasRejoinedRoom","_data$gameState$playe2","appPhase","prevState","newState","_data$gameState$playe3","playerId","player","err","disconnect","current","clearInterval","Math","floor","random","length","setInterval","prevIndex","prevTime","updatePlayerList","playerEntries","Object","entries","currentSocketId","currentPlayerEntry","find","currentPlayer","score","scoreChange","max","handleKeyDown","e","code","direction","isCurrentlyReady","readyPlayers","includes","handleKeyUp","window","addEventListener","removeEventListener","handleCreateRoom","handleJoinRoom","handleLeaveRoom","handlePlayerReady","isReady","handleStartGame","handleSetGameMode","mode","handleGameOverTimeout","getCurrentBackgroundUrl","process","env","PUBLIC_URL","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","location","reload","style","padding","backgroundColor","border","borderRadius","color","cursor","marginTop","backgroundImage","backgroundSize","backgroundPosition","transition","minHeight","tabIndex","position","top","left","transform","boxShadow","zIndex","display","alignItems","opacity","marginRight","onCreateRoom","onJoinRoom","currentPlayerId","onReady","onStartGame","onLeaveRoom","onSetGameMode","gameMode","gameInProgress","isHost","backdropFilter","margin","maxWidth","justifyContent","marginBottom","fontSize","gap","flexDirection","fontWeight","substring","board","linesToClear","minWidth","listStyle","map","isCurrentPlayer","shortId","borderLeft","playerNumber","marginLeft","textAlign","onTimeout","_c","$RefreshReg$"],"sources":["/Users/driesrooryck/Desktop/s25/new_try/distributed-systems/tetris/client/src/App.js"],"sourcesContent":["import React, { useEffect, useState, useCallback, useRef } from 'react';\nimport BoardStage from './BoardStage';\nimport NewHomeScreen from './NewHomeScreen';\nimport ReadyScreen from './ReadyScreen';\nimport GameOverScreen from './GameOverScreen';\nimport ScorePanel from './ScorePanel';\nimport './App.css';\n\n// Import server connection manager instead of direct socket.io\nimport serverManager from './utils/serverConnection';\nimport { saveGameSession, getGameSession, clearGameSession } from './utils/sessionStorage';\n\n// Background image configuration\nconst BACKGROUND_IMAGES = [\n  'deep-tetris-color.jpg',\n  'tetris-1920-x-1080-background-hyihqau5t3lalo4e.png',\n  'tetris-2560-x-1600-background-3bjbi7nyulqbller.jpg',\n];\nconst BACKGROUND_CHANGE_INTERVAL = 30000; // 30 seconds\n\n// Load config file to get server address\nconst loadConfig = async () => {\n  try {\n    const response = await fetch('/config.json');\n    if (!response.ok) {\n      throw new Error(`Failed to load config: ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.warn('Error loading config, using default server address:', error);\n    return { client: { serverAddresses: [\"http://localhost:3001\"] } };\n  }\n};\n\n// Add debug logger at the top of the file\nconst DEBUG = {\n  events: true,\n  state: true,\n  render: true\n};\n\nfunction debugLog(type, message, data) {\n  if (DEBUG[type]) {\n    console.log(`[DEBUG:${type}] ${message}`, data !== undefined ? data : '');\n  }\n}\n\nfunction App() {\n  const [socketId, setSocketId] = useState(null);\n  const [gameState, setGameState] = useState(null);\n  const [isGameOver, setIsGameOver] = useState(false);\n  const [gameOverData, setGameOverData] = useState(null);\n  const [isConnecting, setIsConnecting] = useState(true);\n  const [error, setError] = useState(null);\n  const [socketError, setSocketError] = useState(null);\n  const [serverStatus, setServerStatus] = useState('connecting');\n\n  // Hard‐drop guard so holding space won't repeat\n  const hardDropActiveRef = useRef(false);\n\n  // Add state for background rotation\n  const [currentBackgroundIndex, setCurrentBackgroundIndex] = useState(0);\n  const backgroundIntervalRef = useRef(null);\n\n  // Add state for timer and scoring\n  const [elapsedTime, setElapsedTime] = useState(0);\n  const [currentScore, setCurrentScore] = useState(0);\n  const [lastScoreChange, setLastScoreChange] = useState(0);\n  const [level, setLevel] = useState(1);\n  const timerIntervalRef = useRef(null);\n\n  // Connect to servers on component mount\n  useEffect(() => {\n    const connectToServers = async () => {\n      try {\n        setIsConnecting(true);\n        setServerStatus('connecting');\n        \n        // Initialize server manager\n        await serverManager.initialize(\n          // onConnected callback\n          (activeSocket) => {\n            debugLog('events', 'Connected to leader server with ID:', activeSocket.id);\n            setSocketId(activeSocket.id);\n            setIsConnecting(false);\n            setServerStatus('connected');\n            setSocketError(null);\n            \n            // Explicitly request initial state after connection\n            serverManager.emit('requestInitialState');\n          },\n          \n          // onStateChange callback\n          (change) => {\n            if (change.type === 'leaderChanged') {\n              debugLog('events', 'Leader server changed to:', change.server.url);\n              setSocketId(change.server.socket.id);\n              \n              // Server change notification\n              setServerStatus('switchedServer');\n              setTimeout(() => setServerStatus('connected'), 3000);\n              \n              // Re-request initial state after server change\n              serverManager.emit('requestInitialState');\n            }\n            else if (change.type === 'allServersDown') {\n              setSocketError('All servers are down. Please try again later.');\n              setServerStatus('disconnected');\n            }\n          }\n        );\n        \n        // Set up event handlers\n        \n        // Handle initial state\n        serverManager.on('init', (initialState) => {\n          debugLog('events', 'Received init event with state:', initialState);\n          setGameState(initialState);\n        });\n        \n        // Handle room rejoined - when reconnecting to existing session\n        serverManager.on('roomRejoined', (data) => {\n          debugLog('events', 'Received roomRejoined event with data:', data);\n          \n          // Save the new session data with updated socket ID\n          saveGameSession({\n            roomCode: data.roomCode,\n            playerName: data.gameState.players[serverManager.getSocketId()]?.name || 'Player',\n            socketId: serverManager.getSocketId()\n          });\n          \n          // Track successful reconnection to avoid fallback attempts\n          serverManager.hasRejoinedRoom = true;\n          \n          // Update game state for player\n          setGameState(data.gameState);\n          setError(null);\n        });\n        \n        // Handle room creation - save session\n        serverManager.on('roomCreated', (data) => {\n          debugLog('events', 'Received roomCreated event with data:', data);\n          \n          // Save session data for automatic reconnection\n          saveGameSession({\n            roomCode: data.roomCode,\n            playerName: data.gameState.players[serverManager.getSocketId()]?.name || 'Player',\n            socketId: serverManager.getSocketId()\n          });\n          \n          debugLog('state', 'Setting appPhase to readyscreen from:', gameState?.appPhase);\n          setGameState(prevState => {\n            const newState = {\n              ...data.gameState,\n              appPhase: 'readyscreen'\n            };\n            debugLog('state', 'New gameState after roomCreated:', newState);\n            return newState;\n          });\n          setError(null);\n        });\n        \n        // Handle room join - save session\n        serverManager.on('roomJoined', (data) => {\n          debugLog('events', 'Received roomJoined event with data:', data);\n          \n          // Save session data for automatic reconnection\n          saveGameSession({\n            roomCode: data.roomCode,\n            playerName: data.gameState.players[serverManager.getSocketId()]?.name || 'Player',\n            socketId: serverManager.getSocketId()\n          });\n          \n          setGameState(prevState => {\n            const newState = {\n              ...data.gameState,\n              appPhase: 'readyscreen'\n            };\n            debugLog('state', 'New gameState after roomJoined:', newState);\n            return newState;\n          });\n          setError(null);\n        });\n        \n        // Handle leaving room - clear session\n        serverManager.on('roomLeft', (data) => {\n          debugLog('events', 'Received roomLeft event with data:', data);\n          \n          // Clear session data when leaving room\n          clearGameSession();\n          \n          debugLog('state', 'Setting appPhase to homescreen from:', gameState?.appPhase);\n          setGameState(prevState => {\n            const newState = {\n              appPhase: 'homescreen',\n              socketId: serverManager.getSocketId()\n            };\n            debugLog('state', 'New gameState after roomLeft:', newState);\n            return newState;\n          });\n        });\n        \n        // Handle game state updates\n        serverManager.on('gameState', (newState) => {\n          debugLog('events', 'Received gameState update with appPhase:', newState?.appPhase);\n          setGameState(prevState => {\n            // If we're showing a readyscreen from a room we just created or joined,\n            // don't let a gameState event with homescreen override it\n            if (prevState?.appPhase === 'readyscreen' && newState?.appPhase === 'homescreen') {\n              debugLog('state', 'Ignoring homescreen gameState while in readyscreen');\n              return prevState;\n            }\n            debugLog('state', 'Updating gameState from:', prevState?.appPhase, 'to:', newState?.appPhase);\n            return newState;\n          });\n        });\n\n        // Handle errors\n        serverManager.on('error', ({ message }) => {\n          debugLog('events', 'Received server error:', message);\n          setError(message);\n        });\n        \n        // Handle game over - clear session\n        serverManager.on('gameOver', (data) => {\n          console.log('Game over with data:', data);\n          \n          // Clear session on game over\n          clearGameSession();\n          \n          setIsGameOver(true);\n          setGameOverData(data);\n        });\n        \n        // Handle player joined notification\n        serverManager.on('playerJoined', ({ playerId, player, gameState }) => {\n          console.log(`Player joined: ${playerId}`);\n          setGameState(gameState);\n        });\n        \n        // Handle player left notification\n        serverManager.on('playerLeft', ({ playerId, gameState }) => {\n          console.log(`Player left: ${playerId}`);\n          setGameState(gameState);\n        });\n        \n        // Handle host assignment (when previous host leaves)\n        serverManager.on('hostAssigned', ({ gameState }) => {\n          console.log('You are now the host');\n          setGameState(gameState);\n        });\n      } catch (err) {\n        console.error('Error connecting to servers:', err);\n        setSocketError(`Error connecting to servers: ${err.message}`);\n        setIsConnecting(false);\n        setServerStatus('error');\n      }\n    };\n    \n    connectToServers();\n    \n    // Cleanup on component unmount\n    return () => {\n      serverManager.disconnect();\n    };\n  }, []);\n\n  // Background rotation effect - only active during gameplay\n  useEffect(() => {\n    // Clear any existing background rotation interval\n    if (backgroundIntervalRef.current) {\n      clearInterval(backgroundIntervalRef.current);\n      backgroundIntervalRef.current = null;\n    }\n\n    // Start background rotation when game is playing\n    if (gameState && gameState.appPhase === 'playing') {\n      // Randomize starting background\n      setCurrentBackgroundIndex(Math.floor(Math.random() * BACKGROUND_IMAGES.length));\n\n      // Set interval to rotate backgrounds\n      backgroundIntervalRef.current = setInterval(() => {\n        setCurrentBackgroundIndex(prevIndex =>\n          (prevIndex + 1) % BACKGROUND_IMAGES.length\n        );\n      }, BACKGROUND_CHANGE_INTERVAL);\n    }\n\n    // Cleanup on unmount or phase change\n    return () => {\n      if (backgroundIntervalRef.current) {\n        clearInterval(backgroundIntervalRef.current);\n        backgroundIntervalRef.current = null;\n      }\n    };\n  }, [gameState?.appPhase]);\n\n  // Timer management based on game phase\n  useEffect(() => {\n    // Clean up the previous interval if it exists\n    if (timerIntervalRef.current) {\n      clearInterval(timerIntervalRef.current);\n      timerIntervalRef.current = null;\n    }\n\n    if (gameState && gameState.appPhase === 'playing') {\n      // Reset the timer when game starts\n      setElapsedTime(0);\n      setCurrentScore(0);\n      setLastScoreChange(0);\n      setLevel(1);\n\n      // Start a new timer that updates every 10ms for centisecond precision\n      timerIntervalRef.current = setInterval(() => {\n        setElapsedTime(prevTime => prevTime + 10);\n      }, 10);\n\n      console.log('Timer started');\n    }\n\n    // Cleanup on unmount or phase change\n    return () => {\n      if (timerIntervalRef.current) {\n        clearInterval(timerIntervalRef.current);\n        timerIntervalRef.current = null;\n      }\n    };\n  }, [gameState?.appPhase]);\n\n  // Update the player list for display and track current player's score\n  const updatePlayerList = useCallback((players) => {\n    if (!players || typeof players !== 'object') return;\n\n    // Map player data to what we need\n    const playerEntries = Object.entries(players);\n    const currentSocketId = serverManager.getSocketId();\n\n    // Update current player score state for the score panel\n    if (currentSocketId) {\n      const currentPlayerEntry = playerEntries.find(([id]) => id === currentSocketId);\n      if (currentPlayerEntry) {\n        const [, currentPlayer] = currentPlayerEntry;\n\n        // Update score if changed\n        if (currentPlayer.score !== currentScore) {\n          const scoreChange = Math.max(0, currentPlayer.score - currentScore);\n          if (scoreChange > 0) {\n            setLastScoreChange(scoreChange);\n            // Reset the score change highlight after 1 second\n            setTimeout(() => setLastScoreChange(0), 1000);\n          }\n          setCurrentScore(currentPlayer.score);\n        }\n\n        // Update level if changed\n        if (currentPlayer.level && currentPlayer.level !== level) {\n          setLevel(currentPlayer.level);\n        }\n      }\n    }\n  }, [currentScore, level]);\n\n  // Keyboard control handlers\n  useEffect(() => {\n    if (!socketId || !gameState) return;\n\n    const handleKeyDown = (e) => {\n      // Only process key events if game is in progress\n      if (gameState.appPhase === 'playing') {\n        switch (e.code) {\n          case 'ArrowLeft':\n            // First send immediate move, then start DAS\n            serverManager.emit('playerAction', { type: 'moveLeft' });\n            serverManager.emit('playerAction', { type: 'startDAS', direction: 'left' });\n            break;\n          case 'ArrowRight':\n            // First send immediate move, then start DAS\n            serverManager.emit('playerAction', { type: 'moveRight' });\n            serverManager.emit('playerAction', { type: 'startDAS', direction: 'right' });\n            break;\n          case 'ArrowUp':\n          case 'KeyZ':\n            serverManager.emit('playerAction', { type: 'rotate' });\n            break;\n          case 'ArrowDown':\n            serverManager.emit('playerAction', { type: 'softDrop' });\n            break;\n          case 'Space':\n            // guard against auto‑repeat when holding space\n            if (!hardDropActiveRef.current) {\n              serverManager.emit('playerAction', { type: 'hardDrop' });\n              hardDropActiveRef.current = true;\n            }\n            break;\n          default:\n            break;\n        }\n      } else if (gameState.appPhase === 'readyscreen') {\n        // Handle ready toggle on X key press\n        if (e.code === 'KeyX') {\n          const isCurrentlyReady = gameState.readyPlayers && \n            gameState.readyPlayers.includes(socketId);\n          console.log('X key pressed, toggling ready state:', !isCurrentlyReady);\n          serverManager.emit('playerReady', !isCurrentlyReady);\n        }\n      }\n    };\n\n    const handleKeyUp = (e) => {\n      // Only process key events if game is in progress\n      if (gameState.appPhase === 'playing') {\n        switch (e.code) {\n          case 'ArrowLeft':\n          case 'ArrowRight':\n            serverManager.emit('playerAction', { type: 'endDAS' });\n            break;\n          case 'ArrowDown':\n            serverManager.emit('playerAction', { type: 'endSoftDrop' });\n            break;\n          case 'Space':\n            // re‑enable hardDrop once key is released\n            hardDropActiveRef.current = false;\n            break;\n          default:\n            break;\n        }\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyDown);\n    window.addEventListener('keyup', handleKeyUp);\n\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n      window.removeEventListener('keyup', handleKeyUp);\n    };\n  }, [socketId, gameState]);\n\n  // Room management handlers\n  const handleCreateRoom = useCallback((playerName) => {\n    serverManager.emit('createRoom', playerName);\n  }, []);\n  \n  const handleJoinRoom = useCallback((roomCode, playerName) => {\n    serverManager.emit('joinRoom', { roomCode, playerName });\n  }, []);\n  \n  const handleLeaveRoom = useCallback(() => {\n    serverManager.emit('leaveRoom');\n  }, []);\n\n  // Handle player ready state\n  const handlePlayerReady = useCallback((isReady) => {\n    serverManager.emit('playerReady', isReady);\n  }, []);\n\n  // Handle game start\n  const handleStartGame = useCallback(() => {\n    serverManager.emit('startGame');\n  }, []);\n\n  // Handle game mode change\n  const handleSetGameMode = useCallback((mode) => {\n    serverManager.emit('setGameMode', mode);\n  }, []);\n\n  // Handle game over timeout\n  const handleGameOverTimeout = useCallback(() => {\n    setIsGameOver(false);\n    setGameOverData(null);\n  }, []);\n\n  // Get the current background image URL\n  const getCurrentBackgroundUrl = () => {\n    if (!BACKGROUND_IMAGES.length) return null;\n    return `${process.env.PUBLIC_URL}/backgrounds/${BACKGROUND_IMAGES[currentBackgroundIndex]}`;\n  };\n\n  // Show loading or error screen\n  if (isConnecting) {\n    return <div className=\"App\"><h1>Connecting to server...</h1></div>;\n  }\n\n  if (socketError) {\n    return (\n      <div className=\"App\">\n        <h1>Connection Error</h1>\n        <p>{socketError}</p>\n        <p>Please check that the server is running and the configuration is correct.</p>\n        <button\n          onClick={() => window.location.reload()}\n          style={{\n            padding: '10px 20px',\n            backgroundColor: '#FF5733',\n            border: 'none',\n            borderRadius: '4px',\n            color: 'white',\n            cursor: 'pointer',\n            marginTop: '20px'\n          }}\n        >\n          Retry Connection\n        </button>\n      </div>\n    );\n  }\n\n  // Show loading screen if no game state\n  if (!gameState) {\n    return <div className=\"App\"><h1>Waiting for game state...</h1></div>;\n  }\n\n  // Render appropriate screen based on app phase\n  return (\n    <div\n      className=\"App\"\n      style={{\n        ...(gameState.appPhase === 'playing' && {\n          backgroundImage: `url(${getCurrentBackgroundUrl()})`,\n          backgroundSize: 'cover',\n          backgroundPosition: 'center',\n          transition: 'background-image 1s ease-in-out',\n          minHeight: '100vh'\n        })\n      }}\n      tabIndex=\"0\"\n    >\n      {/* Server Status Notification */}\n      {serverStatus === 'switchedServer' && (\n        <div style={{\n          position: 'fixed',\n          top: '10px',\n          left: '50%',\n          transform: 'translateX(-50%)',\n          backgroundColor: 'rgba(50, 50, 50, 0.9)',\n          color: '#fff',\n          padding: '10px 20px',\n          borderRadius: '4px',\n          boxShadow: '0 2px 10px rgba(0,0,0,0.3)',\n          zIndex: 1000,\n          display: 'flex',\n          alignItems: 'center',\n          transition: 'opacity 0.3s ease',\n          opacity: 1\n        }}>\n          <span style={{ marginRight: '10px' }}>⚠️</span>\n          Reconnected to new server. Game continuing...\n        </div>\n      )}\n      \n      {gameState.appPhase === 'homescreen' && (\n        <NewHomeScreen\n          onCreateRoom={handleCreateRoom}\n          onJoinRoom={handleJoinRoom}\n          error={error}\n        />\n      )}\n      \n      {gameState.appPhase === 'readyscreen' && (\n        <ReadyScreen\n          roomCode={gameState.roomCode}\n          players={gameState.players || {}}\n          currentPlayerId={socketId}\n          readyPlayers={gameState.readyPlayers || []}\n          onReady={handlePlayerReady}\n          onStartGame={handleStartGame}\n          onLeaveRoom={handleLeaveRoom}\n          onSetGameMode={handleSetGameMode}\n          gameMode={gameState.gameMode}\n          gameInProgress={gameState.gameInProgress}\n          isHost={gameState.players?.[socketId]?.isHost}\n        />\n      )}\n\n      {gameState.appPhase === 'playing' && (\n        <div style={{\n          backgroundColor: 'rgba(0, 0, 0, 0.8)',\n          backdropFilter: 'blur(5px)',\n          padding: '20px',\n          borderRadius: '10px',\n          margin: '10px auto',\n          maxWidth: '900px'\n        }}>\n          <div style={{\n            display: 'flex',\n            justifyContent: 'space-between',\n            alignItems: 'center',\n            marginBottom: '15px'\n          }}>\n            <h1 style={{ margin: 0, fontSize: '28px', color: '#fff' }}>Tetristributed</h1>\n            <div style={{\n              display: 'flex',\n              alignItems: 'center',\n              gap: '15px'\n            }}>\n              <div style={{\n                fontSize: '14px',\n                backgroundColor: '#444',\n                padding: '5px 10px',\n                borderRadius: '4px',\n                display: 'flex',\n                flexDirection: 'column',\n                alignItems: 'center'\n              }}>\n                <span style={{fontSize: '10px', color: '#aaa'}}>ROOM</span>\n                <span style={{fontWeight: 'bold'}}>{gameState.roomCode}</span>\n              </div>\n              <div style={{\n                fontSize: '14px',\n                backgroundColor: '#333',\n                padding: '5px 10px',\n                borderRadius: '4px'\n              }}>\n                Player: {socketId && socketId.substring(0, 4)}\n              </div>\n            </div>\n          </div>\n\n          <div style={{ display: 'flex', gap: '20px' }}>\n            <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n              <BoardStage\n                board={gameState.board || []}\n                players={gameState.players || {}}\n                linesToClear={gameState.linesToClear || []}\n              />\n            </div>\n\n            <div style={{\n              display: 'flex',\n              flexDirection: 'column',\n              minWidth: '220px'\n            }}>\n              {/* Integrated Score Panel with Timer */}\n              <ScorePanel\n                score={currentScore}\n                level={level}\n                lastScoreChange={lastScoreChange}\n                elapsedTime={elapsedTime}\n              />\n\n              {/* Players List */}\n              <div style={{\n                backgroundColor: 'rgba(40, 40, 40, 0.9)',\n                padding: '12px',\n                borderRadius: '8px',\n                marginTop: '15px'\n              }}>\n                <h2 style={{ margin: '0 0 10px 0', fontSize: '18px', color: '#ccc' }}>Players</h2>\n                <ul style={{ listStyle: 'none', padding: 0, margin: 0 }}>\n                  {Object.entries(gameState.players || {}).map(([id, player]) => {\n                    const isCurrentPlayer = id === socketId;\n                    const shortId = id.substring(0, 4);\n\n                    return (\n                      <li\n                        key={id}\n                        style={{\n                          margin: '6px 0',\n                          padding: '8px',\n                          backgroundColor: isCurrentPlayer ? '#444' : '#333',\n                          borderLeft: `4px solid ${player.color || '#ccc'}`,\n                          borderRadius: '4px',\n                          transition: 'background-color 0.3s'\n                        }}\n                      >\n                        <div style={{\n                          display: 'flex',\n                          alignItems: 'center',\n                          justifyContent: 'space-between'\n                        }}>\n                          <div>\n                            <span style={{\n                              fontWeight: isCurrentPlayer ? 'bold' : 'normal',\n                              color: isCurrentPlayer ? '#fff' : '#ccc'\n                            }}>\n                              {player.name || `Player ${player.playerNumber || shortId}`}\n                            </span>\n                            {isCurrentPlayer && <span style={{\n                              fontSize: '12px',\n                              marginLeft: '5px',\n                              color: '#ffcc00'\n                            }}>\n                              (You)\n                            </span>}\n                          </div>\n                          <div style={{\n                            backgroundColor: '#222',\n                            padding: '2px 6px',\n                            borderRadius: '3px',\n                            fontSize: '14px',\n                            fontWeight: 'bold'\n                          }}>\n                            {player.score || 0}\n                          </div>\n                        </div>\n                      </li>\n                    );\n                  })}\n                </ul>\n\n                <div style={{\n                  marginTop: '15px',\n                  padding: '8px',\n                  backgroundColor: '#222',\n                  borderRadius: '4px',\n                  textAlign: 'center'\n                }}>\n                  <div style={{ fontSize: '12px', color: '#aaa' }}>GAME MODE</div>\n                  <div style={{ fontSize: '16px', fontWeight: 'bold', marginTop: '4px' }}>\n                    {gameState.gameMode || 'Classic'}\n                  </div>\n                </div>\n              </div>\n\n              {/* Controls Help */}\n              <div style={{\n                backgroundColor: 'rgba(40, 40, 40, 0.7)',\n                padding: '12px',\n                borderRadius: '8px',\n                marginTop: '15px',\n                fontSize: '12px',\n                color: '#aaa'\n              }}>\n                <div style={{ marginBottom: '5px', fontWeight: 'bold', color: '#ccc' }}>Controls:</div>\n                <div>← → : Move</div>\n                <div>↓ : Soft Drop</div>\n                <div>↑ / Z : Rotate</div>\n                <div>Space : Hard Drop</div>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {isGameOver && gameOverData && (\n        <GameOverScreen\n          gameOverData={gameOverData}\n          currentPlayerId={socketId}\n          onTimeout={handleGameOverTimeout}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}